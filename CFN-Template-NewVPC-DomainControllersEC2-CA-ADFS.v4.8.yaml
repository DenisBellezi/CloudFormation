AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Summary: Create VPC, Domain Controllers in EC2, Remote Desktop, Certificate Authority, ADFS, AD Connector, AppStream, Workspaces, Workmail and FSx. EC2 instances can be managed by SSM, including Session
  Manager, and upload metrics and logs to CloudWatch. Import AD Users from CSV file.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Resources Selection
        Parameters:
          - Parameter01aCreateRemoteDesktop
          - Parameter01cCreateCA
          - Parameter01dCreateADFS
          - Parameter01eCreateAppStream
          - Parameter01bCreateADConnector
          - Parameter01gCreateWorkspaces
          - Parameter01hCreateWorkmail
          - Parameter01fCreateFSx
          - Parameter01zInstallCWAgent
      - Label:
          default: Availability Zones and Key Pair
        Parameters:
          - Parameter02aAvailabilityZone01
          - Parameter02bAvailabilityZone02
          - Parameter03aKeyPair
      - Label:
          default: EC2 Instance Specification
        Parameters:
          - Parameter04aInstanceAMI
          - Parameter04bInstanceType
      - Label:
          default: RDP Settings
        Parameters:
          - Parameter06aRDPName
          - Parameter06bTrustedRDPSource
      - Label:
          default: Administrative Credentials
        Parameters:
          - Parameter07aAdministratorPassword
          - Parameter07bSafeModePassword
      - Label:
          default: Active Directory Settings
        Parameters:
          - Parameter08aDNSDomainName
          - Parameter08bNetBiosName
          - Parameter08cImportUsers
          - Parameter08dBucketName
          - Parameter08eFilePath
          - Parameter08cDomainFunctionalLevel
          - Parameter08dForestFunctionalLevel
          - Parameter08eDomainController01Name
          - Parameter08fDomainController01IP
          - Parameter08gDomainController02Name
          - Parameter08hDomainController02IP
      - Label:
          default: AD Connector Settings
        Parameters:
          - Parameter08iADConnectorSize
          - Parameter08jADConnectorGroup
          - Parameter08lADConnectorUSR
      - Label:
          default: Certificate Authority Settings
        Parameters:
          - Parameter09aRootCAName
          - Parameter09bRootCAIP
          - Parameter09cRootCAKeyLength
          - Parameter09dRootCAHash
          - Parameter10aSubordinateCAName
          - Parameter10bSubordinateCAIP
          - Parameter10cSubordinateCAKeyLength
          - Parameter10dSubordinateCAHash
      - Label:
          default: ADFS Settings
        Parameters:
          - Parameter12aADFSName
          - Parameter12bFederationServiceName
          - Parameter12dADFSServiceAccount
          - Parameter12dADFSType
          - Parameter12eUpdateRoute53
          - Parameter12fHostZoneID
      - Label:
          default: AppStream Settings
        Parameters:
          - Parameter20aAppStreamImage
          - Parameter20bAppStreamInstanceType
          - Parameter20cAppStreamFleetType
          - Parameter20dFleetStreamView
          - Parameter20eAppSNetwork
          - Parameter20fAppStreamCapacity
          - Parameter20gAppSFleetStart
          - Parameter20hStackPersistentSettings
          - Parameter13aAppStreamGroup
          - Parameter13bAppStreamSvcAccount
      - Label:
          default: Workspaces Settings
        Parameters:
          - Parameter24gUsersWorkspaces
          - Parameter24aBundleId
          - Parameter24bComputeType
          - Parameter24cRunMode
          - Parameter24hWorkspacesNetwork
          - Parameter24iLocalAdmins
          - Parameter24eEnableSelfService
          - Parameter24dEnableWorkdocs
      - Label:
          default: FSx Settings
        Parameters:
          - Parameter21eTagName
          - Parameter21aDeployType
          - Parameter21bStorageCapacity
          - Parameter21cStorageType
          - Parameter21dThroughput
          - Parameter21fFSxGroup
          - Parameter21gFSxSvcAccount
      - Label:
          default: Workmail Settings
        Parameters:
          - Parameter26bDirectorAlias
          - Parameter26eDNSDomainName
          - Parameter26cUpdateR53
          - Parameter26dHostedZoneID
      - Label:
          default: VPC Settings
        Parameters:
          - Parameter99aVPCCidrBlock
          - Parameter99bPublicSubnetServers01
          - Parameter99cPublicSubnetServers02
          - Parameter99dPrivateSubnetServers01
          - Parameter99ePrivateSubnetServers02
          - Parameter99fPublicSubnetVDI01
          - Parameter99gPublicSubnetVDI02
          - Parameter99hPrivateSubnetVDI01
          - Parameter99iPrivateSubnetVDI02
    ParameterLabels:
      Parameter01aCreateRemoteDesktop:
        default: Remote Desktop
      Parameter01bCreateADConnector:
        default: AD Connector
      Parameter01cCreateCA:
        default: Certificate Authority
      Parameter01dCreateADFS:
        default: ADFS
      Parameter01eCreateAppStream:
        default: AppStream
      Parameter01gCreateWorkspaces:
        default: Workspaces
      Parameter01fCreateFSx:
        default: FSx
      Parameter01zInstallCWAgent:
        default: CloudWatch Agent
      Parameter02aAvailabilityZone01:
        default: Availability Zone 01
      Parameter02bAvailabilityZone02:
        default: Availability Zone 02
      Parameter03aKeyPair:
        default: Key Pair
      Parameter04aInstanceAMI:
        default: AMI ID
      Parameter04bInstanceType:
        default: Instance Type
      Parameter06aRDPName:
        default: RDP Server Name
      Parameter06bTrustedRDPSource:
        default: IP Allowed To Connect via RDP
      Parameter07aAdministratorPassword:
        default: Domain Administrator Password
      Parameter07bSafeModePassword:
        default: Active Directory Safe Mode Password
      Parameter08aDNSDomainName:
        default: Active Directory DNS Name
      Parameter08bNetBiosName:
        default: Active Directory NetBios Name
      Parameter08cDomainFunctionalLevel:
        default: Active Directory Domain Functional Level
      Parameter08dForestFunctionalLevel:
        default: Active Directory Forest Functional Level
      Parameter08eDomainController01Name:
        default: Domain Controller 01 Name
      Parameter08fDomainController01IP:
        default: Domain Controller 01 IP Address
      Parameter08gDomainController02Name:
        default: Domain Controller 02 Name
      Parameter08hDomainController02IP:
        default: Domain Controller 02 IP Address
      Parameter08iADConnectorSize:
        default: AD Connector Size
      Parameter08jADConnectorGroup:
        default: AD Connector Group
      Parameter08lADConnectorUSR:
        default: AD Connector Service Account
      Parameter08cImportUsers:
        default: AD Users Import
      Parameter08dBucketName:
        default: S3 Bucket
      Parameter08eFilePath:
        default: CSV File Path
      Parameter09aRootCAName:
        default: Root CA Name
      Parameter09bRootCAIP:
        default: Root CA IP Address
      Parameter09cRootCAKeyLength:
        default: Root CA Key Length
      Parameter09dRootCAHash:
        default: Root CA Hash Algorithm
      Parameter10aSubordinateCAName:
        default: Subordinate CA Name
      Parameter10bSubordinateCAIP:
        default: Subordinate CA IP Address
      Parameter10cSubordinateCAKeyLength:
        default: Subordinate CA Key Length
      Parameter10dSubordinateCAHash:
        default: Subordinate CA Hash Algorithm
      Parameter12aADFSName:
        default: ADFS Server Name
      Parameter12bFederationServiceName:
        default: ADFS Federation Name
      Parameter12dADFSServiceAccount:
        default: ADFS Service Account
      Parameter12dADFSType:
        default: ADFS Accessibility
      Parameter12eUpdateRoute53:
        default: Create ADFS record in Route 53
      Parameter12fHostZoneID:
        default: Route 53 Hosted Zone ID
      Parameter20aAppStreamImage:
        default: AppStream Image Name
      Parameter20bAppStreamInstanceType:
        default: AppStream Instance Type
      Parameter20cAppStreamFleetType:
        default: AppStream Fleet Type
      Parameter20dFleetStreamView:
        default: AppStream Fleet Stream View
      Parameter20eAppSNetwork:
        default: AppStream Network
      Parameter20fAppStreamCapacity:
        default: AppStream Fleet Desired Capacity
      Parameter20gAppSFleetStart:
        default: AppStream Fleet Start
      Parameter20hStackPersistentSettings:
        default: AppStream Stack "Application Persistence Settings"
      Parameter13aAppStreamGroup:
        default: AppStream Active Directory Group
      Parameter13bAppStreamSvcAccount:
        default: AppStream Active Directory Service Account
      Parameter21aDeployType:
        default: Deployment Type
      Parameter21bStorageCapacity:
        default: Storage Capacity
      Parameter21cStorageType:
        default: Storage Type
      Parameter21dThroughput:
        default: Throughput Capacity
      Parameter21eTagName:
        default: Name
      Parameter21fFSxGroup:
        default: FSx Active Directory Group
      Parameter21gFSxSvcAccount:
        default: FSx Active Directory Service Account
      Parameter24aBundleId:
        default: Bundle ID
      Parameter24bComputeType:
        default: Compute Type
      Parameter24cRunMode:
        default: Running Mode
      Parameter24hWorkspacesNetwork:
        default: Workspaces Network
      Parameter24iLocalAdmins:
        default: Workspaces Local Administrators
      Parameter24dEnableWorkdocs:
        default: Enable Workdocs
      Parameter24eEnableSelfService:
        default: Enable Workspaces Self-Service
      Parameter24gUsersWorkspaces:
        default: Active Directory Users
      Parameter01hCreateWorkmail:
        default: Workmail
      Parameter26bDirectorAlias:
        default: Directory Alias
      Parameter26eDNSDomainName:
        default: Workmail DNS Domain
      Parameter26cUpdateR53:
        default: Update Route 53 Zone
      Parameter26dHostedZoneID:
        default: Route 53 Hosted Zone ID
      Parameter99aVPCCidrBlock:
        default: VPC CIDR
      Parameter99bPublicSubnetServers01:
        default: Public Subnet for EC2 Instances in AZ 01
      Parameter99cPublicSubnetServers02:
        default: Public Subnet for EC2 Instances in AZ 02
      Parameter99dPrivateSubnetServers01:
        default: Private Subnet for EC2 Instances in AZ 01
      Parameter99ePrivateSubnetServers02:
        default: Private Subnet for EC2 Instances in AZ 02
      Parameter99fPublicSubnetVDI01:
        default: Public Subnet for Virtual Desktops Instances in AZ 01
      Parameter99gPublicSubnetVDI02:
        default: Public Subnet for Virtual Desktops Instances in AZ 02
      Parameter99hPrivateSubnetVDI01:
        default: Private Subnet for Virtual Desktops Instances in AZ 01
      Parameter99iPrivateSubnetVDI02:
        default: Private Subnet for Virtual Desktops Instances in AZ 02
Parameters:
  Parameter01aCreateRemoteDesktop:
    Type: String
    Default: 'YES'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: Select YES to create a Remote Desktop Server to be the bastion host to the VPC.
  Parameter01bCreateADConnector:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: Select YES to create an AD Connector.
  Parameter01cCreateCA:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: Select YES to create a Certificate Authority infrastructure with Standalone Root CA and Enterprise Subordinate CA.
  Parameter01dCreateADFS:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: 'Select YES to create an ADFS Server. IMPORTANT: ADFS REQUIRES CERTIFICATE AUTHORITY.'
  Parameter01eCreateAppStream:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: 'Select YES to create an AppStream infrastructure. IMPORTANT: APPSTREAM REQUIRES ADFS.'
  Parameter01gCreateWorkspaces:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: 'Select YES to enable the Workspaces service and create a workspace for the domain administrator. IMPORTANT: WORKSPACES REQUIRES AD CONNECTOR.'
  Parameter01fCreateFSx:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: Select YES to create an FSx file system for Windows.
  Parameter01zInstallCWAgent:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'NO'
      - Event Viewer and Advanced Metrics
      - Event Viewer and Basic Metrics
      - Only Event Viewer
      - Only Basic Metrics
    Description: Select the option to install CloudWatch agent on EC2 instances.
  Parameter02aAvailabilityZone01:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Select the Availability Zone 01.
  Parameter02bAvailabilityZone02:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Select the Availability Zone 02.
  Parameter03aKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select an available Key Pair in the region to create the EC2 instances.
  Parameter04aInstanceAMI:
    Type: String
    AllowedPattern: ^ami-.*
    Description: Enter the AMI ID of a "Windows_Server-20xx-English-Full-Base" in the region where the resources will be created.
  Parameter04bInstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m4.large
      - m5.large
      - m4.xlarge
      - m5.xlarge
      - m4.2xlarge
      - m5.2xlarge
      - c4.large
      - c5.large
      - c4.xlarge
      - c5.xlarge
      - c4.2xlarge
      - c5.2xlarge
      - r4.large
      - r5.large
      - r4.xlarge
      - r5.xlarge
      - r4.2xlarge
      - r5.2xlarge
    Description: 'Select the instance type. Default: t2.medium'
  Parameter06aRDPName:
    Type: String
    Default: RDP01
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Description: 'Enter the RDP server name. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: RDP01'
  Parameter06bTrustedRDPSource:
    Type: String
    Default: 127.0.0.1/32
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    Description: 'Enter the PUBLIC IP ADDRESS authorized to access the Remote Desktop. Default: 127.0.0.1/32.'
  Parameter07aAdministratorPassword:
    Type: String
    NoEcho: 'true'
    MinLength: '10'
    MaxLength: '24'
    Description: 'Enter the Domain Administrator password. (Requirements: Between 10 and 24 characters.) The password will be stored in Secrets Manager.'
  Parameter07bSafeModePassword:
    Type: String
    NoEcho: 'true'
    MinLength: '10'
    MaxLength: '24'
    Description: 'Enter the AD SAFE MODE password. (Requirements: Between 10 and 24 characters.) The password will be stored in Secrets Manager.'
  Parameter08aDNSDomainName:
    Type: String
    AllowedPattern: ^([a-zA-Z0-9]+[\.-])+([a-zA-Z0-9])+$
    Default: corporate.ad.aws
    Description: 'Enter the Active Directory DNS name. Default: corporate.ad.aws'
  Parameter08bNetBiosName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Default: CORPORATE
    Description: 'Enter the Active Directory NETBIOS name. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: CORPORATE'
  Parameter08cDomainFunctionalLevel:
    Type: String
    Default: Windows Server 2012 R2
    AllowedValues:
      - Windows Server 2016
      - Windows Server 2012 R2
      - Windows Server 2012
      - Windows Server 2008 R2
    Description: 'Select the Domain Functional Level. IMPORTANT: The Domain Functional Level cannot be lower than the Forest Functional Level. Default: Windows 2012 R2'
  Parameter08dForestFunctionalLevel:
    Type: String
    Default: Windows Server 2012 R2
    AllowedValues:
      - Windows Server 2016
      - Windows Server 2012 R2
      - Windows Server 2012
      - Windows Server 2008 R2
    Description: 'Select the Forest Functional Level. Default: Windows 2012 R2'
  Parameter08eDomainController01Name:
    Type: String
    Default: DC01
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Description: 'Enter the name of Domain Controller 01. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: DC01'
  Parameter08fDomainController01IP:
    Type: String
    Default: 10.0.30.10
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Description: 'Enter the IP Address of Domain Controller 01 within the range specified in "VPC Settings\Private Subnet for EC2 Instances in AZ 01". Default: 10.0.30.10'
  Parameter08gDomainController02Name:
    Type: String
    Default: DC02
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Description: 'Enter the name of Domain Controller 02. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: DC02'
  Parameter08hDomainController02IP:
    Type: String
    Default: 10.0.40.10
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Description: 'Enter the IP Address of Domain Controller 02 within the range specified in "VPC Settings\Private Subnet for EC2 Instances in AZ 02". Default: 10.0.40.10'
  Parameter08cImportUsers:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: >-
      Select YES to import users to Active Directory from a CSV file stored in an S3 bucket. The CSV file must have the following Active Directory fields: displayName,givenName,sn,sAMAccountName. Example:
      John Smith,John,Smith,jsmith)
  Parameter08dBucketName:
    Type: String
    Description: >-
      Enter the S3 bucket name where the CSV file is stored. (NOTE: The S3 bucket needs to be located in the same region where the stack will be created. Ensure that bucket policies don't prevent EC2 from
      downloading the CSV file.)
  Parameter08eFilePath:
    Type: String
    Description: 'Enter the CSV file path inside the bucket. (Example: folder01/subfolder02/filename.csv)'
  Parameter08iADConnectorSize:
    Type: String
    Default: Small
    AllowedValues:
      - Small
      - Large
    Description: Select the AD Connector size.
  Parameter08jADConnectorGroup:
    Type: String
    Default: AWS-ADConnectors
    AllowedPattern: ^[a-zA-Z0-9-]+$
    MinLength: '02'
    MaxLength: '20'
    Description: 'Enter the AD Connector group name. (Requirements: ALPHANUMERIC and between 2 and 20 characters.) Permissions will be delegated to this group on AD. Default: AWS-ADConnectors'
  Parameter08lADConnectorUSR:
    Type: String
    Default: AWS-ADConnSvc01
    AllowedPattern: ^[a-zA-Z0-9-]+$
    MinLength: '02'
    MaxLength: '20'
    Description: 'Enter the AD Connector service account name. (Requirements: ALPHANUMERIC and between 2 and 20 characters.) Default: AWS-ADConnSvc01'
  Parameter09aRootCAName:
    Type: String
    Default: RootCA01
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Description: 'Enter the ROOT CA name. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: RootCA01'
  Parameter09bRootCAIP:
    Type: String
    Default: 10.0.30.11
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Description: 'Enter the ROOT CA IP address within the range specified in "VPC Settings\Private Subnet for EC2 Instances in AZ 01". Default: 10.0.30.11'
  Parameter09cRootCAKeyLength:
    Type: String
    Default: '4096'
    AllowedValues:
      - '4096'
      - '2048'
    Description: 'Select the ROOT CA key length. Default: 4096'
  Parameter09dRootCAHash:
    Type: String
    Default: SHA256
    AllowedValues:
      - SHA256
      - SHA384
      - SHA512
    Description: 'Select the ROOT CA hash algorithm. Default: SHA256'
  Parameter10aSubordinateCAName:
    Type: String
    Default: SubCA01
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Description: 'Enter the SUBORDINATE CA Name. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: SubCA01'
  Parameter10bSubordinateCAIP:
    Type: String
    Default: 10.0.30.12
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Description: 'Enter the SUBORDINATE CA IP address within the range specified in "VPC Settings\Private Subnet for EC2 Instances in AZ 01". Default: 10.0.30.12'
  Parameter10cSubordinateCAKeyLength:
    Type: String
    Default: '2048'
    AllowedValues:
      - '4096'
      - '2048'
    Description: 'Select SUBORDINATE CA key length. Default: 2048'
  Parameter10dSubordinateCAHash:
    Type: String
    Default: SHA256
    AllowedValues:
      - SHA256
      - SHA384
      - SHA512
    Description: 'Select the SUBORDINATE CA hash algorithm. Default: SHA256'
  Parameter12aADFSName:
    Type: String
    Default: ADFS01
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Description: 'Enter the ADFS server name. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: ADFS01'
  Parameter12bFederationServiceName:
    Type: String
    Default: adfs
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '63'
    Description: >-
      Enter the ADFS Federation Service Name. This string will be combined with the DNS domain specified in "Active Directory Settings\Active Directory DNS Name". (Requirements: ALPHANUMERIC and between
      2 and 63 characters.) Default: adfs
  Parameter12dADFSServiceAccount:
    Type: String
    Default: FsSvcGmsa
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Description: 'Enter Managed Service Account (MSA) for ADFS. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: FsSvcGmsa'
  Parameter12dADFSType:
    Type: String
    Default: VPC
    AllowedValues:
      - VPC
      - INTERNET
    Description: 'Select ADFS accessibility: VPC only or INTERNET. (NOTE: INTERNET requires ADFS with a public FQDN and the respective record in a public DNS.) Default: VPC'
  Parameter12eUpdateRoute53:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: >-
      Select YES to create the DNS A record specified in "ADFS Settings\ADFS Federation Name" in the Route 53 DNS zone specified in "Active Directory Settings\Active Directory DNS Name". (NOTE: Ensure the
      Route 53 zone is functional and that there is no other records that can conflict with the record that will be created.) Default: NO
  Parameter12fHostZoneID:
    Type: String
    MinLength: '1'
    Default: NOT_SPECIFIED
    AllowedPattern: ^[a-zA-Z0-9_]+$
    Description: 'If you selected YES above, enter the Hosted Zone ID of the Route 53 zone to be updated. Default: NOT_SPECIFIED'
  Parameter13aAppStreamGroup:
    Type: String
    Default: AWS-AS2FleetMgmt01
    AllowedPattern: ^[a-zA-Z0-9-]+$
    MinLength: '02'
    MaxLength: '20'
    Description: >-
      Enter the Active Directory group name to which permissions will be delegated to allow creation of computer accounts by AppStream. (Requirements: ALPHANUMERIC and between 2 and 20 characters.) Default:
      AWS-AS2FleetMgmt01
  Parameter13bAppStreamSvcAccount:
    Type: String
    Default: AWS-AS2SvcUsr01
    AllowedPattern: ^[a-zA-Z0-9-]+$
    MinLength: '02'
    MaxLength: '20'
    Description: 'Enter the AppStream service account name. (Requirements: ALPHANUMERIC and between 2 and 20 characters.) Default: AWS-AS2SvcUsr01'
  Parameter20aAppStreamImage:
    Type: String
    MinLength: '1'
    Description: >-
      Enter the AppStream image name to create the fleet. You can find the names of images available in the AppStream Console or with command  "aws appstream describe-images --query Images[*].[Name,State]
      --region REGION_NAME --output table". (NOTE: Case you are not creating AppStream, insert at least one character in this field to meet the field requirement.)
  Parameter20bAppStreamInstanceType:
    Type: String
    Default: stream.standard.medium
    AllowedValues:
      - stream.standard.small
      - stream.standard.medium
      - stream.standard.large
      - stream.compute.large
      - stream.compute.xlarge
      - stream.compute.2xlarge
      - stream.compute.4xlarge
      - stream.compute.8xlarge
      - stream.memory.large
      - stream.memory.xlarge
      - stream.memory.2xlarge
      - stream.memory.4xlarge
      - stream.memory.8xlarge
      - stream.memory.z1d.large
      - stream.memory.z1d.xlarge
      - stream.memory.z1d.2xlarge
      - stream.memory.z1d.3xlarge
      - stream.memory.z1d.6xlarge
      - stream.memory.z1d.12xlarge
      - stream.graphics-design.large
      - stream.graphics-design.xlarge
      - stream.graphics-design.2xlarge
      - stream.graphics-design.4xlarge
      - stream.graphics-desktop.2xlarge
      - stream.graphics.g4dn.xlarge
      - stream.graphics.g4dn.2xlarge
      - stream.graphics.g4dn.4xlarge
      - stream.graphics.g4dn.8xlarge
      - stream.graphics.g4dn.12xlarge
      - stream.graphics.g4dn.16xlarge
      - stream.graphics-pro.4xlarge
      - stream.graphics-pro.8xlarge
      - stream.graphics-pro.16xlarge
    Description: 'Select the AppStream instance type. Default: stream.standard.medium'
  Parameter20cAppStreamFleetType:
    Type: String
    Default: ON_DEMAND
    AllowedValues:
      - ON_DEMAND
      - ALWAYS_ON
    Description: 'Select the AppStream fleet type. Defaut: ON_DEMAND'
  Parameter20dFleetStreamView:
    Type: String
    Default: DESKTOP
    AllowedValues:
      - APP
      - DESKTOP
    Description: 'Select the type of stream view for the AppStream fleet. (NOTE: APP requires an AppStream image configured with the desired applications.) Default: DESKTOP'
  Parameter20eAppSNetwork:
    Type: String
    Default: PRIVATE
    AllowedValues:
      - PUBLIC
      - PRIVATE
    Description: 'Select if AppStream instances will be launched in PUBLIC or PRIVATE subnet. Default: PRIVATE'
  Parameter20fAppStreamCapacity:
    Type: String
    Default: '2'
    AllowedValues:
      - '1'
      - '2'
      - '3'
      - '4'
      - '5'
      - '10'
      - '20'
    Description: 'Select the AppStream fleet "Desired Capacity". Default: 2'
  Parameter20gAppSFleetStart:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Select if the AppStream fleet must be started once created. To start the fleet: "true". To keep the fleet stopped: "false". Default: true'
  Parameter20hStackPersistentSettings:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Select "true" to enable "Application Settings Persistence" in the AppStream stack. Default: true'
  Parameter21aDeployType:
    Type: String
    Default: SINGLE_AZ_2
    AllowedValues:
      - SINGLE_AZ_1
      - SINGLE_AZ_2
      - MULTI_AZ_1
    Description: 'Select the FSx deployment type. Default: SINGLE_AZ_2'
  Parameter21bStorageCapacity:
    Type: String
    Default: '32'
    AllowedPattern: '[+-]?(\d+(\.\d+)?|\.\d+)([eE][+-]?\d+)?'
    Description: 'Enter the FSx storage capacity in GiB. Minimum 32 ; Maximum 65536 '
  Parameter21cStorageType:
    Type: String
    Default: SSD
    AllowedValues:
      - SSD
      - HDD
    Description: 'Select the FSx storage type. (NOTE: SINGLE_AZ_1 requires SSD.) Default: SSD'
  Parameter21dThroughput:
    Type: String
    Default: '8'
    AllowedValues:
      - '8'
      - '16'
      - '32'
      - '64'
      - '128'
      - '256'
      - '512'
      - '512'
      - '1014'
      - '2048'
    Description: 'Select the FSx throughput capacity in MB/s. Default: 8 MB/s'
  Parameter21eTagName:
    Type: String
    Default: FSx01
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '32'
    Description: 'Enter a value for the tag Name. (Requirements: ALPHANUMERIC and between 2 and 32 characters.) Default: FSx01'
  Parameter21fFSxGroup:
    Type: String
    Default: AWS-FSxMgmt01
    AllowedPattern: ^[a-zA-Z0-9-]+$
    MinLength: '02'
    MaxLength: '20'
    Description: >-
      Enter he Active Directory group name to which permissions will be delegated to allow creation of computer accounts by FSx. (Requirements: ALPHANUMERIC and between 2 and 20 characters.) Default: AWS-FSxMgmt01
  Parameter21gFSxSvcAccount:
    Type: String
    Default: AWS-FSxSvcUsr01
    AllowedPattern: ^[a-zA-Z0-9-]+$
    MinLength: '02'
    MaxLength: '20'
    Description: 'Enter the FSx service account name. (Requirements: ALPHANUMERIC and between 2 and 20 characters.) Default: AWS-FSxSvcUsr01'
  Parameter24aBundleId:
    Type: String
    MinLength: '1'
    Description: >-
      Enter the Workspaces Bundle ID. (IMPORTANT: Ensure that the Availability Zones selected support Workspaces) (NOTE: Case you are not creating Workspaces, insert at least one character to meet the field
      requirement.)
  Parameter24bComputeType:
    Type: String
    Default: STANDARD
    AllowedValues:
      - VALUE
      - STANDARD
      - POWERPRO
      - POWER
      - PERFORMANCE
      - GRAPHICSPRO
      - GRAPHICS
    Description: 'Select the Workspaces compute type. (NOTE: Ensure the Bundle ID supports the compute type selected.)'
  Parameter24cRunMode:
    Type: String
    Default: AUTO_STOP
    AllowedValues:
      - ALWAYS_ON
      - AUTO_STOP
    Description: Select the Workspaces running mode.
  Parameter24dEnableWorkdocs:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Select true to enable Workdocs support.
  Parameter24eEnableSelfService:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Select true to enable Workspaces Self-Service.
  Parameter24gUsersWorkspaces:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: Select YES to create workspaces for the users imported to Active Directory.
  Parameter24hWorkspacesNetwork:
    Type: String
    Default: PRIVATE
    AllowedValues:
      - PRIVATE
      - PUBLIC
    Description: 'Select if Workspaces will be launched in PUBLIC or PRIVATE subnet. Default: PRIVATE'
  Parameter24iLocalAdmins:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Select true to set users as Workspaces local administrators.
  Parameter01hCreateWorkmail:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: 'Select YES to create a Workmail Organization. IMPORTANT: To create Workmail, this CloudFormation stack must be launched in a Workmail enabled region: US-EAST-1, US-WEST-2 or EU-WEST-1.'
  Parameter26bDirectorAlias:
    Type: String
    Description: >-
      Enter a Directory Alias. This alias will be used to create a URL to access Workmail WebAccess: https://<alias>.awsapps.com/workmail. (NOTE: The alias must be unique amongst all aliases in AWS. After
      an alias has been created, it cannot be removed from the AD Connector or reused. To recreate or modify the alias you need to recreate the AD Connector. This name may be used by other AWS services
      such as Amazon QuickSight, AWS SSO and Amazon Connect, therefore, select the alias name carefully.)
  Parameter26cUpdateR53:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: >-
      Associate Workmail Organization with Route 53 Zone. (NOTE: The DNS records required by Workmail will be created in the Route 53 zone indicated below. If the DNS zone is registered in SES, you will
      need to create the DNS records manually.)
  Parameter26dHostedZoneID:
    Type: String
    Default: NOT_SPECIFIED
    Description: 'If you selected YES above, enter the Hosted Zone ID of the Route 53 zone to be associated with Workmail. Default: NOT_SPECIFIED'
  Parameter26eDNSDomainName:
    Type: String
    Description: Enter a PUBLIC DNS name for the Workmail Organization.
  Parameter99aVPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    Description: 'Enter the VPC CIDR. Default: 10.0.0.0/16'
  Parameter99bPublicSubnetServers01:
    Type: String
    Default: 10.0.10.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    Description: 'Enter the public subnet for EC2 instances in Availability Zone 01. Default: 10.0.10.0/24 (NOTE: ADFS and Remote Desktop are created in this subnet.)'
  Parameter99cPublicSubnetServers02:
    Type: String
    Default: 10.0.20.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    Description: 'Enter the public subnet for EC2 instances in Availability Zone 02. Default: 10.0.20.0/24'
  Parameter99dPrivateSubnetServers01:
    Type: String
    Default: 10.0.30.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    Description: 'Enter the private subnet for EC2 instances in Availability Zone 01. Default: 10.0.30.0/2 (NOTE: Domain Controller 01 and Certificate Authorities are created in this subnet.)'
  Parameter99ePrivateSubnetServers02:
    Type: String
    Default: 10.0.40.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    Description: 'Enter the private subnet for EC2 instances in Availability Zone 02. Default: 10.0.40.0/24 (NOTE: Domain Controller 02 is created in this subnet.)'
  Parameter99fPublicSubnetVDI01:
    Type: String
    Default: 10.0.50.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    Description: 'Enter the public subnet for virtual desktops in Availability Zone 01. Default: 10.0.50.0/24'
  Parameter99gPublicSubnetVDI02:
    Type: String
    Default: 10.0.60.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    Description: 'Enter the public subnet for virtual desktops in Availability Zone 02. Default: 10.0.60.0/24'
  Parameter99hPrivateSubnetVDI01:
    Type: String
    Default: 10.0.70.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    Description: 'Enter the private subnet for virtual desktops in Availability Zone 01. Default: 10.0.70.0/24'
  Parameter99iPrivateSubnetVDI02:
    Type: String
    Default: 10.0.80.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    Description: 'Enter the private subnet for virtual desktops in Availability Zone 02. Default: 10.0.80.0/24'
Mappings: {}
Conditions:
  CreateRDPServer: !Equals
    - !Ref 'Parameter01aCreateRemoteDesktop'
    - 'YES'
  CreateCA: !Equals
    - !Ref 'Parameter01cCreateCA'
    - 'YES'
  CreateADFS: !Equals
    - !Ref 'Parameter01dCreateADFS'
    - 'YES'
  ADFSTypePublic: !Equals
    - !Ref 'Parameter12dADFSType'
    - INTERNET
  UpdateR53: !Equals
    - !Ref 'Parameter12eUpdateRoute53'
    - 'YES'
  CreateAppStream: !Equals
    - !Ref 'Parameter01eCreateAppStream'
    - 'YES'
  AppStreamNetwork: !Equals
    - !Ref 'Parameter20eAppSNetwork'
    - PRIVATE
  CreateFSx: !Equals
    - !Ref 'Parameter01fCreateFSx'
    - 'YES'
  FSxMultiAZ: !Equals
    - !Ref 'Parameter21aDeployType'
    - MULTI_AZ_1
  CreateWorkspace: !Equals
    - !Ref 'Parameter01gCreateWorkspaces'
    - 'YES'
  WorkspacesPrivateNetwork: !Equals
    - !Ref 'Parameter24hWorkspacesNetwork'
    - PRIVATE
  CreateADConnector: !Equals
    - !Ref 'Parameter01bCreateADConnector'
    - 'YES'
  CreateWorkmail: !Equals
    - !Ref 'Parameter01hCreateWorkmail'
    - 'YES'
Resources:
  Resource01VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'Parameter99aVPCCidrBlock'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .VPC
  Resource02PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Resource01VPC'
      CidrBlock: !Ref 'Parameter99bPublicSubnetServers01'
      AvailabilityZone: !Ref 'Parameter02aAvailabilityZone01'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .Servers.PublicSubnet01
  Resource03PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Resource01VPC'
      CidrBlock: !Ref 'Parameter99cPublicSubnetServers02'
      AvailabilityZone: !Ref 'Parameter02bAvailabilityZone02'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .Servers.PublicSubnet02
  Resource04PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Resource01VPC'
      CidrBlock: !Ref 'Parameter99dPrivateSubnetServers01'
      AvailabilityZone: !Ref 'Parameter02aAvailabilityZone01'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .Servers.PrivateSubnet01
  Resource05PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Resource01VPC'
      CidrBlock: !Ref 'Parameter99ePrivateSubnetServers02'
      AvailabilityZone: !Ref 'Parameter02bAvailabilityZone02'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .Servers.PrivateSubnet02
  Resource07aVDISubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Resource01VPC'
      CidrBlock: !Ref 'Parameter99hPrivateSubnetVDI01'
      AvailabilityZone: !Ref 'Parameter02aAvailabilityZone01'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .VirtualDesktops.PrivateSubnet01
  Resource07bVDISubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Resource01VPC'
      CidrBlock: !Ref 'Parameter99iPrivateSubnetVDI02'
      AvailabilityZone: !Ref 'Parameter02bAvailabilityZone02'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .VirtualDesktops.PrivateSubnet02
  Resource07cVDISubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Resource01VPC'
      CidrBlock: !Ref 'Parameter99fPublicSubnetVDI01'
      AvailabilityZone: !Ref 'Parameter02aAvailabilityZone01'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .VirtualDesktops.PublicSubnet01
  Resource07dVDISubnet04:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Resource01VPC'
      CidrBlock: !Ref 'Parameter99gPublicSubnetVDI02'
      AvailabilityZone: !Ref 'Parameter02bAvailabilityZone02'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .VirtualDesktops.PublicSubnet02
  Resource08IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .IGW
  Resource09IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'Resource08IGW'
      VpcId: !Ref 'Resource01VPC'
  Resource10NATGW01:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref 'Resource02PublicSubnet01'
      AllocationId: !GetAtt 'Resource11aEIPNATGW01.AllocationId'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .NATGW01
  Resource11aEIPNATGW01:
    DependsOn: Resource09IGWAttach
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .EIP.NATGW01
  Resource10NATGW02:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref 'Resource03PublicSubnet02'
      AllocationId: !GetAtt 'Resource11bEIPNATGW02.AllocationId'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .NATGW02
  Resource11bEIPNATGW02:
    DependsOn: Resource09IGWAttach
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .EIP.NATGW02
  Resource11cEIPADFS:
    DependsOn: Resource09IGWAttach
    Condition: ADFSTypePublic
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .EIP.ADFS
  Resource11cEIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Condition: ADFSTypePublic
    Properties:
      AllocationId: !GetAtt 'Resource11cEIPADFS.AllocationId'
      InstanceId: !Ref 'Resource32ADFS'
  Resource12RouteTableIGW:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Resource01VPC'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .RoutingTableIGW
  Resource13RouteIGW:
    Type: AWS::EC2::Route
    DependsOn: Resource08IGW
    Properties:
      RouteTableId: !Ref 'Resource12RouteTableIGW'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'Resource08IGW'
  Resource14RouteTableNAT01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Resource01VPC'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .RoutingTableNAT01
  Resource14RouteTableNAT02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Resource01VPC'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .RoutingTableNAT02
  Resource15RouteNAT01:
    Type: AWS::EC2::Route
    DependsOn: Resource10NATGW01
    Properties:
      RouteTableId: !Ref 'Resource14RouteTableNAT01'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'Resource10NATGW01'
  Resource15RouteNAT02:
    Type: AWS::EC2::Route
    DependsOn: Resource10NATGW02
    Properties:
      RouteTableId: !Ref 'Resource14RouteTableNAT02'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'Resource10NATGW02'
  Resource16RouteTableAssociationIGW:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'Resource12RouteTableIGW'
      SubnetId: !Ref 'Resource02PublicSubnet01'
  Resource17RouteTableAssociationIGW:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'Resource12RouteTableIGW'
      SubnetId: !Ref 'Resource03PublicSubnet02'
  Resource18RouteTableAssociationNAT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'Resource14RouteTableNAT01'
      SubnetId: !Ref 'Resource04PrivateSubnet01'
  Resource19RouteTableAssociationNAT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'Resource14RouteTableNAT02'
      SubnetId: !Ref 'Resource05PrivateSubnet02'
  Resource20aRouteTableAssociationNAT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'Resource14RouteTableNAT01'
      SubnetId: !Ref 'Resource07aVDISubnet01'
  Resource20bRouteTableAssociationNAT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'Resource14RouteTableNAT02'
      SubnetId: !Ref 'Resource07bVDISubnet02'
  Resource20cRouteTableAssociationIGW:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'Resource12RouteTableIGW'
      SubnetId: !Ref 'Resource07cVDISubnet03'
  Resource20dRouteTableAssociationIGW:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'Resource12RouteTableIGW'
      SubnetId: !Ref 'Resource07dVDISubnet04'
  Resource23aSecurityGroupTrustedRDP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .TrustedRDPSources
      GroupName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .TrustedRDPSources
      GroupDescription: Allow RDP From Trusted Sources
      VpcId: !Ref 'Resource01VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref 'Parameter06bTrustedRDPSource'
  Resource23bSecurityGroupPrivateNetwork:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .InternalVPC
      GroupName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .InternalVPC
      GroupDescription: Allow All Acccess From Sources in the VPC
      VpcId: !Ref 'Resource01VPC'
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref 'Parameter99aVPCCidrBlock'
  Resource23cSecurityInboundHTTP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .InboundHTTP-S
      GroupName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .InboundHTTP-S
      GroupDescription: Allow HTTP and HTTPS from the Internet
      VpcId: !Ref 'Resource01VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
  Resource23dSecurityGroupAppStream:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .AppStream
      GroupName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .AppStream
      GroupDescription: Allow AppStream outbound traffic
      VpcId: !Ref 'Resource01VPC'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
  Resource24DomainController01:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.Resource24DomainController01.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r Resource24DomainController01'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\cfn\RunCommand.bat:
              content: "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
            c:\cfn\99-Signaling.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource24DomainController01"
                  - "\n"
                  - $CFNConnectionStatus = "False"
                  - "\n"
                  - "\n"
                  - Write-Output "SEND SIGNALING"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded
                  - "\n"
                  - If  ( $CFNConnectionStatus -Match "True" ){
                  - "\n"
                  - Write-Output "CHECKING INSTANCE HEALTH"
                  - "\n"
                  - $Failures = 0
                  - "\n"
                  - $ADStatus = (Get-Service | Where Name -EQ "NTDS").Status
                  - "\n"
                  - If  ( $ADStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - $DNSStatus = (Get-Service | Where Name -EQ "DNS").Status
                  - "\n"
                  - If  ( $DNSStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - "\n"
                  - If ($Failures -eq 0) {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Success signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Failure signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "Trying to connect to CloudFormation Endpoint."
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to CloudFormation Endpoint."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\01-PrepareDomainController01.ps1:
              content: !Join
                - ''
                - - $InstallCWAgent = "
                  - !Ref 'Parameter01zInstallCWAgent'
                  - '"'
                  - "\n"
                  - If ($InstallCWAgent -ne "NO") {
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL CW CLIENT"
                  - "\n"
                  - "\n"
                  - $cwuri = "https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $cwfile = "C:\cfn\amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $arguments = "/i $cwfile /qn /L*V C:\cfn\amazon-cloudwatch-agent.log"
                  - "\n"
                  - Invoke-WebRequest -Uri $cwuri -OutFile $cwfile -DisableKeepAlive -UseBasicparsing
                  - "\n"
                  - Start-Process msiexec.exe -ArgumentList $arguments -Wait
                  - "\n"
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Advanced Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentAdvanced'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentBasic'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Event Viewer") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyEvents'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyMetrics'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - ."C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -c file:C:\cfn\CloudWatchConfig.json -s
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "SET LOCAL ADMINISTRATOR PASSWORD AND RENAME INSTANCE"
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password'
                  - "\n"
                  - Net User Administrator $administratorPWD
                  - "\n"
                  - $newname = "
                  - !Ref 'Parameter08eDomainController01Name'
                  - '".ToLower()'
                  - "\n"
                  - Rename-Computer -NewName $newname -PassThru
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
            C:\cfn\02-CreateForest.ps1:
              content: !Join
                - ''
                - - "\n"
                  - $domainnetbiosname = "
                  - !Ref 'Parameter08bNetBiosName'
                  - '".ToUpper()'
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '".ToLower()'
                  - "\n"
                  - '$DomainFunctionalLevel = '
                  - '"'
                  - !Ref 'Parameter08cDomainFunctionalLevel'
                  - '"'
                  - "\n"
                  - '$ForestFunctionalLevel = '
                  - '"'
                  - !Ref 'Parameter08dForestFunctionalLevel'
                  - '"'
                  - "\n"
                  - $safemodePWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordSafeModeAD'
                  - '").SecretString | ConvertFrom-Json).safemodepassword | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $databasepath = "C:\Windows\NTDS"
                  - "\n"
                  - $logpath = "C:\Windows\NTDS"
                  - "\n"
                  - $sysvolpath = "C:\Windows\SYSVOL"
                  - "\n"
                  - If ($ForestFunctionalLevel -eq "Windows Server 2016") {
                  - "\n"
                  - "\t$forestmode = \"7\""
                  - "\n"
                  - '}'
                  - "\n"
                  - ElseIf ($ForestFunctionalLevel -eq "Windows Server 2012 R2") {
                  - "\n"
                  - "\t$forestmode = \"6\""
                  - "\n"
                  - '}'
                  - "\n"
                  - ElseIf ($ForestFunctionalLevel -eq "Windows Server 2012") {
                  - "\n"
                  - "\t$forestmode = \"5\""
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - "\t$forestmode = \"4\""
                  - "\n"
                  - '}'
                  - "\n"
                  - "\n"
                  - If ($DomainFunctionalLevel -eq "Windows Server 2016") {
                  - "\n"
                  - "\t$domainmode = \"7\""
                  - "\n"
                  - '}'
                  - "\n"
                  - ElseIf ($DomainFunctionalLevel -eq "Windows Server 2012 R2") {
                  - "\n"
                  - "\t$domainmode = \"6\""
                  - "\n"
                  - '}'
                  - "\n"
                  - ElseIf ($DomainFunctionalLevel -eq "Windows Server 2012") {
                  - "\n"
                  - "\t$domainmode = \"5\""
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - "\t$domainmode = \"4\""
                  - "\n"
                  - '}'
                  - "\n"
                  - Install-WindowsFeature AD-Domain-Services -IncludeAllSubFeature -IncludeManagementTools
                  - "\n"
                  - "\n"
                  - $CreateForest = @{
                  - "\n"
                  - DomainName = $domainname
                  - "\n"
                  - DomainNetbiosName = $domainnetbiosname
                  - "\n"
                  - DomainMode = $domainmode
                  - "\n"
                  - ForestMode = $forestmode
                  - "\n"
                  - InstallDns = $true
                  - "\n"
                  - CreateDnsDelegation = $false
                  - "\n"
                  - DatabasePath = $databasepath
                  - "\n"
                  - LogPath = $logpath
                  - "\n"
                  - SysvolPath = $sysvolpath
                  - "\n"
                  - SafeModeAdministratorPassword = $safemodePWD
                  - "\n"
                  - NoRebootOnCompletion = $false
                  - "\n"
                  - Force = $true
                  - "\n"
                  - '}'
                  - "\n"
                  - Install-ADDSForest @CreateForest
                  - "\n"
            C:\cfn\03-ADCustomizationCommand.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $SvcAccount = "
                  - !Ref 'Parameter08lADConnectorUSR'
                  - '"'
                  - "\n"
                  - $SearchObjects = "False"
                  - "\n"
                  - "\n"
                  - Do {
                  - "\n"
                  - $SearchObjects = (Get-AdUser -Identity $SvcAccount -Server "
                  - !Ref 'Parameter08eDomainController01Name'
                  - '").Enabled'
                  - "\n"
                  - "\n"
                  - If  ( $SearchObjects -Match "False" ){
                  - "\n"
                  - "\n"
                  - Write-Output "SEND SSM COMMAND"
                  - "\n"
                  - $InstanceID = (ConvertFrom-JSON (Invoke-WebRequest -Uri http://169.254.169.254/latest/dynamic/instance-identity/document -UseBasicparsing).Content).InstanceID
                  - "\n"
                  - $CommandString = 'Send-SSMCommand -DocumentName "AWS-RunPowerShellScript" -Parameter @{commands = "C:\\cfn\\04-ADCustomizationTasks.ps1"} -Target @{Key="instanceids";Values=@("X-XXXXXXXXXX")}'
                  - "\n"
                  - $CommandString = $CommandString -replace "X-XXXXXXXXXX",$InstanceID
                  - "\n"
                  - Invoke-Expression $CommandString
                  - "\n"
                  - '}'
                  - "\n"
                  - Else { Break }
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 60
                  - "\n"
                  - If  ( $LoopCounterA -eq 10 ){
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource24DomainController01"
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Failure signaling sent to stack $CFNStack - Unable to create AD objects"
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 10)'
                  - "\n"
            C:\cfn\04-ADCustomizationTasks.ps1:
              content: !Join
                - ''
                - - Write-Output "SET DNS CONFIGURATION"
                  - "\n"
                  - 'Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).IfIndex -ServerAddresses '
                  - !Ref 'Parameter08fDomainController01IP'
                  - ','
                  - !Ref 'Parameter08hDomainController02IP'
                  - "\n"
                  - Set-DnsClient -InterfaceIndex (Get-NetAdapter).IfIndex -ConnectionSpecificSuffix "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - Set-DnsClientGlobalSetting -SuffixSearchList "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE OBJECTS"
                  - "\n"
                  - "\n"
                  - $DomainNetBIOS = "
                  - !Ref 'Parameter08bNetBiosName'
                  - '"'
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - $DN = (Get-ADDomain).DistinguishedName
                  - "\n"
                  - $WorkmailDomainName = "
                  - !Ref 'Parameter26eDNSDomainName'
                  - '"'
                  - "\n"
                  - $emailDomain = $domainname
                  - "\n"
                  - If ( $CreateWorkmailOrg -eq "YES"){$emailDomain = $WorkmailDomainName}
                  - "\n"
                  - "\n"
                  - set-aduser -Identity Administrator -EmailAddress administrator@$emailDomain -GivenName "Administrator" -Surname "Domain" -DisplayName "Domain Administrator"
                  - "\n"
                  - New-ADOrganizationalUnit -Name "
                  - !Ref 'Parameter08bNetBiosName'
                  - '" -Path $DN'
                  - "\n"
                  - $ResourcesOU = "OU=
                  - !Ref 'Parameter08bNetBiosName'
                  - '," + $DN'
                  - "\n"
                  - New-ADOrganizationalUnit -Name "Groups" -Path $ResourcesOU
                  - "\n"
                  - New-ADOrganizationalUnit -Name "Servers" -Path $ResourcesOU
                  - "\n"
                  - New-ADOrganizationalUnit -Name "Users" -Path $ResourcesOU
                  - "\n"
                  - New-ADOrganizationalUnit -Name "Services" -Path $ResourcesOU
                  - "\n"
                  - New-ADOrganizationalUnit -Name "AWS-AppStream" -Path $ResourcesOU
                  - "\n"
                  - New-ADOrganizationalUnit -Name "AWS-Workspaces" -Path $ResourcesOU
                  - "\n"
                  - New-ADOrganizationalUnit -Name "AWS-FSx" -Path $ResourcesOU
                  - "\n"
                  - $UsersOU = "OU=Users," + $ResourcesOU
                  - "\n"
                  - $GroupsOU = "OU=Groups," + $ResourcesOU
                  - "\n"
                  - $ServicesOU = "OU=Services," + $ResourcesOU
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE AD CONNECTOR SERVICE ACCOUNT AND DELEGATE PERMISSIONS"
                  - "\n"
                  - $ADConnectorUSR = "
                  - !Ref 'Parameter08lADConnectorUSR'
                  - '"'
                  - "\n"
                  - $ADConnectorPWD =  ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordADConnector'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $ADgroupName = "
                  - !Ref 'Parameter08jADConnectorGroup'
                  - '"'
                  - "\n"
                  - New-ADGroup -Name $ADgroupName -SamAccountName $ADgroupName -GroupCategory Security -GroupScope Global -Path $GroupsOU -Description "Allow ADConnector to create objects"
                  - "\n"
                  - New-ADUser $ADConnectorUSR -PasswordNeverExpires $True -Enabled $True -CannotChangePassword $True -AccountPassword $ADConnectorPWD -Path $ServicesOU
                  - "\n"
                  - Add-ADGroupMember -Identity $ADGroupName -Members $ADConnectorUSR
                  - "\n"
                  - dsacls $DN /I:T /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter08jADConnectorGroup'
                  - :CCDC;Computer"
                  - "\n"
                  - dsacls $DN /I:S /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter08jADConnectorGroup'
                  - :RPWPLC;;Computer"
                  - "\n"
                  - dsacls $DN /I:T /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter08jADConnectorGroup'
                  - :CCDC;User"
                  - "\n"
                  - dsacls $DN /I:S /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter08jADConnectorGroup'
                  - :RPWPLC;;User"
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE APPSTREAM SERVICE ACCOUNT AND DELEGATE PERMISSIONS"
                  - "\n"
                  - $AppStreamOU = "OU=AWS-AppStream," + $ResourcesOU
                  - "\n"
                  - $AppStreamServiceUSR = "
                  - !Ref 'Parameter13bAppStreamSvcAccount'
                  - '"'
                  - "\n"
                  - $AppStreamServicePWD =  ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordAppStream'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $ADAppStreamGroup = "
                  - !Ref 'Parameter13aAppStreamGroup'
                  - '"'
                  - "\n"
                  - >-
                    New-ADGroup -Name $ADAppStreamGroup -SamAccountName $ADAppStreamGroup -GroupCategory Security -GroupScope Global -Path $GroupsOU -Description "Allow AppStream to create computer accounts
                    in OU AWS-AppStream"
                  - "\n"
                  - New-ADUser $AppStreamServiceUSR -PasswordNeverExpires $True -Enabled $True -CannotChangePassword $True -AccountPassword $AppStreamServicePWD -Path $ServicesOU
                  - "\n"
                  - Add-ADGroupMember -Identity $ADAppStreamGroup -Members $AppStreamServiceUSR
                  - "\n"
                  - dsacls $AppStreamOU /I:T /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter13aAppStreamGroup'
                  - :CC;Computer"
                  - "\n"
                  - dsacls $AppStreamOU /I:S /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter13aAppStreamGroup'
                  - :RPWPLC;;Computer"
                  - "\n"
                  - dsacls $AppStreamOU /I:S /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter13aAppStreamGroup'
                  - :CA;Reset Password;Computer"
                  - "\n"
                  - dsacls $AppStreamOU /I:S /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter13aAppStreamGroup'
                  - :CA;Change Password;Computer"
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE FSx SERVICE ACCOUNT AND DELEGATE PERMISSIONS"
                  - "\n"
                  - $FSxOU = "OU=AWS-FSx," + $ResourcesOU
                  - "\n"
                  - $FSxServiceUSR = "
                  - !Ref 'Parameter21gFSxSvcAccount'
                  - '"'
                  - "\n"
                  - $FSxGroup = "
                  - !Ref 'Parameter21fFSxGroup'
                  - '"'
                  - "\n"
                  - $FSxPWD =  ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - New-ADGroup -Name $FSxGroup -SamAccountName $FSxGroup -GroupCategory Security -GroupScope Global -Path $GroupsOU -Description "Allow FSx to create computer accounts in OU AWS-FSx"
                  - "\n"
                  - New-ADUser $FSxServiceUSR -PasswordNeverExpires $True -Enabled $True -CannotChangePassword $True -AccountPassword $FSxPWD -Path $ServicesOU
                  - "\n"
                  - Add-ADGroupMember -Identity $FSxGroup -Members $FSxServiceUSR
                  - "\n"
                  - dsacls $FSxOU /I:T /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter21fFSxGroup'
                  - :CCDC;Computer"
                  - "\n"
                  - dsacls $FSxOU /I:S /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter21fFSxGroup'
                  - :CA;Reset Password;Computer"
                  - "\n"
                  - dsacls $FSxOU /I:S /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter21fFSxGroup'
                  - :WS;Validated write to service principal name;Computer"
                  - "\n"
                  - dsacls $FSxOU /I:S /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter21fFSxGroup'
                  - :WS;Validated write to DNS host name;Computer"
                  - "\n"
                  - dsacls $FSxOU /I:S /G "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter21fFSxGroup'
                  - :RPWP;Account Restrictions;Computer"
                  - "\n"
                  - "\n"
                  - Write-Output "UPDATE SSM PARAMETER"
                  - "\n"
                  - 'Write-SSMParameter -Name '
                  - !Ref 'Resource39DirectoryDN'
                  - ' -Type "String" -Value "$DN" -Overwrite $true'
                  - "\n"
                  - "\n"
          commands:
            '01-PrepareDomainController01':
              command: Powershell.exe -Command C:\cfn\01-PrepareDomainController01.ps1
              waitAfterCompletion: forever
            '02-CreateForest':
              command: Powershell.exe -Command C:\cfn\02-CreateForest.ps1
              waitAfterCompletion: forever
            '03-ADCustomizationCommand':
              command: Powershell.exe -Command C:\cfn\03-ADCustomizationCommand.ps1
            99-Signaling:
              command: Powershell.exe -Command c:\cfn\99-Signaling.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'Parameter04aInstanceAMI'
      InstanceType: !Ref 'Parameter04bInstanceType'
      IamInstanceProfile: !Ref 'InstanceProfileForDCs'
      PrivateIpAddress: !Ref 'Parameter08fDomainController01IP'
      SubnetId: !Ref 'Resource04PrivateSubnet01'
      SecurityGroupIds:
        - !Ref 'Resource23bSecurityGroupPrivateNetwork'
      KeyName: !Ref 'Parameter03aKeyPair'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .
              - !Ref 'Parameter08eDomainController01Name'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackId'
            - ' -r Resource24DomainController01 '
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  Resource25DomainController02:
    DependsOn: Resource24DomainController01
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.Resource25DomainController02.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r Resource25DomainController02'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\cfn\RunCommand.bat:
              content: "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
            c:\cfn\99-Signaling.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource25DomainController02"
                  - "\n"
                  - $CFNConnectionStatus = "False"
                  - "\n"
                  - "\n"
                  - $ServiceFailures = (Get-Item -Path C:\cfn\ServiceFailures.log | Get-Content)
                  - "\n"
                  - "\n"
                  - Write-Output "SEND SIGNALING"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded
                  - "\n"
                  - If  ( $CFNConnectionStatus -Match "True" ){
                  - "\n"
                  - Write-Output "CHECKING INSTANCE HEALTH"
                  - "\n"
                  - $Failures = 0
                  - "\n"
                  - $ADStatus = (Get-Service | Where Name -EQ "NTDS").Status
                  - "\n"
                  - If  ( $ADStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - $DNSStatus = (Get-Service | Where Name -EQ "DNS").Status
                  - "\n"
                  - If  ( $DNSStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - $Failures = $Failures + $ServiceFailures
                  - "\n"
                  - "\n"
                  - If ($Failures -eq 0) {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Success signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Failure signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "Trying to connect to CloudFormation Endpoint."
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to CloudFormation Endpoint."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\01-PrepareDomainController02.ps1:
              content: !Join
                - ''
                - - $InstallCWAgent = "
                  - !Ref 'Parameter01zInstallCWAgent'
                  - '"'
                  - "\n"
                  - If ($InstallCWAgent -ne "NO") {
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL CW CLIENT"
                  - "\n"
                  - "\n"
                  - $cwuri = "https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $cwfile = "C:\cfn\amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $arguments = "/i $cwfile /qn /L*V C:\cfn\amazon-cloudwatch-agent.log"
                  - "\n"
                  - Invoke-WebRequest -Uri $cwuri -OutFile $cwfile -DisableKeepAlive -UseBasicparsing
                  - "\n"
                  - Start-Process msiexec.exe -ArgumentList $arguments -Wait
                  - "\n"
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Advanced Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentAdvanced'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentBasic'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Event Viewer") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyEvents'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyMetrics'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - ."C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -c file:C:\cfn\CloudWatchConfig.json -s
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "INSTALL WINDOWS FEATURE"
                  - "\n"
                  - Install-WindowsFeature RSAT-Role-Tools,GPMC,RSAT-DNS-Server
                  - "\n"
                  - "\n"
                  - Write-Output "SET INITIAL DNS CONFIGURATION POINTING TO DOMAIN CONTROLLER 01"
                  - "\n"
                  - 'Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).IfIndex -ServerAddresses '
                  - !Ref 'Parameter08fDomainController01IP'
                  - "\n"
                  - "\n"
                  - Write-Output "SET GLOBAL SUFFIX"
                  - "\n"
                  - Set-DnsClientGlobalSetting -SuffixSearchList "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - "\n"
                  - Write-Output "SET LOCAL PASSWORD"
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password'
                  - "\n"
                  - Net User Administrator $administratorPWD
                  - "\n"
                  - "\n"
                  - Write-Output "RENAME COMPUTER"
                  - "\n"
                  - $newname = "
                  - !Ref 'Parameter08gDomainController02Name'
                  - '".ToLower()'
                  - "\n"
                  - Rename-Computer -NewName $newname -PassThru
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - "\n"
            C:\cfn\02-AddToDomain.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = "
                  - !Ref 'Parameter08fDomainController01IP'
                  - '"'
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "ADD TO DOMAIN"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter08bNetBiosName'
                  - \Administrator"
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - Add-Computer -DomainName $domainname -Restart -Credential $credential
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to Domain Controller DNS Service."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\03-PromoteDC.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = "
                  - !Ref 'Parameter08fDomainController01IP'
                  - '"'
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter08aDNSDomainName'
                  - "\"\n"
                  - $safemodePWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordSafeModeAD'
                  - '").SecretString | ConvertFrom-Json).safemodepassword | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter08bNetBiosName'
                  - \Administrator"
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $databasepath = "C:\Windows\NTDS"
                  - "\n"
                  - $logpath = "C:\Windows\NTDS"
                  - "\n"
                  - $sysvolPath = "C:\Windows\SYSVOL"
                  - "\n"
                  - Install-WindowsFeature AD-Domain-Services -IncludeAllSubFeature -IncludeManagementTools
                  - "\n"
                  - "\n"
                  - $AddDomainController = @{
                  - "\n"
                  - DomainName = $domainname
                  - "\n"
                  - InstallDns = $true
                  - "\n"
                  - CreateDnsDelegation = $false
                  - "\n"
                  - DatabasePath = $databasepath
                  - "\n"
                  - LogPath = $logpath
                  - "\n"
                  - SysvolPath = $sysvolPath
                  - "\n"
                  - NoGlobalCatalog = $false
                  - "\n"
                  - SafeModeAdministratorPassword = $safemodePWD
                  - "\n"
                  - NoRebootOnCompletion = $false
                  - "\n"
                  - Force = $true
                  - "\n"
                  - Credential = $credential
                  - "\n"
                  - '}'
                  - "\n"
                  - Install-ADDSDomainController @AddDomainController
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to Domain Controller DNS Service."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\04-OSCustomization.ps1:
              content: !Join
                - ''
                - - "\n"
                  - Write-Output "SET FINAL DNS CONFIGURATION"
                  - "\n"
                  - 'Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).IfIndex -ServerAddresses '
                  - !Ref 'Parameter08hDomainController02IP'
                  - ','
                  - !Ref 'Parameter08fDomainController01IP'
                  - "\n"
                  - Set-DnsClient -InterfaceIndex (Get-NetAdapter).IfIndex -ConnectionSpecificSuffix "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
            C:\cfn\05-CreateADConnector.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $ServiceFailures = 0
                  - "\n"
                  - $AWSRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $ImportUsers = "
                  - !Ref 'Parameter08cImportUsers'
                  - '"'
                  - "\n"
                  - $CreateADConnector = "
                  - !Ref 'Parameter01bCreateADConnector'
                  - '"'
                  - "\n"
                  - $EnableWorkspacesDirectory = "
                  - !Ref 'Parameter01gCreateWorkspaces'
                  - '"'
                  - "\n"
                  - $ADConnectorSTATE = "Unknown"
                  - "\n"
                  - $CreateUsersWorkspaces = "
                  - !Ref 'Parameter24gUsersWorkspaces'
                  - '"'
                  - "\n"
                  - "\n"
                  - $DomainNetBIOS = "
                  - !Ref 'Parameter08bNetBiosName'
                  - '"'
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - $ADUsersPath = "OU=Users,OU=$DomainNetBIOS," + ((Get-AdDomain).distinguishedName)
                  - "\n"
                  - $bucketName = "
                  - !Ref 'Parameter08dBucketName'
                  - '"'
                  - "\n"
                  - $filePath = "
                  - !Ref 'Parameter08eFilePath'
                  - '"'
                  - "\n"
                  - "\n"
                  - $WKSPrivateNetwork = "
                  - !Ref 'Resource07aVDISubnet01'
                  - '","'
                  - !Ref 'Resource07bVDISubnet02'
                  - '"'
                  - "\n"
                  - $WKSPublicNetwork = "
                  - !Ref 'Resource07cVDISubnet03'
                  - '","'
                  - !Ref 'Resource07dVDISubnet04'
                  - '"'
                  - "\n"
                  - $bundleID = "
                  - !Ref 'Parameter24aBundleId'
                  - '"'
                  - "\n"
                  - $computeTypeName = "
                  - !Ref 'Parameter24bComputeType'
                  - '"'
                  - "\n"
                  - $runningMode = "
                  - !Ref 'Parameter24cRunMode'
                  - '"'
                  - "\n"
                  - "\n"
                  - $CreateWorkmailOrg = "
                  - !Ref 'Parameter01hCreateWorkmail'
                  - '"'
                  - "\n"
                  - $WorkmailAlias = "
                  - !Ref 'Parameter26bDirectorAlias'
                  - '"'
                  - "\n"
                  - $WorkmailURL = "https://$WorkmailAlias.awsapps.com/mail"
                  - "\n"
                  - $WorkmailUpdateRoute53 = "
                  - !Ref 'Parameter26cUpdateR53'
                  - '"'
                  - "\n"
                  - $WorkmailR53HostedZoneID = "
                  - !Ref 'Parameter26dHostedZoneID'
                  - '"'
                  - "\n"
                  - $WorkmailDomainName = "
                  - !Ref 'Parameter26eDNSDomainName'
                  - '"'
                  - "\n"
                  - $emailDomain = $domainname
                  - "\n"
                  - If ( $CreateWorkmailOrg -eq "YES"){$emailDomain = $WorkmailDomainName}
                  - "\n"
                  - "\n"
                  - If ( $ImportUsers -eq "YES"){
                  - "\n"
                  - read-s3Object -BucketName $bucketName -Key $filePath -File C:\cfn\Import_UsersToCreate.csv
                  - "\n"
                  - foreach($InputString in Get-Content C:\cfn\Import_UsersToCreate.csv) {
                  - "\n"
                  - "\n"
                  - "\t"
                  - $ADProperties = $InputString.Split(",")
                  - "\n"
                  - "\t"
                  - $DisplayName = $ADProperties[0]
                  - "\n"
                  - "\t"
                  - $GivenName = $ADProperties[1]
                  - "\n"
                  - "\t"
                  - $Surname = $ADProperties[2]
                  - "\n"
                  - "\t"
                  - $SamAccountName = $ADProperties[3]
                  - "\n"
                  - "\t"
                  - $Password =  ("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#%^&*!#%^&*!#%^&*".tochararray() | sort {Get-Random})[0..16] -join ''
                  - "\n"
                  - "\t"
                  - "\n"
                  - "\t"
                  - >-
                    New-ADUser -Name $DisplayName -DisplayName $DisplayName -GivenName $GivenName -Surname $Surname -SamAccountName $SamAccountName -UserPrincipalName $SamAccountName@$domainname -EmailAddress
                    $SamAccountName@$emailDomain -Enabled $true -AccountPassword ($Password | ConvertTo-SecureString -AsPlainText -Force) -Path $ADUsersPath
                  - "\n"
                  - "\t"
                  - Add-Content C:\cfn\Import_UsersCreated.csv "$DisplayName,$SamAccountName,$Password"
                  - "\n"
                  - "\t"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - "\n"
                  - If ($CreateADConnector -eq "YES") {
                  - "\n"
                  - "\t"
                  - $ADConnectorUSR = "
                  - !Ref 'Parameter08lADConnectorUSR'
                  - '"'
                  - "\n"
                  - "\t"
                  - $ADConnectorPWD =  ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordADConnector'
                  - '").SecretString | ConvertFrom-Json).Password'
                  - "\n"
                  - "\t"
                  - $CreateADC = @{
                  - "\n"
                  - "\t"
                  - Name = $domainname
                  - "\n"
                  - "\t"
                  - Password = $ADConnectorPWD
                  - "\n"
                  - "\t"
                  - ConnectSettings_CustomerUserName = $ADConnectorUSR
                  - "\n"
                  - "\t"
                  - ConnectSettings_CustomerDnsIp = "
                  - !Ref 'Parameter08fDomainController01IP'
                  - '","'
                  - !Ref 'Parameter08hDomainController02IP'
                  - '"'
                  - "\n"
                  - "\t"
                  - ShortName = $DomainNetBIOS
                  - "\n"
                  - "\t"
                  - Size = "
                  - !Ref 'Parameter08iADConnectorSize'
                  - '"'
                  - "\n"
                  - "\t"
                  - ConnectSettings_VpcId = "
                  - !Ref 'Resource01VPC'
                  - '"'
                  - "\n"
                  - "\t"
                  - ConnectSettings_SubnetId = "
                  - !Ref 'Resource04PrivateSubnet01'
                  - '","'
                  - !Ref 'Resource05PrivateSubnet02'
                  - '"'
                  - "\n"
                  - "\t"
                  - Region = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - Connect-DSDirectory @CreateADC > C:\cfn\AD-ConnectorID.log
                  - "\n"
                  - "\n"
                  - "\t"
                  - $ADConnectorID = (Get-Item -Path C:\cfn\AD-ConnectorID.log | Get-Content)
                  - "\n"
                  - "\t"
                  - Write-Output "WRITE AD-CONNECTORID IN SSM"
                  - "\n"
                  - "\t"
                  - 'Write-SSMParameter -Name '
                  - !Ref 'Resource39ADConnectorID'
                  - ' -Type "String" -Value "$ADConnectorID" -Overwrite $true'
                  - "\n"
                  - "\n"
                  - "\t"
                  - If ($CreateWorkmailOrg -eq "YES"){
                  - "\n"
                  - "\t"
                  - Write-Output "CREATE WORKMAIL ORGANIZATION"
                  - "\n"
                  - "\t"
                  - Do {
                  - "\n"
                  - "\t"
                  - "\t"
                  - $ADConnectorSTATE = (Get-Dsdirectory $ADConnectorID).Stage.Value
                  - "\n"
                  - "\t"
                  - "\t"
                  - If  ( $ADConnectorSTATE -Match "Active" ){
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - If  ($WorkmailUpdateRoute53 -eq "YES" ){
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - >-
                    $WorkmailOrgID = (New-WMOrganization -Alias $WorkmailAlias -DirectoryId $ADConnectorID -Domain @{"DomainName" = $WorkmailDomainName; "HostedZoneId" = $WorkmailR53HostedZoneID} -Select
                    "*" -Force -region $AWSRegion).OrganizationId
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - If ($? -Match "False" ){$ServiceFailures++;Break}
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Else{
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - $WorkmailOrgID = (New-WMOrganization -Alias $WorkmailAlias -DirectoryId $ADConnectorID -Select "*" -Force -region $AWSRegion).OrganizationId
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - If ($? -Match "False" ){$ServiceFailures++;Break}
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - If ($? -eq "True" ){
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Write-Output "WRITE WORKMAIL ORG ID"
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - 'Write-SSMParameter -Name '
                  - !Ref 'Resource39WorkmailOrgID'
                  - ' -Type "String" -Value "$WorkmailOrgID" -Overwrite $true'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Write-Output "WRITE WORKMAIL URL"
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - 'Write-SSMParameter -Name '
                  - !Ref 'Resource39WorkmailURL'
                  - ' -Type "String" -Value "$WorkmailURL" -Overwrite $true'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Break
                  - "\n"
                  - "\t"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - "\t"
                  - Start-Sleep 30
                  - "\n"
                  - "\t"
                  - "\t"
                  - $LoopCounterA++
                  - "\n"
                  - "\t"
                  - '} While ($LoopCounterA -lt 30)'
                  - "\n"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\n"
                  - "\t"
                  - If ( $ServiceFailures -eq 0){
                  - "\n"
                  - "\t"
                  - If ($EnableWorkspacesDirectory -eq "YES"){
                  - "\n"
                  - "\t"
                  - Do {
                  - "\n"
                  - "\t"
                  - "\t"
                  - $ADConnectorSTATE = (Get-Dsdirectory $ADConnectorID).Stage.Value
                  - "\n"
                  - "\t"
                  - "\t"
                  - If  ( $ADConnectorSTATE -Match "Active" ){
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Write-Output "REGISTER WORKSPACES DIRECTORY"
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - $RegisterWorkspaceDir = @{
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - DirectoryId = $ADConnectorID
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - EnableSelfService = $
                  - !Ref 'Parameter24eEnableSelfService'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - EnableWorkDoc = $
                  - !Ref 'Parameter24dEnableWorkdocs'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - 'SubnetId = '
                  - !If
                    - WorkspacesPrivateNetwork
                    - $WKSPrivateNetwork
                    - $WKSPublicNetwork
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Tenancy = "SHARED"
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Select = '*'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Register-WKSWorkspaceDirectory @RegisterWorkspaceDir -Force
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Start-Sleep 30
                  - "\n"
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - $WKSCreationProperty = @{
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - ResourceId = $ADConnectorID
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - WorkspaceCreationProperties_DefaultOu = "OU=AWS-Workspaces,OU=$DomainNetBIOS," + ((Get-AdDomain).distinguishedName)
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - WorkspaceCreationProperties_EnableInternetAccess = $
                  - !If
                    - WorkspacesPrivateNetwork
                    - 'false'
                    - 'true'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - WorkspaceCreationProperties_UserEnabledAsLocalAdministrator = $
                  - !Ref 'Parameter24iLocalAdmins'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Edit-WKSWorkspaceCreationProperty @WKSCreationProperty
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Start-Sleep 30
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Write-Output "WRITE WORKSPACES REGISTRATION CODE"
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - $WorkspacesRegCode = (Get-WKsWorkspaceDirectory -Directoryid $ADConnectorID -Region $AWSRegion).RegistrationCode
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - 'Write-SSMParameter -Name '
                  - !Ref 'Resource39WorkspacesRegistrationCode'
                  - ' -Type "String" -Value "$WorkspacesRegCode" -Overwrite $true'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - If ( $CreateUsersWorkspaces -eq "YES"){
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Write-Output "CREATE USERS WORKSPACES"
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - foreach($InputString in Get-Content C:\cfn\Import_UsersToCreate.csv) {
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - $ADProperties = $InputString.Split(",")
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - $SamAccountName = $ADProperties[3]
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - $LoopCounterB = 1
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Do {
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Start-Sleep 1
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - >-
                    $WorkspacesRequest = (New-WKSWorkspace -Workspace @{ "BundleID" = $bundleID; "DirectoryId" = $ADConnectorID; "UserName" = $SamAccountName; WorkspaceProperties = @{ "ComputeTypeName"
                    = $computeTypeName; "RunningMode" = $runningMode } }).FailedRequests.Count
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - $LogTime = (Get-Date -Format yyyy-MM-dd_hh:mm:ss_UTC_K)
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - If ($WorkspacesRequest -eq 1){
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - 'Write-Output "Failed Request. Waiting 30 seconds before retry ($LoopCounterB of 10): $samAccountName,$ADConnectorID,$bundleID,$computeTypeName,$runningMode,$LogTime"'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Start-Sleep 30
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - $LoopCounterB++
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Else {
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - 'Write-Output "Successful Request: $samAccountName,$ADConnectorID,$bundleID,$computeTypeName,$runningMode,$LogTime"'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Break
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - "\t"
                  - '} While ($LoopCounterB -le 20)'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - "\t"
                  - "\t"
                  - Break
                  - "\n"
                  - "\t"
                  - "\t"
                  - '}'
                  - "\n"
                  - "\t"
                  - "\t"
                  - Start-Sleep 30
                  - "\n"
                  - "\t"
                  - "\t"
                  - $LoopCounterA++
                  - "\n"
                  - "\t"
                  - '} While ($LoopCounterA -lt 30)'
                  - "\n"
                  - "\t"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "LOG FAILURES"
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "ServiceFailures.log" -ItemType "File" -Value $ServiceFailures -Force
                  - "\n"
            C:\cfn\06-EnableWorkmailUserMailbox.ps1:
              content: !Join
                - ''
                - - <#
                  - "\n"
                  - Run this script manually after the Workmail Organization Domain is with status "Verified".
                  - "\n"
                  - The script will enable Workmail mailboxes for all users in the all users in the Import_Users.csv file.
                  - "\n"
                  - '#>'
                  - "\n"
                  - "\n"
                  - '$WorkmailOrgID = ((Get-SSMParameter '
                  - !Ref 'Resource39WorkmailOrgID'
                  - ).value)
                  - "\n"
                  - $EmailDomain = "
                  - !Ref 'Parameter26eDNSDomainName'
                  - '"'
                  - "\n"
                  - foreach($InputString in Get-Content C:\cfn\Import_UsersToCreate.csv) {
                  - "\n"
                  - "\n"
                  - $ADProperties = $InputString.Split(",")
                  - "\n"
                  - $SamAccountName = $ADProperties[3]
                  - "\n"
                  - $ADUserSID = ((Get-AdUser -Identity $SamAccountName).SID.Value)
                  - "\n"
                  - $ADUserSamAccountName = ((Get-AdUser -Identity $SamAccountName).SamAccountName)
                  - "\n"
                  - "\n"
                  - Register-WMToWorkmail -EntityId $ADUserSID -Email $ADUserSamAccountName@$EmailDomain -OrganizationId $WorkmailOrgID -Force
                  - "\n"
                  - '}'
                  - "\n"
          commands:
            '01-PrepareDomainController02':
              command: Powershell.exe -Command C:\cfn\01-PrepareDomainController02.ps1
              waitAfterCompletion: forever
            '02-AddToDomain.':
              command: Powershell.exe -Command C:\cfn\02-AddToDomain.ps1
              waitAfterCompletion: forever
            '03-PromoteDC.ps1':
              command: Powershell.exe -Command C:\cfn\03-PromoteDC.ps1
              waitAfterCompletion: forever
            '04-OSCustomization':
              command: Powershell.exe -Command C:\cfn\04-OSCustomization.ps1
            '05-CreateADConnector':
              command: Powershell.exe -Command C:\cfn\05-CreateADConnector.ps1
            99-Signaling:
              command: Powershell.exe -Command c:\cfn\99-Signaling.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'Parameter04aInstanceAMI'
      InstanceType: !Ref 'Parameter04bInstanceType'
      IamInstanceProfile: !Ref 'InstanceProfileForDCs'
      PrivateIpAddress: !Ref 'Parameter08hDomainController02IP'
      SubnetId: !Ref 'Resource05PrivateSubnet02'
      SecurityGroupIds:
        - !Ref 'Resource23bSecurityGroupPrivateNetwork'
      KeyName: !Ref 'Parameter03aKeyPair'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .
              - !Ref 'Parameter08gDomainController02Name'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackId'
            - ' -r Resource25DomainController02 '
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  Resource26RemoteDesktop:
    Type: AWS::EC2::Instance
    Condition: CreateRDPServer
    DependsOn: Resource27bDHCPAssociation
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.Resource26RemoteDesktop.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r Resource26RemoteDesktop'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\cfn\RunCommand.bat:
              content: "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
            c:\cfn\99-Signaling.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource26RemoteDesktop"
                  - "\n"
                  - $CFNConnectionStatus = "False"
                  - "\n"
                  - "\n"
                  - Write-Output "SEND SIGNALING"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded
                  - "\n"
                  - If  ( $CFNConnectionStatus -Match "True" ){
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Success signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "Trying to connect to CloudFormation Endpoint."
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to CloudFormation Endpoint."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\01-PrepareRDPServer.ps1:
              content: !Join
                - ''
                - - $InstallCWAgent = "
                  - !Ref 'Parameter01zInstallCWAgent'
                  - '"'
                  - "\n"
                  - If ($InstallCWAgent -ne "NO") {
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL CW CLIENT"
                  - "\n"
                  - "\n"
                  - $cwuri = "https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $cwfile = "C:\cfn\amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $arguments = "/i $cwfile /qn /L*V C:\cfn\amazon-cloudwatch-agent.log"
                  - "\n"
                  - Invoke-WebRequest -Uri $cwuri -OutFile $cwfile -DisableKeepAlive -UseBasicparsing
                  - "\n"
                  - Start-Process msiexec.exe -ArgumentList $arguments -Wait
                  - "\n"
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Advanced Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentAdvanced'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentBasic'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Event Viewer") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyEvents'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyMetrics'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - ."C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -c file:C:\cfn\CloudWatchConfig.json -s
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "INSTALL WINDOWS FEATURE"
                  - "\n"
                  - Install-WindowsFeature RSAT-Role-Tools,GPMC,RSAT-DNS-Server
                  - "\n"
                  - "\n"
                  - Write-Output "SET GLOBAL SUFFIX"
                  - "\n"
                  - Set-DnsClientGlobalSetting -SuffixSearchList "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - "\n"
                  - Write-Output "RENAME COMPUTER"
                  - "\n"
                  - $newname = "
                  - !Ref 'Parameter06aRDPName'
                  - '".ToLower()'
                  - "\n"
                  - Rename-Computer -NewName $newname -PassThru
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
            C:\cfn\02-AddToDomain.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $OUPathMemberServers = "OU=Servers,OU=
                  - !Ref 'Parameter08bNetBiosName'
                  - '" + ",'
                  - !GetAtt 'Resource39DirectoryDN.Value'
                  - '"'
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "ADD TO DOMAIN"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter08bNetBiosName'
                  - \Administrator"
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - Add-Computer -DomainName $domainname -OUPath $OUPathMemberServers -Restart -Credential $credential
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to Domain Controller DNS Service."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
          commands:
            '01-PrepareRDPServer':
              command: Powershell.exe -Command C:\cfn\01-PrepareRDPServer.ps1
              waitAfterCompletion: forever
            '02-AddToDomain':
              command: Powershell.exe -Command C:\cfn\02-AddToDomain.ps1
              waitAfterCompletion: forever
            99-Signaling:
              command: Powershell.exe -Command c:\cfn\99-Signaling.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'Parameter04aInstanceAMI'
      SubnetId: !Ref 'Resource02PublicSubnet01'
      IamInstanceProfile: !Ref 'InstanceProfileForMemberServers'
      KeyName: !Ref 'Parameter03aKeyPair'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .RemoteDesktop
      SecurityGroupIds:
        - !Ref 'Resource23aSecurityGroupTrustedRDP'
      InstanceType: !Ref 'Parameter04bInstanceType'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackId'
            - ' -r Resource26RemoteDesktop '
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  Resource27DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    DependsOn: Resource25DomainController02
    Properties:
      DomainName: !Ref 'Parameter08aDNSDomainName'
      DomainNameServers:
        - !Ref 'Parameter08fDomainController01IP'
        - !Ref 'Parameter08hDomainController02IP'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .DHCPOptions
  Resource27bDHCPAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref 'Resource27DHCPOptions'
      VpcId: !Ref 'Resource01VPC'
  Resource30RootCA:
    Type: AWS::EC2::Instance
    Condition: CreateCA
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.Resource30RootCA.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r Resource30RootCA'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\cfn\RunCommand.bat:
              content: "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
            c:\cfn\99-Signaling.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource30RootCA"
                  - "\n"
                  - $CFNConnectionStatus = "False"
                  - "\n"
                  - "\n"
                  - Write-Output "SEND SIGNALING"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded
                  - "\n"
                  - If  ( $CFNConnectionStatus -Match "True" ){
                  - "\n"
                  - Write-Output "CHECKING INSTANCE HEALTH"
                  - "\n"
                  - $Failures = 0
                  - "\n"
                  - $CAStatus = (Get-Service | Where Name -EQ "CertSvc").Status
                  - "\n"
                  - If  ( $CAStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - "\n"
                  - If ($Failures -eq 0) {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Success signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Failure signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "Trying to connect to CloudFormation Endpoint."
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to CloudFormation Endpoint."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\CAPolicy.inf:
              content: !Join
                - ''
                - - '[Version]'
                  - "\n"
                  - Signature="$Windows NT$"
                  - "\n"
                  - "\n"
                  - '[Certsrv_Server]'
                  - "\n"
                  - RenewalKeyLength=4096
                  - "\n"
                  - RenewalValidityPeriod=Years
                  - "\n"
                  - RenewalValidityPeriodUnits=10
                  - "\n"
                  - CRLPeriod=Years
                  - "\n"
                  - CRLPeriodUnits=10
                  - "\n"
                  - AlternateSignatureAlgorithm=0
                  - "\n"
                  - "\n"
                  - '[BasicConstraintsExtension]'
                  - "\n"
                  - PathLength=1
                  - "\n"
                  - Critical=Yes
                  - "\n"
                  - "\n"
                  - '[AuthorityInformationAccess]'
                  - "\n"
                  - Empty = true
                  - "\n"
                  - "\n"
                  - '[CRLDistributionPoint]'
                  - "\n"
                  - Empty = true
                  - "\n"
            C:\cfn\01-PrepareRootCA.ps1:
              content: !Join
                - ''
                - - $InstallCWAgent = "
                  - !Ref 'Parameter01zInstallCWAgent'
                  - '"'
                  - "\n"
                  - If ($InstallCWAgent -ne "NO") {
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL CW CLIENT"
                  - "\n"
                  - "\n"
                  - $cwuri = "https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $cwfile = "C:\cfn\amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $arguments = "/i $cwfile /qn /L*V C:\cfn\amazon-cloudwatch-agent.log"
                  - "\n"
                  - Invoke-WebRequest -Uri $cwuri -OutFile $cwfile -DisableKeepAlive -UseBasicparsing
                  - "\n"
                  - Start-Process msiexec.exe -ArgumentList $arguments -Wait
                  - "\n"
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Advanced Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentAdvanced'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentBasic'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Event Viewer") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyEvents'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyMetrics'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - ."C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -c file:C:\cfn\CloudWatchConfig.json -s
                  - "\n"
                  - '}'
                  - "\n"
                  - "\n"
                  - Write-Output "ENABLE PSREMOTING"
                  - "\n"
                  - Enable-PSRemoting -SkipNetworkProfileCheck -Force
                  - "\n"
                  - Set-NetFirewallRule -Name "WINRM-HTTP-In-TCP-PUBLIC" -RemoteAddress Any
                  - "\n"
                  - "\n"
                  - Write-Output "SET LOCAL PASSWORD AND RENAME INSTANCE. ROOT CA IS NOT MEMBER OF THE DOMAIN."
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password'
                  - "\n"
                  - Net User Administrator $administratorPWD
                  - "\n"
                  - $newname = "
                  - !Ref 'Parameter09aRootCAName'
                  - '".ToLower()'
                  - "\n"
                  - Rename-Computer -NewName $newname -PassThru
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
            C:\cfn\02-InstallCAFeature.ps1:
              content: !Join
                - ''
                - - $domainname = "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - $RootCADistinguishedName = "DC=" + $domainname -Replace "\.", ",DC="
                  - "\n"
                  - $RootCAType = "StandaloneRootCA"
                  - "\n"
                  - $RootCACommonName = "
                  - !Ref 'Parameter09aRootCAName'
                  - '"'
                  - "\n"
                  - $RootCAKeyLength = "
                  - !Ref 'Parameter09cRootCAKeyLength'
                  - '"'
                  - "\n"
                  - $RootCAValidityPeriod = "Years"
                  - "\n"
                  - $RootCAValidityPeriodUnits = "10"
                  - "\n"
                  - $RootCAHashAlgorithm = "
                  - !Ref 'Parameter09dRootCAHash'
                  - '"'
                  - "\n"
                  - $RootCACryptoProvider = "RSA#Microsoft Software Key Storage Provider"
                  - "\n"
                  - $ValidityCertificatesIssuedbyRootCA = "6"
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL ROOT CA"
                  - "\n"
                  - Copy-Item C:\cfn\CAPolicy.inf C:\Windows\CAPolicy.inf
                  - "\n"
                  - Install-WindowsFeature ADCS-Cert-Authority
                  - "\n"
                  - Install-WindowsFeature RSAT-ADCS-Mgmt
                  - "\n"
                  - >-
                    Install-AdcsCertificationAuthority -CAType $RootCAType -CACommonName $RootCACommonName -CADistinguishedNameSuffix $RootCADistinguishedName -CryptoProviderName $RootCACryptoProvider -HashAlgorithmName
                    $RootCAHashAlgorithm -KeyLength $RootCAKeyLength -ValidityPeriod $RootCAValidityPeriod -ValidityPeriodUnits $RootCAValidityPeriodUnits -Force
                  - "\n"
                  - "\n"
                  - Write-Output "CONFIGURE ROOT CA REGISTRY KEYS"
                  - "\n"
                  - Set-ItemProperty 'HKLM:\\SYSTEM\CurrentControlSet\Services\CertSvc\Configuration\
                  - !Ref 'Parameter09aRootCAName'
                  - \PolicyModules\CertificateAuthority_MicrosoftDefault.Policy' -Name 'RequestDisposition' -Value 1
                  - "\n"
                  - Set-ItemProperty 'HKLM:\\SYSTEM\CurrentControlSet\Services\CertSvc\Configuration\
                  - !Ref 'Parameter09aRootCAName'
                  - \' -Name 'ValidityPeriodUnits' -Value $ValidityCertificatesIssuedbyRootCA
                  - "\n"
                  - Write-Output "CONFIGURE CDP AND AIA"
                  - "\n"
                  - Add-CACRLDistributionPoint -Uri "http://
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - /<CAName><DeltaCRLAllowed>.crl"  -AddToCertificateCdp -AddToFreshestCrl -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "http://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt" -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "ldap:///CN=<CATruncatedName>,CN=AIA,CN=Public Key Services,CN=Services,<ConfigurationContainer><CAObjectClass>" -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "file://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt" -Force
                  - "\n"
                  - Add-CAAuthorityInformationAccess -AddToCertificateAia -uri "http://
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - /<ServerDNSName>_<CAName>.crt" -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "ldap:///CN=<CATruncatedName><CRLNameSuffix>,CN=<ServerShortName>,CN=CDP,CN=Public Key Services,CN=Services,<ConfigurationContainer><CDPObjectClass>"
                    -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "file://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl" -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "http://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl" -Force
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - "\n"
          commands:
            '01-PrepareRootCA':
              command: Powershell.exe -Command C:\cfn\01-PrepareRootCA.ps1
              waitAfterCompletion: forever
            '02-InstallCAFeature':
              command: Powershell.exe -Command C:\cfn\02-InstallCAFeature.ps1
              waitAfterCompletion: forever
            99-Signaling:
              command: Powershell.exe -Command c:\cfn\99-Signaling.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'Parameter04aInstanceAMI'
      InstanceType: !Ref 'Parameter04bInstanceType'
      IamInstanceProfile: !Ref 'InstanceProfileForMemberServers'
      PrivateIpAddress: !Ref 'Parameter09bRootCAIP'
      SubnetId: !Ref 'Resource04PrivateSubnet01'
      SecurityGroupIds:
        - !Ref 'Resource23bSecurityGroupPrivateNetwork'
      KeyName: !Ref 'Parameter03aKeyPair'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .
              - !Ref 'Parameter09aRootCAName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackId'
            - ' -r Resource30RootCA '
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  Resource31SubCA:
    Type: AWS::EC2::Instance
    DependsOn: Resource27bDHCPAssociation
    Condition: CreateCA
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.Resource31SubCA.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r Resource31SubCA'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\cfn\RunCommand.bat:
              content: "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
            c:\cfn\99-Signaling.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource31SubCA"
                  - "\n"
                  - $CFNConnectionStatus = "False"
                  - "\n"
                  - "\n"
                  - Write-Output "SEND SIGNALING"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded
                  - "\n"
                  - If  ( $CFNConnectionStatus -Match "True" ){
                  - "\n"
                  - Write-Output "CHECKING INSTANCE HEALTH"
                  - "\n"
                  - $Failures = 0
                  - "\n"
                  - $SubCAStatus = (Get-Service | Where Name -EQ "CertSvc").Status
                  - "\n"
                  - If  ( $SubCAStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - $IISStatus = (Get-Service | Where Name -EQ "W3SVC").Status
                  - "\n"
                  - If  ( $IISStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - "\n"
                  - If ($Failures -eq 0) {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Success signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Failure signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "Trying to connect to CloudFormation Endpoint."
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to CloudFormation Endpoint."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\CAPolicy.inf:
              content: !Join
                - ''
                - - '[Version]'
                  - "\n"
                  - Signature="$Windows NT$"
                  - "\n"
                  - "\n"
                  - '[Certsrv_Server]'
                  - "\n"
                  - RenewalKeyLength=2048
                  - "\n"
                  - CRLPeriod=Months
                  - "\n"
                  - CRLPeriodUnits=01
                  - "\n"
                  - CRLDeltaPeriod=Weeks
                  - "\n"
                  - CRLDeltaPeriodUnits=1
                  - "\n"
                  - LoadDefaultTemplates=True
                  - "\n"
                  - "\n"
            C:\cfn\web.config:
              content: !Join
                - ''
                - - <?xml version="1.0" encoding="UTF-8"?>
                  - "\n"
                  - "\t<configuration>"
                  - "\n"
                  - "\t\t<system.webServer>"
                  - "\n"
                  - "\t\t\t<directoryBrowse enabled=\"true\" />"
                  - "\n"
                  - "\t\t\t<security>"
                  - "\n"
                  - "\t\t\t\t<requestFiltering allowDoubleEscaping=\"true\" />"
                  - "\n"
                  - "\t\t\t</security>"
                  - "\n"
                  - "\t\t</system.webServer>"
                  - "\n"
                  - "\t</configuration>"
                  - "\n"
            C:\cfn\01-PrepareSubordinateCA.ps1:
              content: !Join
                - ''
                - - $InstallCWAgent = "
                  - !Ref 'Parameter01zInstallCWAgent'
                  - '"'
                  - "\n"
                  - If ($InstallCWAgent -ne "NO") {
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL CW CLIENT"
                  - "\n"
                  - "\n"
                  - $cwuri = "https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $cwfile = "C:\cfn\amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $arguments = "/i $cwfile /qn /L*V C:\cfn\amazon-cloudwatch-agent.log"
                  - "\n"
                  - Invoke-WebRequest -Uri $cwuri -OutFile $cwfile -DisableKeepAlive -UseBasicparsing
                  - "\n"
                  - Start-Process msiexec.exe -ArgumentList $arguments -Wait
                  - "\n"
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Advanced Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentAdvanced'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentBasic'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Event Viewer") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyEvents'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyMetrics'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - ."C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -c file:C:\cfn\CloudWatchConfig.json -s
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "INSTALL WINDOWS FEATURES"
                  - "\n"
                  - Install-WindowsFeature -Name Web-Server -IncludeManagementTools
                  - "\n"
                  - Install-WindowsFeature ADCS-Cert-Authority
                  - "\n"
                  - Install-Windowsfeature RSAT-AD-PowerShell
                  - "\n"
                  - Install-WindowsFeature RSAT-ADCS-Mgmt
                  - "\n"
                  - Install-WindowsFeature RSAT-ADDS-Tools
                  - "\n"
                  - "\n"
                  - Write-Output "SET GLOBAL SUFFIX"
                  - "\n"
                  - Set-DnsClientGlobalSetting -SuffixSearchList "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - "\n"
                  - Write-Output "RENAME COMPUTER"
                  - "\n"
                  - $newname = "
                  - !Ref 'Parameter10aSubordinateCAName'
                  - '".ToLower()'
                  - "\n"
                  - Rename-Computer -NewName $newname -PassThru
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - "\n"
            C:\cfn\02-AddToDomain.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $OUPathMemberServers = "OU=Servers,OU=
                  - !Ref 'Parameter08bNetBiosName'
                  - '" + ",'
                  - !GetAtt 'Resource39DirectoryDN.Value'
                  - '"'
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "ADD TO DOMAIN"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter08bNetBiosName'
                  - \Administrator"
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - Add-Computer -DomainName $domainname -OUPath $OUPathMemberServers -Restart -Credential $credential
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to Domain Controller DNS Service."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\03-InstallSubordinateCA.ps1:
              content: !Join
                - ''
                - - Write-Output "AUTHENTICATE"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter08bNetBiosName'
                  - \Administrator"
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL SUBORDINATE CA"
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - $SubCADistinguishedName = "DC=" + $domainname -Replace "\.", ",DC="
                  - "\n"
                  - $SubCAType = "EnterpriseSubordinateCA"
                  - "\n"
                  - $SubCACommonName = "
                  - !Ref 'Parameter10aSubordinateCAName'
                  - '"'
                  - "\n"
                  - $SubCAKeyLength = "
                  - !Ref 'Parameter10cSubordinateCAKeyLength'
                  - '"'
                  - "\n"
                  - $SubCAHashAlgorithm = "
                  - !Ref 'Parameter10dSubordinateCAHash'
                  - '"'
                  - "\n"
                  - $SubCACryptoProvider = "RSA#Microsoft Software Key Storage Provider"
                  - "\n"
                  - "\n"
                  - Copy-Item C:\cfn\CAPolicy.inf C:\Windows\CAPolicy.inf
                  - "\n"
                  - >-
                    Install-AdcsCertificationAuthority -CAType $SubCAType -CACommonName $SubCACommonName -CADistinguishedNameSuffix $SubCADistinguishedName -CryptoProviderName $SubCACryptoProvider -HashAlgorithmName
                    $SubCAHashAlgorithm -KeyLength $SubCAKeyLength -Credential $credential -Force
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE CDP AND AIA ENDPOINT BASED ON IIS"
                  - "\n"
                  - Copy-Item C:\cfn\web.config C:\Windows\System32\CertSrv\CertEnroll\web.config
                  - "\n"
                  - New-WebSite -Name SubordinateCA -Port 80 -HostHeader "
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - '" -PhysicalPath C:\Windows\System32\CertSrv\CertEnroll'
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
            C:\cfn\04-ConfigSubCAPhase1.ps1:
              content: !Join
                - ''
                - - Write-Output "AUTHENTICATE"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter08bNetBiosName'
                  - \Administrator"
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - "\n"
                  - Write-Output "ENABLE THE SUBORDINATE CA TO INVOKE COMMAND IN THE ROOT CA"
                  - "\n"
                  - Set-Item WSMan:\localhost\Client\TrustedHosts -Value "*" -Force
                  - "\n"
                  - "\n"
                  - $RootCA = "
                  - !Ref 'Parameter09bRootCAIP'
                  - '"'
                  - "\n"
                  - $LoopCounterA = 0
                  - "\n"
                  - $RootCAStatus = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - $RootCAStatus = (Invoke-Command -ComputerName $RootCA { (Get-Service | Where Name -EQ "CertSvc").Status } -Credential $credential).Value
                  - "\n"
                  - If  ( $RootCAStatus -Match "Running" ){
                  - "\n"
                  - "\n"
                  - Write-Output "MAP NETWORK DRIVE TO ROOT CA"
                  - "\n"
                  - New-PSDrive -Name "Y" -PSProvider FileSystem -Root "\\
                  - !Ref 'Parameter09bRootCAIP'
                  - \c$" -Credential $credential
                  - "\n"
                  - "\n"
                  - Write-Output "IMPORT THE ROOT CA CERTIFICATE AND REVOCATION LIST"
                  - "\n"
                  - Copy-Item "Y:\Windows\System32\CertSrv\CertEnroll\*" "C:\Windows\System32\CertSrv\CertEnroll\"
                  - "\n"
                  - certutil -addstore -f root c:\Windows\System32\CertSrv\CertEnroll\
                  - !Ref 'Parameter09aRootCAName'
                  - _
                  - !Ref 'Parameter09aRootCAName'
                  - .crt
                  - "\n"
                  - certutil -addstore -f root c:\Windows\System32\CertSrv\CertEnroll\
                  - !Ref 'Parameter09aRootCAName'
                  - .crl
                  - "\n"
                  - "\n"
                  - Write-Output "COPY THE CERTIFICATE REQUEST FROM SUBORDINATE CA TO THE ROOT CA"
                  - "\n"
                  - Copy-Item C:\
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - _
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .req Y:\
                  - "\n"
                  - "\n"
                  - Write-Output "SUBMIT CERTIFICATE REQUEST TO THE ROOT CA"
                  - "\n"
                  - Invoke-Command -Computername "
                  - !Ref 'Parameter09bRootCAIP'
                  - '" -ScriptBlock {certreq -config '
                  - !Ref 'Parameter09aRootCAName'
                  - \
                  - !Ref 'Parameter09aRootCAName'
                  - ' -submit C:\'
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - _
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .req
                  - ' C:\SubordinateCertificateIssued.cer} -Credential $credential'
                  - "\n"
                  - Copy-Item Y:\SubordinateCertificateIssued.cer C:\SubordinateCertificateIssued.cer
                  - "\n"
                  - "\n"
                  - Write-Output "SET THE ROOT CA BACK TO MANUAL APPROVAL OF CERTIFICATE REQUESTS."
                  - "\n"
                  - Invoke-Command -Computername "
                  - !Ref 'Parameter09bRootCAIP'
                  - '" -ScriptBlock {Set-ItemProperty ''HKLM:\\SYSTEM\CurrentControlSet\Services\CertSvc\Configuration\'
                  - !Ref 'Parameter09aRootCAName'
                  - \PolicyModules\CertificateAuthority_MicrosoftDefault.Policy' -Name 'RequestDisposition' -Value 257; Restart-Service CertSvc} -Credential $credential
                  - "\n"
                  - "\n"
                  - Write-Output "CONFIGURE CDP AND AIA"
                  - "\n"
                  - Add-CAAuthorityInformationAccess -AddToCertificateAia -uri "http://<ServerDNSName>/<ServerDNSName>_<CAName>.crt" -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "http://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt" -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "ldap:///CN=<CATruncatedName>,CN=AIA,CN=Public Key Services,CN=Services,<ConfigurationContainer><CAObjectClass>" -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "file://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt" -Force
                  - "\n"
                  - "\n"
                  - Add-CACRLDistributionPoint -Uri "http://<ServerDNSName>/<CAName><DeltaCRLAllowed>.crl" -AddToCertificateCdp -AddToFreshestCrl -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "ldap:///CN=<CATruncatedName><CRLNameSuffix>,CN=<ServerShortName>,CN=CDP,CN=Public Key Services,CN=Services,<ConfigurationContainer><CDPObjectClass>"
                    -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "file://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl" -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "http://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl" -Force
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE SCHEDULED TASK ConfigSubCAPhase2"
                  - "\n"
                  - $taskSchedulerPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password'
                  - "\n"
                  - $taskSchedulerUSR = "
                  - !Ref 'Parameter08bNetBiosName'
                  - \Administrator"
                  - "\n"
                  - $taskname = "ConfigSubCAPhase2"
                  - "\n"
                  - $taskaction = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-NoProfile -WindowStyle Hidden -command "& {C:\cfn\05-ConfigSubCAPhase2.ps1}"'
                  - "\n"
                  - $tasktrigger =  New-ScheduledTaskTrigger -AtStartup
                  - "\n"
                  - $taskcondition = New-ScheduledTaskSettingsSet -RunOnlyIfNetworkAvailable
                  - "\n"
                  - Register-ScheduledTask -Action $taskaction -Trigger $tasktrigger -TaskName $taskName -Settings $taskcondition -User $taskSchedulerUSR -Password $taskSchedulerPWD -RunLevel Highest
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - Write-Output "Root CA is not running. Trying again in 30 seconds"
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - '}'
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource24DomainController01"
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Failure signaling sent to stack $CFNStack - Unable to connect to Root CA"
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\05-ConfigSubCAPhase2.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "CAPTURE DOMAIN DN"
                  - "\n"
                  - $domainDN = (get-addomain).distinguishedname
                  - "\n"
                  - "\n"
                  - Write-Output "PUBLISH THE ROOT CA CERTIFICATE IN THE DIRECTORY AND INSTALL THE SUBORDINATE CA CERTIFICATE. THIS WILL BE EXECUTED BY SCHEDULED TASK ONCE"
                  - "\n"
                  - certutil -dspublish -f c:\Windows\System32\CertSrv\CertEnroll\
                  - !Ref 'Parameter09aRootCAName'
                  - _
                  - !Ref 'Parameter09aRootCAName'
                  - .crt RootCA >> C:\cfn\CertUtil.txt
                  - "\n"
                  - certutil -installCert C:\SubordinateCertificateIssued.cer >> C:\cfn\CertUtil.txt
                  - "\n"
                  - "\n"
                  - Write-Output "SET PERMISSIONS ON TEMPLATES FOR COMPUTERS USERS AND WEBSERVERS"
                  - "\n"
                  - dsacls "CN=Machine,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN" /G "NT AUTHORITY\Authenticated Users:CA;Enroll" >> C:\cfn\dsacls.log
                  - "\n"
                  - dsacls "CN=User,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN" /G "NT AUTHORITY\Authenticated Users:CA;Enroll" >> C:\cfn\dsacls.log
                  - "\n"
                  - dsacls "CN=WebServer,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN" /G "NT AUTHORITY\Authenticated Users:CA;Enroll" >> C:\cfn\dsacls.log
                  - "\n"
                  - Write-Output "UNREGISTER SCHEDULED TASK 1"
                  - "\n"
                  - Unregister-ScheduledTask -TaskName "ConfigSubCAPhase2" -Confirm:$False
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to Domain Controller DNS Service."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\05-CheckTaskLog.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CheckTaskLog = "False"
                  - "\n"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CheckTaskLog = (Test-Path "C:\cfn\dsacls.log")
                  - "\n"
                  - If ( $CheckTaskLog -eq "True"){
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If ($LoopCounterA -eq 100 ) {
                  - "\n"
                  - Write-Output "Waiting for dsacls.log"
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 100)'
                  - "\n"
          commands:
            '01-PrepareSubordinateCA':
              command: Powershell.exe -Command C:\cfn\01-PrepareSubordinateCA.ps1
              waitAfterCompletion: forever
            '02-AddToDomain':
              command: Powershell.exe -Command C:\cfn\02-AddToDomain.ps1
              waitAfterCompletion: forever
            '03-InstallSubordinateCA':
              command: Powershell.exe -Command C:\cfn\03-InstallSubordinateCA.ps1
              waitAfterCompletion: forever
            '04-ConfigSubCAPhase1':
              command: Powershell.exe -Command C:\cfn\04-ConfigSubCAPhase1.ps1
              waitAfterCompletion: forever
            '05-CheckTaskLog':
              command: Powershell.exe -Command C:\cfn\05-CheckTaskLog.ps1
            99-Signaling:
              command: Powershell.exe -Command c:\cfn\99-Signaling.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'Parameter04aInstanceAMI'
      InstanceType: !Ref 'Parameter04bInstanceType'
      IamInstanceProfile: !Ref 'InstanceProfileForMemberServers'
      PrivateIpAddress: !Ref 'Parameter10bSubordinateCAIP'
      SubnetId: !Ref 'Resource04PrivateSubnet01'
      SecurityGroupIds:
        - !Ref 'Resource23bSecurityGroupPrivateNetwork'
      KeyName: !Ref 'Parameter03aKeyPair'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .
              - !Ref 'Parameter10aSubordinateCAName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackId'
            - ' -r Resource31SubCA '
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  Resource32ADFS:
    Type: AWS::EC2::Instance
    DependsOn: Resource31SubCA
    Condition: CreateADFS
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.Resource32ADFS.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r Resource32ADFS'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\cfn\RunCommand.bat:
              content: "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
            c:\cfn\99-Signaling.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource32ADFS"
                  - "\n"
                  - $CFNConnectionStatus = "False"
                  - "\n"
                  - $ADFSStackAccount = "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - $"
                  - "\n"
                  - $URL = "
                  - !Join
                    - ''
                    - - https://
                      - !Ref 'Parameter12bFederationServiceName'
                      - .
                      - !Ref 'Parameter08aDNSDomainName'
                      - /adfs/ls/idpinitiatedsignon.aspx
                  - '"'
                  - "\n"
                  - "\n"
                  - Write-Output "SEND SIGNALING"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded
                  - "\n"
                  - If  ( $CFNConnectionStatus -Match "True" ){
                  - "\n"
                  - Write-Output "CHECKING INSTANCE HEALTH"
                  - "\n"
                  - $Failures = 0
                  - "\n"
                  - $ADFSSvcStatus = (Get-Service | Where Name -EQ "adfssrv").Status
                  - "\n"
                  - If  ( $ADFSSvcStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - $ADFSSvcAccount = (Get-WmiObject Win32_Service | Where-Object Name -EQ "adfssrv").StartName
                  - "\n"
                  - If  ( $ADFSSvcAccount -NE $ADFSStackAccount ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - $ADFSConnectionStatus = (Invoke-WebRequest -URI $URL -UseBasicParsing).StatusCode
                  - "\n"
                  - If ($ADFSConnectionStatus -NE "200"){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - "\n"
                  - If ($Failures -eq 0) {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Success signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Failure signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "Trying to connect to CloudFormation Endpoint."
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to CloudFormation Endpoint."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\01-PrepareADFS.ps1:
              content: !Join
                - ''
                - - $InstallCWAgent = "
                  - !Ref 'Parameter01zInstallCWAgent'
                  - '"'
                  - "\n"
                  - If ($InstallCWAgent -ne "NO") {
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL CW CLIENT"
                  - "\n"
                  - "\n"
                  - $cwuri = "https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $cwfile = "C:\cfn\amazon-cloudwatch-agent.msi"
                  - "\n"
                  - $arguments = "/i $cwfile /qn /L*V C:\cfn\amazon-cloudwatch-agent.log"
                  - "\n"
                  - Invoke-WebRequest -Uri $cwuri -OutFile $cwfile -DisableKeepAlive -UseBasicparsing
                  - "\n"
                  - Start-Process msiexec.exe -ArgumentList $arguments -Wait
                  - "\n"
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Advanced Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentAdvanced'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Event Viewer and Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentBasic'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Event Viewer") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyEvents'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($InstallCWAgent -eq "Only Basic Metrics") {
                  - "\n"
                  - $CWInstallParameters = (Get-SSMParameter -Name "
                  - !Ref 'CWAgentOnlyMetrics'
                  - '").Value'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CloudWatchConfig.json" -ItemType "File" -Value $CWInstallParameters -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - ."C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -c file:C:\cfn\CloudWatchConfig.json -s
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "INSTALL WINDOWS FEATURE"
                  - "\n"
                  - Install-WindowsFeature adfs-federation -IncludeManagementTools
                  - "\n"
                  - Install-WindowsFeature RSAT-AD-PowerShell
                  - "\n"
                  - "\n"
                  - Write-Output "SET GLOBAL SUFFIX"
                  - "\n"
                  - Set-DnsClientGlobalSetting -SuffixSearchList "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - "\n"
                  - Write-Output "RENAME COMPUTER"
                  - "\n"
                  - $newname = "
                  - !Ref 'Parameter12aADFSName'
                  - '".ToLower()'
                  - "\n"
                  - Rename-Computer -NewName $newname -PassThru
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - "\n"
            C:\cfn\02-AddToDomain.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $OUPathMemberServers = "OU=Servers,OU=
                  - !Ref 'Parameter08bNetBiosName'
                  - '" + ",'
                  - !GetAtt 'Resource39DirectoryDN.Value'
                  - '"'
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "ADD TO DOMAIN"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter08bNetBiosName'
                  - \Administrator"
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - Add-Computer -DomainName $domainname -OUPath $OUPathMemberServers -Restart -Credential $credential
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to Domain Controller DNS Service."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\03-InstallADFS.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\03-InstallADFS.Transcript.log -Append
                  - "\n"
                  - $dc01  = "
                  - !Ref 'Parameter08eDomainController01Name'
                  - '"'
                  - "\n"
                  - $LoopCounterA = 0
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - $ADFSName = "
                  - !Ref 'Parameter12bFederationServiceName'
                  - '".ToLower()'
                  - "\n"
                  - '$ADFSServiceName = '
                  - $ADFSName
                  - ' + ".'
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - $ADFSDisplayName = ("
                  - !Ref 'Parameter08bNetBiosName'
                  - ' ADFS").ToUpper()'
                  - "\n"
                  - $ADFSSigning = $ADFSName + "-Signing"
                  - "\n"
                  - $ADFSDecrypting = $ADFSName + "-Decrypting"
                  - "\n"
                  - $ADFSComputerName = $env:computername.ToLower()
                  - "\n"
                  - '$URL = "https://" + '
                  - $ADFSName
                  - ' + ".'
                  - !Ref 'Parameter08aDNSDomainName'
                  - /federationmetadata/2007-06/federationmetadata.xml"
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE CERTIFICATE REQUEST  - ADFS SERVICE"
                  - "\n"
                  - $CertificateRequest = @"
                  - "\n"
                  - '[Version]'
                  - "\n"
                  - Signature="`$Windows NT$"
                  - "\n"
                  - "\n"
                  - '[Newrequest]'
                  - "\n"
                  - Subject = CN=$ADFSName
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - "\n"
                  - Exportable = true
                  - "\n"
                  - MachineKeySet = true
                  - "\n"
                  - "\n"
                  - '[Extensions]'
                  - "\n"
                  - 2.5.29.17 = "{text}"
                  - "\n"
                  - _continue_ = "dns=$ADFSComputerName
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - '&"'
                  - "\n"
                  - _continue_ = "dns=enterpriseregistration.
                  - !Ref 'Parameter08aDNSDomainName'
                  - '&"'
                  - "\n"
                  - _continue_ = "dns=certauth.$ADFSName
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - '&"'
                  - "\n"
                  - _continue_ = "dns=$ADFSName
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - '&"'
                  - "\n"
                  - "\n"
                  - '[RequestAttributes]'
                  - "\n"
                  - CertificateTemplate = WebServer
                  - "\n"
                  - '"@'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CertificateRequestTemplate.inf" -ItemType "File" -Value $CertificateRequest -Force
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE CERTIFICATE REQUEST - ADFS SIGNING"
                  - "\n"
                  - $CertificateRequestSigning = @"
                  - "\n"
                  - '[Version]'
                  - "\n"
                  - Signature="`$Windows NT$"
                  - "\n"
                  - "\n"
                  - '[Newrequest]'
                  - "\n"
                  - Subject = CN=$ADFSSigning
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - "\n"
                  - Exportable = true
                  - "\n"
                  - MachineKeySet = true
                  - "\n"
                  - "\n"
                  - '[Extensions]'
                  - "\n"
                  - 2.5.29.17 = "{text}"
                  - "\n"
                  - _continue_ = "dns=CN=$ADFSSigning
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - '&"'
                  - "\n"
                  - "\n"
                  - '[RequestAttributes]'
                  - "\n"
                  - CertificateTemplate = WebServer
                  - "\n"
                  - '"@'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CertificateRequestTemplateSigning.inf" -ItemType "File" -Value $CertificateRequestSigning -Force
                  - "\n"
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE CERTIFICATE REQUEST - ADFS ENCRYPTION"
                  - "\n"
                  - $CertificateRequestDecrypting = @"
                  - "\n"
                  - '[Version]'
                  - "\n"
                  - Signature="`$Windows NT$"
                  - "\n"
                  - "\n"
                  - '[Newrequest]'
                  - "\n"
                  - Subject = CN=$ADFSDecrypting
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - "\n"
                  - Exportable = true
                  - "\n"
                  - MachineKeySet = true
                  - "\n"
                  - "\n"
                  - '[Extensions]'
                  - "\n"
                  - 2.5.29.17 = "{text}"
                  - "\n"
                  - _continue_ = "dns=CN=$ADFSDecrypting
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - '&"'
                  - "\n"
                  - "\n"
                  - '[RequestAttributes]'
                  - "\n"
                  - CertificateTemplate = WebServer
                  - "\n"
                  - '"@'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CertificateRequestTemplateDecrypting.inf" -ItemType "File" -Value $CertificateRequestDecrypting -Force
                  - "\n"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $dc01 -Port 5985).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "AUTHENTICATE"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter08bNetBiosName'
                  - \Administrator"
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $os = (Get-CimInstance Win32_OperatingSystem).Caption
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE ADFS DNS RECORD"
                  - "\n"
                  - $ADFSAddr = (Get-NetAdapter | Get-NetIPAddress -AddressFamily IPV4).IpAddress
                  - "\n"
                  - $ADFSZoneName = "
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - >-
                    Invoke-Command -Computer $dc01 -ScriptBlock { Add-DnsServerResourceRecordA -Name $Using:ADFSName -ZoneName $Using:ADFSZoneName -AllowUpdateAny -IPv4Address $Using:ADFSAddr -TimeToLive
                    01:00:00  -ErrorAction:Ignore; Restart-Service DNS } -Credential $credential
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE MANAGED SERVICE ACCOUNT FOR ADFS"
                  - "\n"
                  - $MsaAccount = "
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - '"'
                  - "\n"
                  - $MsaDNS = "
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - $MsaPrincipalName = "http/
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - '$MsaSPNHost = "host/" + '
                  - $ADFSName
                  - ' + ".'
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - $MsaSPNUsr = "
                  - !Ref 'Parameter08bNetBiosName'
                  - \
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - $"
                  - "\n"
                  - >-
                    Invoke-Command -Computer $dc01 -ScriptBlock { Add-KdsRootKey -EffectiveTime ((get-date).AddHours(-10)); New-ADServiceAccount $Using:MsaAccount -DNSHostName $Using:MsaDNS -ServicePrincipalNames
                    $Using:MsaPrincipalName; Setspn -s $Using:MsaSPNHost $Using:MsaSPNUsr; repadmin /syncall } -Credential $credential
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL ADFS CERTIFICATE"
                  - "\n"
                  - $SubordinateCA = "
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - \
                  - !Ref 'Parameter10aSubordinateCAName'
                  - '"'
                  - "\n"
                  - $SubordinateDNS = "
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter08aDNSDomainName'
                  - '"'
                  - "\n"
                  - $LoopCounterD = 0
                  - "\n"
                  - $CAConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CAConnection = (Test-NetConnection -ComputerName $SubordinateDNS -Port 135).TcpTestSucceeded
                  - "\n"
                  - If ($CAConnection -Match "True"){
                  - "\n"
                  - gpupdate /force
                  - "\n"
                  - certreq -new C:\cfn\CertificateRequestTemplate.inf C:\cfn\CertificateRequest.req
                  - "\n"
                  - $CertificateSubmit = (certreq -config $SubordinateCA -submit C:\cfn\CertificateRequest.req C:\cfn\CertificateIssued.cer)
                  - "\n"
                  - certreq -accept C:\cfn\CertificateIssued.cer >> C:\cfn\CertificateInstalled.log
                  - "\n"
                  - "\n"
                  - certreq -new C:\cfn\CertificateRequestTemplateSigning.inf C:\cfn\CertificateRequestSigning.req
                  - "\n"
                  - $CertificateSubmit = (certreq -config $SubordinateCA -submit C:\cfn\CertificateRequestSigning.req C:\cfn\CertificateIssuedSigning.cer)
                  - "\n"
                  - certreq -accept C:\cfn\CertificateIssuedSigning.cer >> C:\cfn\CertificateInstalledSigning.log
                  - "\n"
                  - "\n"
                  - certreq -new C:\cfn\CertificateRequestTemplateDecrypting.inf C:\cfn\CertificateRequestDecrypting.req
                  - "\n"
                  - $CertificateSubmit = (certreq -config $SubordinateCA -submit C:\cfn\CertificateRequestDecrypting.req C:\cfn\CertificateIssuedDecrypting.cer)
                  - "\n"
                  - certreq -accept C:\cfn\CertificateIssuedDecrypting.cer >> C:\cfn\CertificateInstalledDecrypting.log
                  - "\n"
                  - "\n"
                  - $ADFSServiceCert = (Get-ChildItem -path cert:\LocalMachine\My | Where-Object Subject -Match $ADFSServiceName).Thumbprint
                  - "\n"
                  - $ADFSDecryptingCert = (Get-ChildItem -path cert:\LocalMachine\My | Where-Object Subject -Match "-Decrypting").Thumbprint
                  - "\n"
                  - $ADFSSigningCert = (Get-ChildItem -path cert:\LocalMachine\My | Where-Object Subject -Match "-Signing").Thumbprint
                  - "\n"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Resolve-DNSName -Name $SubordinateDNS
                  - "\n"
                  - $LoopCounterD++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterD -lt 20)'
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL ADFS"
                  - "\n"
                  - $LoopCounterC = 0
                  - "\n"
                  - $ADFSAccountStatus = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - $ADFSAccountStatus = (Get-ADServiceAccount -Identity $MsaAccount -Credential $credential).Enabled
                  - "\n"
                  - If ($ADFSAccountStatus -Match "True"){
                  - "\n"
                  - $ADFSServiceAccount = $MsaSPNUsr
                  - "\n"
                  - >-
                    Install-AdfsFarm -CertificateThumbprint $ADFSServiceCert -SigningCertificateThumbprint $ADFSSigningCert -DecryptionCertificateThumbprint $ADFSDecryptingCert -FederationServiceName $ADFSServiceName
                    -FederationServiceDisplayName $ADFSDisplayName -GroupServiceAccountIdentifier $ADFSServiceAccount -Credential $credential
                  - "\n"
                  - Write-Output "INITIATE SIGNON PAGE AND ENABLE RELAY STATE"
                  - "\n"
                  - If ($os -NotMatch "Microsoft Windows Server 2012"){
                  - "\n"
                  - Set-AdfsProperties -EnableIdPInitiatedSignonPage $true
                  - "\n"
                  - Set-AdfsProperties -EnableRelayStateForIdpInitiatedSignOn $true
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - $ADFSConfigFile = "C:\Windows\ADFS\Microsoft.IdentityServer.Servicehost.exe.config"
                  - "\n"
                  - $RelayStateString = @"
                  - "\n"
                  - <microsoft.identityServer.web>`r
                  - "\n"
                  - '    <useRelayStateForIdpInitiatedSignOn enabled="true" />'
                  - "\n"
                  - '"@'
                  - "\n"
                  - $ADFSConfigFileContent = (Get-Item -Path $ADFSConfigFile | Get-Content -Raw)
                  - "\n"
                  - $ADFSNEWConfigFileContent = $ADFSConfigFileContent -Replace "<microsoft.identityServer.web>",$RelayStateString
                  - "\n"
                  - Rename-Item -Path $ADFSConfigFile -NewName "Microsoft.IdentityServer.Servicehost.exe.config.BKP.CFN"
                  - "\n"
                  - New-Item -ItemType "File" -Path $ADFSConfigFile -Value $ADFSNEWConfigFileContent -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - Restart-Service adfssrv
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterC++
                  - "\n"
                  - '} While ($LoopCounterC -lt 20)'
                  - "\n"
                  - "\n"
                  - $LoopCounterB = 0
                  - "\n"
                  - Do {
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Resolve-DNSName -Name "$ADFSName.
                  - !Ref 'Parameter08aDNSDomainName'
                  - '" -Server '
                  - !Ref 'Parameter08fDomainController01IP'
                  - "\n"
                  - $ADFSStatus = (Invoke-WebRequest -URI $URL -UseBasicParsing -Credential $credential).StatusCode
                  - "\n"
                  - If ($ADFSStatus -Match "200"){
                  - "\n"
                  - Write-Output "CREATE RELYING PART TRUST"
                  - "\n"
                  - $RelyingPartyTrust = "Amazon Web Services"
                  - "\n"
                  - Add-ADFSRelyingPartyTrust -Name $RelyingPartyTrust -MetadataURL "https://signin.aws.amazon.com/static/saml-metadata.xml" -MonitoringEnabled:$true -AutoUpdateEnabled:$true
                  - "\n"
                  - if ($os -NotMatch "Microsoft Windows Server 2012") {Set-AdfsRelyingPartyTrust -TargetName $RelyingPartyTrust -AccessControlPolicyName "Permit Everyone"}
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE IAM IDP PROVIDER"
                  - "\n"
                  - $SAMLProviderName = "
                  - !Ref 'AWS::StackName'
                  - -ADFS-
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $SAMLMetaDataDoc = (Invoke-WebRequest -URI $URL -UseBasicParsing -Credential $credential).Content
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "federationmetadata.xml.log" -ItemType "File" -Value $SAMLMetaDataDoc -Force
                  - "\n"
                  - $IDPArn = (New-IAMSAMLProvider -Name $SAMLProviderName -SAMLMetadataDocument $SAMLMetaDataDoc -Select *).SAMLProviderArn
                  - "\n"
                  - "\n"
                  - Write-Output "CONFIGURE TRUSTED POLICY FOR ADMINISTRATIVE ACCESS ROLE VIA ADFS"
                  - "\n"
                  - $TrustPolicyTemplate = @"
                  - "\n"
                  - '{'
                  - "\n"
                  - '"Version": "2012-10-17",'
                  - "\n"
                  - '"Statement": ['
                  - "\n"
                  - '{'
                  - "\n"
                  - '"Effect": "Allow",'
                  - "\n"
                  - '"Principal": {'
                  - "\n"
                  - '"Federated": "REPLACE-IDP-ARN"'
                  - "\n"
                  - '},'
                  - "\n"
                  - '"Action": "sts:AssumeRoleWithSAML",'
                  - "\n"
                  - '"Condition": {'
                  - "\n"
                  - '"StringEquals": {'
                  - "\n"
                  - '"SAML:aud": "https://signin.aws.amazon.com/saml"'
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - ']'
                  - "\n"
                  - '}'
                  - "\n"
                  - '"@'
                  - "\n"
                  - "\n"
                  - $TrustPolicy = $TrustPolicyTemplate -replace "REPLACE-IDP-ARN",$IDPArn
                  - "\n"
                  - 'Update-IAMAssumeRolePolicy -RoleName '
                  - !Ref 'RoleADFSAdminAccess'
                  - ' -PolicyDocument $TrustPolicy'
                  - "\n"
                  - 'Update-IAMAssumeRolePolicy -RoleName '
                  - !Ref 'RoleADFSAppStream'
                  - ' -PolicyDocument $TrustPolicy'
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE ADFS RULES"
                  - "\n"
                  - $IDPArnForRules = $IDPArn -replace '
                  - !Ref 'AWS::AccountId'
                  - ''',''$1'''
                  - "\n"
                  - $TemporaryRules = @'
                  - "\n"
                  - '@RuleTemplate = "MapClaims"'
                  - "\n"
                  - '@RuleName = "Name ID"'
                  - "\n"
                  - >-
                    c:[Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname"] => issue(Type = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier", Issuer
                    = c.Issuer, OriginalIssuer = c.OriginalIssuer, Value = c.Value, ValueType = c.ValueType, Properties["http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/format"] = "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent");
                  - "\n"
                  - "\n"
                  - '@RuleTemplate = "LdapClaims"'
                  - "\n"
                  - '@RuleName = "Session Name"'
                  - "\n"
                  - >-
                    c:[Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname", Issuer == "AD AUTHORITY"] => issue(store = "Active Directory", types = ("https://aws.amazon.com/SAML/Attributes/RoleSessionName"),
                    query = ";userPrincipalName;{0}", param = c.Value);
                  - "\n"
                  - "\n"
                  - '@RuleName = "Get AD Groups"'
                  - "\n"
                  - >-
                    c:[Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname", Issuer == "AD AUTHORITY"] => add(store = "Active Directory", types = ("http://temp/variable"),
                    query = ";tokenGroups;{0}", param = c.Value);
                  - "\n"
                  - "\n"
                  - '@RuleName = "Roles"'
                  - "\n"
                  - >-
                    c:[Type == "http://temp/variable", Value =~ "(?i)^AWS-([^d]{12})"] => issue(Type = "https://aws.amazon.com/SAML/Attributes/Role", Value = RegExReplace(c.Value, "AWS-([^d]{12})-", "REPLACE-IDP-ARN-FOR-RULES,arn:aws:iam::$1:role/"));
                  - "\n"
                  - '''@'
                  - "\n"
                  - "\n"
                  - $Rules = $TemporaryRules -replace "REPLACE-IDP-ARN-FOR-RULES",$IDPArnForRules
                  - "\n"
                  - Set-ADFSRelyingPartyTrust -TargetName $RelyingPartyTrust -IssuanceTransformRules $Rules
                  - "\n"
                  - if ($os -Match "Microsoft Windows Server 2012") {
                  - "\n"
                  - $AuthotizationRulesW12 = @'
                  - "\n"
                  - '@RuleName = "Permit Access to All Users"'
                  - "\n"
                  - => issue(Type = "http://schemas.microsoft.com/authorization/claims/permit", Value = "true");
                  - "\n"
                  - '''@'
                  - "\n"
                  - Set-AdfsRelyingPartyTrust -TargetName $RelyingPartyTrust -IssuanceAuthorizationRules $AuthotizationRulesW12
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "ADD ADMINISTRATOR TO AD GROUP MAPPING TO THE IAM ROLE VIA FEDERATION"
                  - "\n"
                  - $DN = (Get-ADDomain).DistinguishedName
                  - "\n"
                  - $ResourcesOU = "OU=
                  - !Ref 'Parameter08bNetBiosName'
                  - '," + $DN'
                  - "\n"
                  - $GroupsOU = "OU=Groups," + $ResourcesOU
                  - "\n"
                  - $ADgroupName = "AWS-
                  - !Ref 'AWS::AccountId'
                  - '-'
                  - !Ref 'RoleADFSAdminAccess'
                  - '"'
                  - "\n"
                  - Set-ADUser -Identity administrator -UserPrincipalName administrator@
                  - !Ref 'Parameter08aDNSDomainName'
                  - ' -Credential $credential'
                  - "\n"
                  - >-
                    New-ADGroup -Name $ADgroupName -SamAccountName $ADgroupName -GroupCategory Security -GroupScope Global -Path $GroupsOU -Description "Allow Administrative access to AWS via ADFS" -Credential
                    $credential
                  - "\n"
                  - Add-ADGroupMember -Identity $ADGroupName -Members Administrator -Credential $credential
                  - "\n"
                  - $ADgroupName = "AWS-
                  - !Ref 'AWS::AccountId'
                  - '-'
                  - !Ref 'RoleADFSAppStream'
                  - '"'
                  - "\n"
                  - >-
                    New-ADGroup -Name $ADgroupName -SamAccountName $ADgroupName -GroupCategory Security -GroupScope Global -Path $GroupsOU  -Description "Allow users to connnect to AppStream instances via
                    ADFS" -Credential $credential
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - $LoopCounterB++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterB -lt 20)'
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
          commands:
            '01-PrepareADFS':
              command: Powershell.exe -Command C:\cfn\01-PrepareADFS.ps1
              waitAfterCompletion: forever
            '02-AddToDomain':
              command: Powershell.exe -Command C:\cfn\02-AddToDomain.ps1
              waitAfterCompletion: forever
            '03-InstallADFS':
              command: Powershell.exe -Command C:\cfn\03-InstallADFS.ps1
            99-Signaling:
              command: Powershell.exe -Command c:\cfn\99-Signaling.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'Parameter04aInstanceAMI'
      IamInstanceProfile: !Ref 'InstanceProfileForMemberServers'
      KeyName: !Ref 'Parameter03aKeyPair'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .
              - !Ref 'Parameter12aADFSName'
      InstanceType: !Ref 'Parameter04bInstanceType'
      NetworkInterfaces:
        - AssociatePublicIpAddress: !If
            - ADFSTypePublic
            - 'true'
            - 'false'
          DeviceIndex: '0'
          GroupSet: !If
            - ADFSTypePublic
            - - !Ref 'Resource23bSecurityGroupPrivateNetwork'
              - !Ref 'Resource23cSecurityInboundHTTP'
            - - !Ref 'Resource23bSecurityGroupPrivateNetwork'
          SubnetId: !If
            - ADFSTypePublic
            - !Ref 'Resource02PublicSubnet01'
            - !Ref 'Resource04PrivateSubnet01'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackId'
            - ' -r Resource32ADFS '
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  Resource36bADFSRecord:
    DependsOn: Resource11cEIPAssoc
    Condition: UpdateR53
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'Parameter12fHostZoneID'
      Name: !Join
        - ''
        - - !Ref 'Parameter12bFederationServiceName'
          - .
          - !Ref 'Parameter08aDNSDomainName'
      ResourceRecords:
        - !GetAtt 'Resource32ADFS.PublicIp'
      TTL: '300'
      Type: A
  Resource34AppSDirectoryConfig:
    DependsOn: Resource25DomainController02
    Condition: CreateAppStream
    Type: AWS::AppStream::DirectoryConfig
    Properties:
      DirectoryName: !Ref 'Parameter08aDNSDomainName'
      OrganizationalUnitDistinguishedNames:
        - !Join
          - ''
          - - OU=AWS-AppStream,OU=
            - !Ref 'Parameter08bNetBiosName'
            - ','
            - !GetAtt 'Resource39DirectoryDN.Value'
      ServiceAccountCredentials:
        AccountName: !Join
          - ''
          - - !Ref 'Parameter08bNetBiosName'
            - \
            - !Ref 'Parameter13bAppStreamSvcAccount'
        AccountPassword: !Join
          - ''
          - - '{{resolve:secretsmanager:'
            - !Ref 'PasswordAppStream'
            - :SecretString:password}}
  Resource35AppSStack01:
    DependsOn: Resource34AppSDirectoryConfig
    Condition: CreateAppStream
    Type: AWS::AppStream::Stack
    Properties:
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .AppStreamStack
      ApplicationSettings:
        Enabled: !Ref 'Parameter20hStackPersistentSettings'
        SettingsGroup: !Join
          - ''
          - - !Ref 'AWS::StackName'
            - .SettingsGroup
      StorageConnectors:
        - ConnectorType: HOMEFOLDERS
      UserSettings:
        - Action: CLIPBOARD_COPY_FROM_LOCAL_DEVICE
          Permission: ENABLED
        - Action: CLIPBOARD_COPY_TO_LOCAL_DEVICE
          Permission: ENABLED
        - Action: FILE_DOWNLOAD
          Permission: ENABLED
        - Action: FILE_UPLOAD
          Permission: ENABLED
        - Action: PRINTING_TO_LOCAL_DEVICE
          Permission: ENABLED
  Resource36AppSFleet01:
    DependsOn: Resource35AppSStack01
    Condition: CreateAppStream
    Type: AWS::AppStream::Fleet
    Properties:
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .AppStreamFleet
      DisplayName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .AppStreamFleet
      DomainJoinInfo:
        DirectoryName: !Ref 'Parameter08aDNSDomainName'
        OrganizationalUnitDistinguishedName: !Join
          - ''
          - - OU=AWS-AppStream,OU=
            - !Ref 'Parameter08bNetBiosName'
            - ','
            - !GetAtt 'Resource39DirectoryDN.Value'
      ImageName: !Ref 'Parameter20aAppStreamImage'
      InstanceType: !Ref 'Parameter20bAppStreamInstanceType'
      FleetType: !Ref 'Parameter20cAppStreamFleetType'
      ComputeCapacity:
        DesiredInstances: !Ref 'Parameter20fAppStreamCapacity'
      VpcConfig:
        SubnetIds: !If
          - AppStreamNetwork
          - - !Ref 'Resource07aVDISubnet01'
            - !Ref 'Resource07bVDISubnet02'
          - - !Ref 'Resource07cVDISubnet03'
            - !Ref 'Resource07dVDISubnet04'
        SecurityGroupIds:
          - !Ref 'Resource23dSecurityGroupAppStream'
      StreamView: !Ref 'Parameter20dFleetStreamView'
      MaxUserDurationInSeconds: '57600'
      DisconnectTimeoutInSeconds: '900'
      IdleDisconnectTimeoutInSeconds: '900'
      EnableDefaultInternetAccess: !If
        - AppStreamNetwork
        - false
        - true
    CreationPolicy:
      StartFleet: !Ref 'Parameter20gAppSFleetStart'
  Resource37StackFleetAssociation:
    Condition: CreateAppStream
    Type: AWS::AppStream::StackFleetAssociation
    Properties:
      FleetName: !Ref 'Resource36AppSFleet01'
      StackName: !Ref 'Resource35AppSStack01'
    DependsOn:
      - Resource36AppSFleet01
      - Resource35AppSStack01
  Resource39DirectoryDN:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: NO_VALUE
  Resource39ADConnectorID:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: NO_VALUE
  Resource39WorkspacesRegistrationCode:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: NO_VALUE
  Resource39WorkmailOrgID:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: NO_VALUE
  Resource39WorkmailURL:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: NO_VALUE
  Resource40FSx01:
    Type: AWS::FSx::FileSystem
    DependsOn: Resource25DomainController02
    Condition: CreateFSx
    Properties:
      FileSystemType: WINDOWS
      StorageCapacity: !Ref 'Parameter21bStorageCapacity'
      StorageType: !Ref 'Parameter21cStorageType'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .
              - !Ref 'Parameter21eTagName'
      SubnetIds: !If
        - FSxMultiAZ
        - - !Ref 'Resource04PrivateSubnet01'
          - !Ref 'Resource05PrivateSubnet02'
        - - !Ref 'Resource04PrivateSubnet01'
      SecurityGroupIds:
        - !Ref 'Resource23bSecurityGroupPrivateNetwork'
      WindowsConfiguration:
        ThroughputCapacity: !Ref 'Parameter21dThroughput'
        DeploymentType: !Ref 'Parameter21aDeployType'
        PreferredSubnetId: !If
          - FSxMultiAZ
          - !Ref 'Resource04PrivateSubnet01'
          - !Ref 'AWS::NoValue'
        SelfManagedActiveDirectoryConfiguration:
          DnsIps:
            - !Ref 'Parameter08fDomainController01IP'
            - !Ref 'Parameter08hDomainController02IP'
          DomainName: !Ref 'Parameter08aDNSDomainName'
          OrganizationalUnitDistinguishedName: !Join
            - ''
            - - OU=AWS-FSx,OU=
              - !Ref 'Parameter08bNetBiosName'
              - ','
              - !GetAtt 'Resource39DirectoryDN.Value'
          UserName: !Ref 'Parameter21gFSxSvcAccount'
          Password: !Ref 'Parameter07aAdministratorPassword'
  Resource41Workspace:
    Type: AWS::WorkSpaces::Workspace
    DependsOn: Resource25DomainController02
    Condition: CreateWorkspace
    Properties:
      BundleId: !Ref 'Parameter24aBundleId'
      DirectoryId: !GetAtt 'Resource39ADConnectorID.Value'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .Workspace
      UserName: Administrator
      WorkspaceProperties:
        ComputeTypeName: !Ref 'Parameter24bComputeType'
        RunningMode: !Ref 'Parameter24cRunMode'
  ManagedPolicyDeploymentPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy with required permissions for CFN Stack deployment. This policy can be detached from the IAM role after deployment
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: '*'
            Condition:
              StringEquals:
                secretsmanager:ResourceTag/aws:cloudformation:stack-name: !Ref 'AWS::StackName'
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:PutParameter
            Resource:
              - !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :parameter/
                  - !Ref 'CWAgentAdvanced'
              - !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :parameter/
                  - !Ref 'CWAgentBasic'
              - !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :parameter/
                  - !Ref 'CWAgentOnlyEvents'
              - !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :parameter/
                  - !Ref 'CWAgentOnlyMetrics'
              - !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :parameter/
                  - !Ref 'Resource39ADConnectorID'
              - !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :parameter/
                  - !Ref 'Resource39DirectoryDN'
              - !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :parameter/
                  - !Ref 'Resource39WorkmailOrgID'
              - !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :parameter/
                  - !Ref 'Resource39WorkmailURL'
              - !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :parameter/
                  - !Ref 'Resource39WorkspacesRegistrationCode'
          - Effect: Allow
            Action:
              - ssm:SendCommand
            Resource: '*'
          - Effect: Allow
            Action:
              - iam:CreateSAMLProvider
              - iam:Get-SAMLProvider
              - iam:ListSAMLProviders
              - iam:UpdateSAMLProvider
            Resource:
              - !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - :saml-provider/
                  - !Ref 'AWS::StackName'
                  - -ADFS-*
          - Effect: Allow
            Action:
              - iam:UpdateAssumeRolePolicy
            Resource:
              - !GetAtt 'RoleADFSAdminAccess.Arn'
              - !GetAtt 'RoleADFSAppStream.Arn'
          - Action:
              - s3:List*
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'Parameter08dBucketName'
            Effect: Allow
          - Action:
              - s3:Get*
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'Parameter08dBucketName'
                  - /
                  - !Ref 'Parameter08eFilePath'
            Effect: Allow
          - Effect: Allow
            Action:
              - workspaces:*
              - ds:*
              - iam:PassRole
              - iam:GetRole
              - iam:CreateRole
              - iam:PutRolePolicy
              - kms:ListAliases
              - kms:ListKeys
              - ec2:CreateNetworkInterface
              - ec2:CreateTags
              - ec2:CreateSecurityGroup
              - ec2:DescribeInternetGateways
              - ec2:DescribeSecurityGroups
              - ec2:DescribeRouteTables
              - ec2:DescribeVpcs
              - ec2:DescribeSubnets
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeAvailabilityZones
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
              - workdocs:RegisterDirectory
              - workdocs:AddUserToGroup
            Resource: '*'
          - Effect: Allow
            Action:
              - workmail:CreateOrganization
              - workmail:DescribeOrganization
              - workmail:RegisterToWorkMail
              - ses:DescribeActiveReceiptRuleSet
              - ses:VerifyDomainIdentity
              - ses:SetIdentityEmailNotificationEnabled
              - ses:VerifyDomainDkim
              - ses:GetIdentityDkimAttributes
              - ses:PutIdentityPolicy
              - ses:CreateReceiptRuleSet
              - ses:CreateReceiptRule
              - ses:SetActiveReceiptRuleSet
              - ses:UpdateReceiptRule
              - ses:GetIdentityVerificationAttributes
              - kms:DescribeKey
              - kms:CreateGrant
              - kms:Decrypt
              - ds:CreateAlias
              - ds:DescribeDirectories
              - route53:GetHostedZone
            Resource: '*'
      Roles:
        - !Ref 'RoleMemberServers'
        - !Ref 'RoleDomainControllers'
  ManagedPolicySSMSessionManager:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy to enable Session Manager connection and store logs in S3
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:UpdateInstanceInformation
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:GetEncryptionConfiguration
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::REPLACE-WITH-BUCKET-NAME
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - arn:aws:s3:::REPLACE-WITH-BUCKET-NAME/*
      Roles:
        - !Ref 'RoleMemberServers'
  ManagedPolicyEnableDomainJoin:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy to enable domain join during EC2 launch
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ds:CreateComputer
              - ds:DescribeDirectories
            Resource: '*'
      Roles:
        - !Ref 'RoleDomainControllers'
        - !Ref 'RoleMemberServers'
  ManagedPolicyCloudWatchAgentServerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy to enable instance to send logs and metrics to CloudWatch
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - ec2:DescribeTags
              - logs:PutLogEvents
              - logs:DescribeLogStreams
              - logs:DescribeLogGroups
              - logs:CreateLogStream
              - logs:CreateLogGroup
            Resource: '*'
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*
      Roles:
        - !Ref 'RoleDomainControllers'
        - !Ref 'RoleMemberServers'
  ManagedPolicyAppStreamAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy to allow access to AppStream
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: appstream:Stream
            Resource: !Join
              - ''
              - - 'arn:aws:appstream:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - :stack/*
            Condition:
              StringEquals:
                appstream:userId: ${saml:sub}
                saml:sub_type: persistent
      Roles:
        - !Ref 'RoleADFSAppStream'
  RoleADFSAdminAccess:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  RoleADFSAppStream:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
  RoleDomainControllers:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMPatchAssociation
  InstanceProfileForDCs:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'RoleDomainControllers'
  RoleMemberServers:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMPatchAssociation
  InstanceProfileForMemberServers:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'RoleMemberServers'
  PasswordDomainAdministrator:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Password - Domain Administrator
      SecretString: !Join
        - ''
        - - '{ "domain": "'
          - !Ref 'Parameter08bNetBiosName'
          - '"'
          - ' ,"username": "Administrator", '
          - '"password": "'
          - !Ref 'Parameter07aAdministratorPassword'
          - '" }'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .Administrator
  PasswordSafeModeAD:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Password - Active Directory Safe Mode
      SecretString: !Join
        - ''
        - - '{ "domain": "'
          - !Ref 'Parameter08bNetBiosName'
          - '",'
          - '"safemodepassword": "'
          - !Ref 'Parameter07bSafeModePassword'
          - '" }'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .SafeModePassword
  PasswordADConnector:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Password - AD Connector Service Account
      GenerateSecretString:
        SecretStringTemplate: !Join
          - ''
          - - '{ "domain": "'
            - !Ref 'Parameter08bNetBiosName'
            - '",'
            - '"username":"'
            - !Ref 'Parameter08lADConnectorUSR'
            - '"}'
        GenerateStringKey: Password
        PasswordLength: 24
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .
              - !Ref 'Parameter08lADConnectorUSR'
  PasswordAppStream:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Password - AppStream Service Account
      GenerateSecretString:
        SecretStringTemplate: !Join
          - ''
          - - '{ "domain": "'
            - !Ref 'Parameter08bNetBiosName'
            - '"'
            - ' ,"username": "'
            - !Ref 'Parameter13bAppStreamSvcAccount'
            - '" }'
        GenerateStringKey: password
        PasswordLength: 18
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .AppStreamServiceAccount
  CWAgentAdvanced:
    Type: AWS::SSM::Parameter
    Properties:
      Tier: Advanced
      Type: String
      Description: CloudWatch Client Installation - System and Application Logs and Advanced Performance Metrics
      Value: !Join
        - ''
        - - '{'
          - "\n"
          - "\t\"logs\": {"
          - "\n"
          - "\t\t\"logs_collected\": {"
          - "\n"
          - "\t\t\t\"windows_events\": {"
          - "\n"
          - "\t\t\t\t\"collect_list\": ["
          - "\n"
          - "\t\t\t\t\t{"
          - "\n"
          - "\t\t\t\t\t\t\"event_format\": \"text\","
          - "\n"
          - "\t\t\t\t\t\t\"event_levels\": ["
          - "\n"
          - "\t\t\t\t\t\t\t\"INFORMATION\","
          - "\n"
          - "\t\t\t\t\t\t\t\"WARNING\","
          - "\n"
          - "\t\t\t\t\t\t\t\"ERROR\","
          - "\n"
          - "\t\t\t\t\t\t\t\"CRITICAL\""
          - "\n"
          - "\t\t\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\t\t\"event_name\": \"Application\","
          - "\n"
          - "\t\t\t\t\t\t\t\"log_group_name\": \""
          - !Ref 'AWS::StackName'
          - -Servers-ApplicationEvents"
          - "\n"
          - "\t\t\t\t\t},"
          - "\n"
          - "\t\t\t\t\t{"
          - "\n"
          - "\t\t\t\t\t\t\"event_format\": \"text\","
          - "\n"
          - "\t\t\t\t\t\t\"event_levels\": ["
          - "\n"
          - "\t\t\t\t\t\t\t\"INFORMATION\","
          - "\n"
          - "\t\t\t\t\t\t\t\"WARNING\","
          - "\n"
          - "\t\t\t\t\t\t\t\"ERROR\","
          - "\n"
          - "\t\t\t\t\t\t\t\"CRITICAL\""
          - "\n"
          - "\t\t\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\t\t\"event_name\": \"System\","
          - "\n"
          - "\t\t\t\t\t\t\t\"log_group_name\": \""
          - !Ref 'AWS::StackName'
          - -Servers-SystemEvents"
          - "\n"
          - "\t\t\t\t\t},"
          - "\n"
          - "\t\t\t\t\t{"
          - "\n"
          - "\t\t\t\t\t\t\"event_format\": \"text\","
          - "\n"
          - "\t\t\t\t\t\t\t\"event_levels\": ["
          - "\n"
          - "\t\t\t\t\t\t\t\"INFORMATION\","
          - "\n"
          - "\t\t\t\t\t\t\t\"WARNING\","
          - "\n"
          - "\t\t\t\t\t\t\t\"ERROR\","
          - "\n"
          - "\t\t\t\t\t\t\t\"CRITICAL\""
          - "\n"
          - "\t\t\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\t\t\"event_name\": \"Security\","
          - "\n"
          - "\t\t\t\t\t\t\t\"log_group_name\": \""
          - !Ref 'AWS::StackName'
          - -Servers-SecurityEvents"
          - "\n"
          - "\t\t\t\t\t}"
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t}"
          - "\n"
          - "\t\t}"
          - "\n"
          - "\t},"
          - "\n"
          - "\t\"metrics\": {"
          - "\n"
          - "\t\t\"append_dimensions\": {"
          - "\n"
          - "\t\t\t\"AutoScalingGroupName\": \"${aws:AutoScalingGroupName}\","
          - "\n"
          - "\t\t\t\"ImageId\": \"${aws:ImageId}\","
          - "\n"
          - "\t\t\t\"InstanceId\": \"${aws:InstanceId}\","
          - "\n"
          - "\t\t\t\"InstanceType\": \"${aws:InstanceType}\""
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\"metrics_collected\": {"
          - "\n"
          - "\t\t\t\"LogicalDisk\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"% Free Space\","
          - "\n"
          - "\t\t\t\t\t\"Avg. Disk sec/Transfer\","
          - "\n"
          - "\t\t\t\t\t\"Avg. Disk sec/Read\","
          - "\n"
          - "\t\t\t\t\t\"Avg. Disk sec/Write\","
          - "\n"
          - "\t\t\t\t\t\"Avg. Disk Queue Length\","
          - "\n"
          - "\t\t\t\t\t\"Disk Transfers/sec\","
          - "\n"
          - "\t\t\t\t\t\"Disk Reads/sec\","
          - "\n"
          - "\t\t\t\t\t\"Disk Writes/sec\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"Memory\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"% Committed Bytes In Use\","
          - "\n"
          - "\t\t\t\t\t\"Available Mbytes\","
          - "\n"
          - "\t\t\t\t\t\"Free System Page Table Entries\","
          - "\n"
          - "\t\t\t\t\t\"Pool Nonpaged Bytes\","
          - "\n"
          - "\t\t\t\t\t\"Pool Paged Bytes\""
          - "\n"
          - "\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"Paging File\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"% Usage\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"PhysicalDisk\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"% Disk Time\","
          - "\n"
          - "\t\t\t\t\t\"Disk Write Bytes/sec\","
          - "\n"
          - "\t\t\t\t\t\"Disk Read Bytes/sec\","
          - "\n"
          - "\t\t\t\t\t\"Disk Writes/sec\","
          - "\n"
          - "\t\t\t\t\t\"Disk Reads/sec\""
          - "\n"
          - "\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"Processor\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"% User Time\","
          - "\n"
          - "\t\t\t\t\t\"% Privileged Time\","
          - "\n"
          - "\t\t\t\t\t\"% Idle Time\","
          - "\n"
          - "\t\t\t\t\t\"% DPC Time\","
          - "\n"
          - "\t\t\t\t\t\"% Processor Time\","
          - "\n"
          - "\t\t\t\t\t\"% Interrupt Time\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"Network Interface\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"Output Queue Length\","
          - "\n"
          - "\t\t\t\t\t\"Packets Outbound Discarded\","
          - "\n"
          - "\t\t\t\t\t\"Packets Outbound Errors\","
          - "\n"
          - "\t\t\t\t\t\"Packets Received Discarded\","
          - "\n"
          - "\t\t\t\t\t\"Packets Received Errors\","
          - "\n"
          - "\t\t\t\t\t\"Offloaded Connections\","
          - "\n"
          - "\t\t\t\t\t\"Packets Received/sec\","
          - "\n"
          - "\t\t\t\t\t\"Packets Sent/sec\","
          - "\n"
          - "\t\t\t\t\t\"Bytes Total/sec\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"Process\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"Handle Count\","
          - "\n"
          - "\t\t\t\t\t\"Thread Count\","
          - "\n"
          - "\t\t\t\t\t\"Private Bytes\","
          - "\n"
          - "\t\t\t\t\t\"Working Set\","
          - "\n"
          - "\t\t\t\t\t\"IO Data Operations/Sec\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t\t]"
          - "\n"
          - "\t\t\t\t},"
          - "\n"
          - "\t\t\t\"System\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"Context Switches/sec\","
          - "\n"
          - "\t\t\t\t\t\"Processor Queue Length\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"TCPv4\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"Connections Established\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60"
          - "\n"
          - "\t\t\t\t},"
          - "\n"
          - "\t\t\t\"TCPv6\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\"Connections Established\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"statsd\": {"
          - "\n"
          - "\t\t\t\t\"metrics_aggregation_interval\": 60,"
          - "\n"
          - "\t\t\t\t\"metrics_collection_interval\": 10,"
          - "\n"
          - "\t\t\t\t\"service_address\": \":8125\""
          - "\n"
          - "\t\t\t}"
          - "\n"
          - "\t\t}"
          - "\n"
          - "\t}"
          - "\n"
          - '}'
          - "\n"
  CWAgentBasic:
    Type: AWS::SSM::Parameter
    Properties:
      Tier: Advanced
      Type: String
      Description: CloudWatch Client Installation - System and Application Logs and Basic Performance Metrics
      Value: !Join
        - ''
        - - '{'
          - "\n"
          - "\t\"logs\": {"
          - "\n"
          - "\t\t\"logs_collected\": {"
          - "\n"
          - "\t\t\t\"windows_events\": {"
          - "\n"
          - "\t\t\t\t\"collect_list\": ["
          - "\n"
          - "\t\t\t\t\t{"
          - "\n"
          - "\t\t\t\t\t\t\"event_format\": \"text\","
          - "\n"
          - "\t\t\t\t\t\t\"event_levels\": ["
          - "\n"
          - "\t\t\t\t\t\t\t\"INFORMATION\","
          - "\n"
          - "\t\t\t\t\t\t\t\"WARNING\","
          - "\n"
          - "\t\t\t\t\t\t\t\"ERROR\","
          - "\n"
          - "\t\t\t\t\t\t\t\"CRITICAL\""
          - "\n"
          - "\t\t\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\t\t\"event_name\": \"Application\","
          - "\n"
          - "\t\t\t\t\t\t\t\"log_group_name\": \""
          - !Ref 'AWS::StackName'
          - -Servers-ApplicationEvents"
          - "\n"
          - "\t\t\t\t\t},"
          - "\n"
          - "\t\t\t\t\t{"
          - "\n"
          - "\t\t\t\t\t\t\"event_format\": \"text\","
          - "\n"
          - "\t\t\t\t\t\t\"event_levels\": ["
          - "\n"
          - "\t\t\t\t\t\t\t\"INFORMATION\","
          - "\n"
          - "\t\t\t\t\t\t\t\"WARNING\","
          - "\n"
          - "\t\t\t\t\t\t\t\"ERROR\","
          - "\n"
          - "\t\t\t\t\t\t\t\"CRITICAL\""
          - "\n"
          - "\t\t\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\t\t\"event_name\": \"System\","
          - "\n"
          - "\t\t\t\t\t\t\t\"log_group_name\": \""
          - !Ref 'AWS::StackName'
          - -Servers-SystemEvents"
          - "\n"
          - "\t\t\t\t\t},"
          - "\n"
          - "\t\t\t\t\t{"
          - "\n"
          - "\t\t\t\t\t\t\"event_format\": \"text\","
          - "\n"
          - "\t\t\t\t\t\t\"event_levels\": ["
          - "\n"
          - "\t\t\t\t\t\t\t\"INFORMATION\","
          - "\n"
          - "\t\t\t\t\t\t\t\"WARNING\","
          - "\n"
          - "\t\t\t\t\t\t\t\"ERROR\","
          - "\n"
          - "\t\t\t\t\t\t\t\"CRITICAL\""
          - "\n"
          - "\t\t\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\t\t\"event_name\": \"Security\","
          - "\n"
          - "\t\t\t\t\t\t\t\"log_group_name\": \""
          - !Ref 'AWS::StackName'
          - -Servers-SecurityEvents"
          - "\n"
          - "\t\t\t\t\t}"
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t}"
          - "\n"
          - "\t\t}"
          - "\n"
          - "\t},"
          - "\n"
          - "\t\"metrics\": {"
          - "\n"
          - "\t\t\"append_dimensions\": {"
          - "\n"
          - "\t\t\t\"AutoScalingGroupName\": \"${aws:AutoScalingGroupName}\","
          - "\n"
          - "\t\t\t\"ImageId\": \"${aws:ImageId}\","
          - "\n"
          - "\t\t\t\"InstanceId\": \"${aws:InstanceId}\","
          - "\n"
          - "\t\t\t\"InstanceType\": \"${aws:InstanceType}\""
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\"metrics_collected\": {"
          - "\n"
          - "\t\t\t\"LogicalDisk\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"% Free Space\""
          - "\n"
          - "\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"Memory\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"Available Mbytes\""
          - "\n"
          - "\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"Paging File\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"% Usage\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"Processor\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"% Processor Time\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"System\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"Processor Queue Length\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\"metrics_collection_interval\": 60"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"statsd\": {"
          - "\n"
          - "\t\t\t\t\"metrics_aggregation_interval\": 60,"
          - "\n"
          - "\t\t\t\t\"metrics_collection_interval\": 10,"
          - "\n"
          - "\t\t\t\t\"service_address\": \":8125\""
          - "\n"
          - "\t\t\t}"
          - "\n"
          - "\t\t}"
          - "\n"
          - "\t}"
          - "\n"
          - '}'
          - "\n"
  CWAgentOnlyEvents:
    Type: AWS::SSM::Parameter
    Properties:
      Tier: Advanced
      Type: String
      Description: CloudWatch Client Installation - Only Event Viewer Logs
      Value: !Join
        - ''
        - - '{'
          - "\n"
          - "\t\"logs\": {"
          - "\n"
          - "\t\t\"logs_collected\": {"
          - "\n"
          - "\t\t\t\"windows_events\": {"
          - "\n"
          - "\t\t\t\t\"collect_list\": ["
          - "\n"
          - "\t\t\t\t\t{"
          - "\n"
          - "\t\t\t\t\t\t\"event_format\": \"text\","
          - "\n"
          - "\t\t\t\t\t\t\"event_levels\": ["
          - "\n"
          - "\t\t\t\t\t\t\t\"INFORMATION\","
          - "\n"
          - "\t\t\t\t\t\t\t\"WARNING\","
          - "\n"
          - "\t\t\t\t\t\t\t\"ERROR\","
          - "\n"
          - "\t\t\t\t\t\t\t\"CRITICAL\""
          - "\n"
          - "\t\t\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\t\t\"event_name\": \"Application\","
          - "\n"
          - "\t\t\t\t\t\t\t\"log_group_name\": \""
          - !Ref 'AWS::StackName'
          - -Servers-ApplicationEvents"
          - "\n"
          - "\t\t\t\t\t},"
          - "\n"
          - "\t\t\t\t\t{"
          - "\n"
          - "\t\t\t\t\t\t\"event_format\": \"text\","
          - "\n"
          - "\t\t\t\t\t\t\"event_levels\": ["
          - "\n"
          - "\t\t\t\t\t\t\t\"INFORMATION\","
          - "\n"
          - "\t\t\t\t\t\t\t\"WARNING\","
          - "\n"
          - "\t\t\t\t\t\t\t\"ERROR\","
          - "\n"
          - "\t\t\t\t\t\t\t\"CRITICAL\""
          - "\n"
          - "\t\t\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\t\t\"event_name\": \"System\","
          - "\n"
          - "\t\t\t\t\t\t\t\"log_group_name\": \""
          - !Ref 'AWS::StackName'
          - -Servers-SystemEvents"
          - "\n"
          - "\t\t\t\t\t},"
          - "\n"
          - "\t\t\t\t\t{"
          - "\n"
          - "\t\t\t\t\t\t\"event_format\": \"text\","
          - "\n"
          - "\t\t\t\t\t\t\"event_levels\": ["
          - "\n"
          - "\t\t\t\t\t\t\t\"INFORMATION\","
          - "\n"
          - "\t\t\t\t\t\t\t\"WARNING\","
          - "\n"
          - "\t\t\t\t\t\t\t\"ERROR\","
          - "\n"
          - "\t\t\t\t\t\t\t\"CRITICAL\""
          - "\n"
          - "\t\t\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\t\t\"event_name\": \"Security\","
          - "\n"
          - "\t\t\t\t\t\t\t\"log_group_name\": \""
          - !Ref 'AWS::StackName'
          - -Servers-SecurityEvents"
          - "\n"
          - "\t\t\t\t\t}"
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t}"
          - "\n"
          - "\t\t}"
          - "\n"
          - "\t}"
          - "\n"
          - '}'
          - "\n"
  CWAgentOnlyMetrics:
    Type: AWS::SSM::Parameter
    Properties:
      Tier: Advanced
      Type: String
      Description: CloudWatch Client Installation - Only Basic Metrics
      Value: !Join
        - ''
        - - '{'
          - "\n"
          - "\t\"metrics\": {"
          - "\n"
          - "\t\t\"append_dimensions\": {"
          - "\n"
          - "\t\t\t\"AutoScalingGroupName\": \"${aws:AutoScalingGroupName}\","
          - "\n"
          - "\t\t\t\"ImageId\": \"${aws:ImageId}\","
          - "\n"
          - "\t\t\t\"InstanceId\": \"${aws:InstanceId}\","
          - "\n"
          - "\t\t\t\"InstanceType\": \"${aws:InstanceType}\""
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\"metrics_collected\": {"
          - "\n"
          - "\t\t\t\"LogicalDisk\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"% Free Space\""
          - "\n"
          - "\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"Memory\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"Available Mbytes\""
          - "\n"
          - "\t\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"Paging File\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"% Usage\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"Processor\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"% Processor Time\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\"metrics_collection_interval\": 60,"
          - "\n"
          - "\t\t\t\t\"resources\": ["
          - "\n"
          - "\t\t\t\t\t\"*\""
          - "\n"
          - "\t\t\t\t]"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"System\": {"
          - "\n"
          - "\t\t\t\t\"measurement\": ["
          - "\n"
          - "\t\t\t\t\t\"Processor Queue Length\""
          - "\n"
          - "\t\t\t\t],"
          - "\n"
          - "\t\t\t\t\"metrics_collection_interval\": 60"
          - "\n"
          - "\t\t\t},"
          - "\n"
          - "\t\t\t\"statsd\": {"
          - "\n"
          - "\t\t\t\t\"metrics_aggregation_interval\": 60,"
          - "\n"
          - "\t\t\t\t\"metrics_collection_interval\": 10,"
          - "\n"
          - "\t\t\t\t\"service_address\": \":8125\""
          - "\n"
          - "\t\t\t}"
          - "\n"
          - "\t\t}"
          - "\n"
          - "\t}"
          - "\n"
          - '}'
          - "\n"
Outputs:
  DomainAdministrator:
    Description: Domain Administrator Account.
    Value: !Join
      - ''
      - - !Ref 'Parameter08bNetBiosName'
        - \Administrator
  DomainAdministratorUPN:
    Condition: CreateADFS
    Description: Credentials to logon via ADFS.
    Value: !Join
      - ''
      - - administrator@
        - !Ref 'Parameter08aDNSDomainName'
  ADFSLogonScreen:
    Condition: CreateADFS
    Description: ADFS logon screen.
    Value: !Join
      - ''
      - - https://
        - !Ref 'Parameter12bFederationServiceName'
        - .
        - !Ref 'Parameter08aDNSDomainName'
        - /adfs/ls/idpinitiatedsignon.aspx
  AdministrativeRole:
    Condition: CreateADFS
    Description: IAM Role for Administrative Access via ADFS.
    Value: !Ref 'RoleADFSAdminAccess'
  AdministrativeADGroup:
    Condition: CreateADFS
    Description: AD Group for Administrative Access via ADFS.
    Value: !Join
      - ''
      - - AWS-
        - !Ref 'AWS::AccountId'
        - '-'
        - !Ref 'RoleADFSAdminAccess'
  AppStreamRole:
    Condition: CreateADFS
    Description: IAM Role for AppStream Access via ADFS.
    Value: !Ref 'RoleADFSAppStream'
  AppStreamADGroup:
    Condition: CreateADFS
    Description: AD Group for AppStream Access via ADFS.
    Value: !Join
      - ''
      - - AWS-
        - !Ref 'AWS::AccountId'
        - '-'
        - !Ref 'RoleADFSAppStream'
  AppStreamRelayState:
    Condition: CreateADFS
    Description: AppStream Relay State URL.
    Value: !Join
      - ''
      - - https://
        - !Ref 'Parameter12bFederationServiceName'
        - .
        - !Ref 'Parameter08aDNSDomainName'
        - /adfs/ls/idpinitiatedsignon.aspx?RelayState=RPID%3Durn%253Aamazon%253Awebservices%26RelayState%3Dhttps%253A%252F%252F
        - appstream2.
        - !Ref 'AWS::Region'
        - .aws.amazon.com%252Fsaml%253Fstack%253D
        - !Ref 'AWS::StackName'
        - .AppStreamStack
        - '%2526accountId%253D'
        - !Ref 'AWS::AccountId'
  FSx:
    Condition: CreateFSx
    Description: FSx file system ID.
    Value: !Ref 'Resource40FSx01'
  Workspaces:
    Condition: CreateWorkspace
    Description: Workspace ID - Domain Administrator.
    Value: !Ref 'Resource41Workspace'
  WorkspacesRegistrationCode:
    Condition: CreateWorkspace
    Description: Workspaces Registration Code.
    Value: !GetAtt 'Resource39WorkspacesRegistrationCode.Value'
  ADConnectorID:
    Condition: CreateADConnector
    Description: AD Connector ID.
    Value: !GetAtt 'Resource39ADConnectorID.Value'
  RemoteDesktop:
    Condition: CreateRDPServer
    Description: Remote Desktop Server - Instance ID.
    Value: !Ref 'Resource26RemoteDesktop'
  SecurityRecommentation:
    Description: Security recommendation to comply with the "Principle of Least Privilege"
    Value: !Join
      - ''
      - - To improve the security of this deployment we recommend to detach the IAM Policy "
        - !Ref 'ManagedPolicyDeploymentPermissions'
        - '" from the following roles: "'
        - !Ref 'RoleDomainControllers'
        - '" and "'
        - !Ref 'RoleMemberServers'
        - '". This IAM Policy is unnecessary for instances normal operation. The permissions in this policy are required only if you are deploying or updating the CloudFormation stack.'
  WorkmailOrganization:
    Condition: CreateWorkmail
    Description: Workmail Organization ID.
    Value: !GetAtt 'Resource39WorkmailOrgID.Value'
  WorkmailURL:
    Condition: CreateWorkmail
    Description: Workmail WebAccess URL.
    Value: !GetAtt 'Resource39WorkmailURL.Value'
