{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Summary: Create VPC, Managed AD or Simple AD, Remote Desktop, Certificate Authority, ADFS, AppStream, Workspaces, Workmail and FSx. EC2 instances can be managed by SSM, including Session Manager, and upload metrics and logs to CloudWatch. Managed AD supports Linux Seamless Domain Join and AD Users Import.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [{
                    "Label": {
                        "default": "Resources Selection"
                    },
                    "Parameters": [
                        "Parameter01aCreateRemoteDesktop",
                        "Parameter01bCreateADConnector",
                        "Parameter01cCreateCA",
                        "Parameter01dCreateADFS",
                        "Parameter01eCreateAppStream",
                        "Parameter01gCreateWorkspaces",
                        "Parameter01hCreateWorkmail",
                        "Parameter01fCreateFSx",
                        "Parameter01gCreateLinux",
                        "Parameter01hInstallCWAgent"
                    ]
                },
                {
                    "Label": {
                        "default": "Availability Zones and Key Pair"
                    },
                    "Parameters": [
                        "Parameter02aAvailabilityZone01",
                        "Parameter02bAvailabilityZone02",
                        "Parameter03aKeyPair"
                    ]
                },
                {
                    "Label": {
                        "default": "EC2 Instance Specification"
                    },
                    "Parameters": [
                        "Parameter04aInstanceAMI",
                        "Parameter04bInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "RDP Settings"
                    },
                    "Parameters": [
                        "Parameter06aRDPName",
                        "Parameter06bTrustedRDPSource"
                    ]
                },
                {
                    "Label": {
                        "default": "Administrative Credentials"
                    },
                    "Parameters": [
                        "Parameter07aAdministratorPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Active Directory Settings"
                    },
                    "Parameters": [
                        "Parameter07bDirectoryServiceType",
                        "Parameter08aDNSDomainName",
                        "Parameter08bNetBiosName",
                        "Parameter08cImportUsers",
                        "Parameter08dBucketName",
                        "Parameter08eFilePath"
                    ]
                },
                {
                    "Label": {
                        "default": "Certificate Authority Settings"
                    },
                    "Parameters": [
                        "Parameter09aRootCAName",
                        "Parameter09bRootCAIP",
                        "Parameter09cRootCAKeyLength",
                        "Parameter09dRootCAHash",
                        "Parameter10aSubordinateCAName",
                        "Parameter10bSubordinateCAIP",
                        "Parameter10cSubordinateCAKeyLength",
                        "Parameter10dSubordinateCAHash"
                    ]
                },
                {
                    "Label": {
                        "default": "ADFS Settings"
                    },
                    "Parameters": [
                        "Parameter12aADFSName",
                        "Parameter12bFederationServiceName",
                        "Parameter12dADFSServiceAccount",
                        "Parameter12dADFSType",
                        "Parameter12eUpdateRoute53",
                        "Parameter12fHostZoneID"
                    ]
                },
                {
                    "Label": {
                        "default": "AppStream Settings"
                    },
                    "Parameters": [
                        "Parameter20aAppStreamImage",
                        "Parameter20bAppStreamInstanceType",
                        "Parameter20cAppStreamFleetType",
                        "Parameter20dFleetStreamView",
                        "Parameter20eAppSNetwork",
                        "Parameter20fAppStreamCapacity",
                        "Parameter20gAppSFleetStart",
                        "Parameter20hStackPersistentSettings",
                        "Parameter13aAppStreamGroup",
                        "Parameter13bAppStreamSvcAccount"
                    ]
                },
                {
                    "Label": {
                        "default": "Workspaces Settings"
                    },
                    "Parameters": [
                        "Parameter24gUsersWorkspaces",
                        "Parameter24aBundleId",
                        "Parameter24bComputeType",
                        "Parameter24cRunMode",
                        "Parameter24hWorkspacesNetwork",
                        "Parameter24iLocalAdmins",
                        "Parameter24eEnableSelfService",
                        "Parameter24dEnableWorkdocs"
                    ]
                },
                {
                    "Label": {
                        "default": "FSx Settings"
                    },
                    "Parameters": [
                        "Parameter21eTagName",
                        "Parameter21aDeployType",
                        "Parameter21bStorageCapacity",
                        "Parameter21cStorageType",
                        "Parameter21dThroughput",
                        "Parameter21fFSxGroup",
                        "Parameter21gFSxSvcAccount"
                    ]
                },
                {
                    "Label": {
                        "default": "Workmail Settings"
                    },
                    "Parameters": [
                        "Parameter26bDirectorAlias",
                        "Parameter26eDNSDomainName",
                        "Parameter26cUpdateR53",
                        "Parameter26dHostedZoneID"
                    ]
                },
                {
                    "Label": {
                        "default": "Linux Seamless Domain Join Settings"
                    },
                    "Parameters": [
                        "Parameter30bLinuxInstanceType",
                        "Parameter30cLinuxType",
                        "Parameter30bTrustedSSHSource",
                        "Parameter30dLinuxDomainJoinGroup",
                        "Parameter30eLinuxDomainJoinUSR"
                    ]
                },
                {
                    "Label": {
                        "default": "VPC Settings"
                    },
                    "Parameters": [
                        "Parameter99aVPCCidrBlock",
                        "Parameter99bPublicSubnetServers01",
                        "Parameter99cPublicSubnetServers02",
                        "Parameter99dPrivateSubnetServers01",
                        "Parameter99ePrivateSubnetServers02",
                        "Parameter99fPublicSubnetVDI01",
                        "Parameter99gPublicSubnetVDI02",
                        "Parameter99hPrivateSubnetVDI01",
                        "Parameter99iPrivateSubnetVDI02"
                    ]
                }
            ],
            "ParameterLabels": {
                "Parameter01aCreateRemoteDesktop": {
                    "default": "Remote Desktop"
                },
                "Parameter01cCreateCA": {
                    "default": "Certificate Authority"
                },
                "Parameter01dCreateADFS": {
                    "default": "ADFS"
                },
                "Parameter01eCreateAppStream": {
                    "default": "AppStream"
                },
                "Parameter01gCreateWorkspaces": {
                    "default": "Workspaces"
                },
                "Parameter01fCreateFSx": {
                    "default": "FSx"
                },
                "Parameter01gCreateLinux": {
                    "default": "Linux"
                },
                "Parameter01hInstallCWAgent": {
                    "default": "CloudWatch Agent"
                },
                "Parameter02aAvailabilityZone01": {
                    "default": "Availability Zone 01"
                },
                "Parameter02bAvailabilityZone02": {
                    "default": "Availability Zone 02"
                },
                "Parameter03aKeyPair": {
                    "default": "Key Pair"
                },
                "Parameter04aInstanceAMI": {
                    "default": "AMI ID"
                },
                "Parameter04bInstanceType": {
                    "default": "Instance Type"
                },
                "Parameter06aRDPName": {
                    "default": "RDP Server Name"
                },
                "Parameter06bTrustedRDPSource": {
                    "default": "IP Allowed To Connect via RDP"
                },
                "Parameter07aAdministratorPassword": {
                    "default": "Domain Administrator Password"
                },
                "Parameter07bDirectoryServiceType": {
                    "default": "Directory Service Type"
                },
                "Parameter08aDNSDomainName": {
                    "default": "Active Directory DNS Name"
                },
                "Parameter08bNetBiosName": {
                    "default": "Active Directory NetBios Name"
                },
                "Parameter08cImportUsers": {
                    "default": "AD Users Import"
                },
                "Parameter08dBucketName": {
                    "default": "S3 Bucket"
                },
                "Parameter08eFilePath": {
                    "default": "CSV File Path"
                },
                "Parameter09aRootCAName": {
                    "default": "Root CA Name"
                },
                "Parameter09cRootCAKeyLength": {
                    "default": "Root CA Key Length"
                },
                "Parameter09dRootCAHash": {
                    "default": "Root CA Hash Algorithm"
                },
                "Parameter10aSubordinateCAName": {
                    "default": "Subordinate CA Name"
                },
                "Parameter10cSubordinateCAKeyLength": {
                    "default": "Subordinate CA Key Length"
                },
                "Parameter10dSubordinateCAHash": {
                    "default": "Subordinate CA Hash Algorithm"
                },
                "Parameter12aADFSName": {
                    "default": "ADFS Server Name"
                },
                "Parameter12bFederationServiceName": {
                    "default": "ADFS Federation Name"
                },
                "Parameter12dADFSServiceAccount": {
                    "default": "ADFS Service Account"
                },
                "Parameter12dADFSType": {
                    "default": "ADFS Accessibility"
                },
                "Parameter12eUpdateRoute53": {
                    "default": "Create ADFS record in Route 53"
                },
                "Parameter12fHostZoneID": {
                    "default": "Route 53 Hosted Zone ID"
                },
                "Parameter20aAppStreamImage": {
                    "default": "AppStream Image Name"
                },
                "Parameter20bAppStreamInstanceType": {
                    "default": "AppStream Instance Type"
                },
                "Parameter20cAppStreamFleetType": {
                    "default": "AppStream Fleet Type"
                },
                "Parameter20dFleetStreamView": {
                    "default": "AppStream Fleet Stream View"
                },
                "Parameter20eAppSNetwork": {
                    "default": "AppStream Network"
                },
                "Parameter20fAppStreamCapacity": {
                    "default": "AppStream Fleet Desired Capacity"
                },
                "Parameter20gAppSFleetStart": {
                    "default": "AppStream Fleet Start"
                },
                "Parameter20hStackPersistentSettings": {
                    "default": "AppStream Stack \"Application Persistence Settings\""
                },
                "Parameter13aAppStreamGroup": {
                    "default": "AppStream Active Directory Group"
                },
                "Parameter13bAppStreamSvcAccount": {
                    "default": "AppStream Active Directory Service Account"
                },
                "Parameter21aDeployType": {
                    "default": "Deployment Type"
                },
                "Parameter21bStorageCapacity": {
                    "default": "Storage Capacity"
                },
                "Parameter21cStorageType": {
                    "default": "Storage Type"
                },
                "Parameter21dThroughput": {
                    "default": "Throughput Capacity"
                },
                "Parameter21eTagName": {
                    "default": "Name"
                },
                "Parameter24aBundleId": {
                    "default": "Bundle ID"
                },
                "Parameter24bComputeType": {
                    "default": "Compute Type"
                },
                "Parameter24cRunMode": {
                    "default": "Running Mode"
                },
                "Parameter24hWorkspacesNetwork": {
                    "default": "Workspaces Network"
                },
                "Parameter24iLocalAdmins": {
                    "default": "Workspaces Local Administrators"
                },
                "Parameter24dEnableWorkdocs": {
                    "default": "Enable Workdocs"
                },
                "Parameter24eEnableSelfService": {
                    "default": "Enable Workspaces Self-Service"
                },
                "Parameter24gUsersWorkspaces": {
                    "default": "Active Directory Users"
                },
                "Parameter01hCreateWorkmail": {
                    "default": "Workmail"
                },
                "Parameter26bDirectorAlias": {
                    "default": "Directory Alias"
                },
                "Parameter26eDNSDomainName": {
                    "default": "Workmail DNS Domain"
                },
                "Parameter26cUpdateR53": {
                    "default": "Update Route 53 Zone"
                },
                "Parameter26dHostedZoneID": {
                    "default": "Route 53 Hosted Zone ID"
                },
                "Parameter30bLinuxInstanceType": {
                    "default": "Instance Type"
                },
                "Parameter30cLinuxType": {
                    "default": "Linux Network"
                },
                "Parameter30bTrustedSSHSource": {
                    "default": "IP Allowed To Connect via SSH"
                },
                "Parameter30dLinuxDomainJoinGroup": {
                    "default": "Seamless Domain Join Group"
                },
                "Parameter30eLinuxDomainJoinUSR": {
                    "default": "Seamless Domain Join Service Account"
                },
                "Parameter99aVPCCidrBlock": {
                    "default": "VPC CIDR"
                },
                "Parameter99bPublicSubnetServers01": {
                    "default": "Public Subnet for EC2 Instances in AZ 01"
                },
                "Parameter99cPublicSubnetServers02": {
                    "default": "Public Subnet for EC2 Instances in AZ 02"
                },
                "Parameter99dPrivateSubnetServers01": {
                    "default": "Private Subnet for EC2 Instances in AZ 01"
                },
                "Parameter99ePrivateSubnetServers02": {
                    "default": "Private Subnet for EC2 Instances in AZ 02"
                },
                "Parameter99fPublicSubnetVDI01": {
                    "default": "Public Subnet for Virtual Desktops Instances in AZ 01"
                },
                "Parameter99gPublicSubnetVDI02": {
                    "default": "Public Subnet for Virtual Desktops Instances in AZ 02"
                },
                "Parameter99hPrivateSubnetVDI01": {
                    "default": "Private Subnet for Virtual Desktops Instances in AZ 01"
                },
                "Parameter99iPrivateSubnetVDI02": {
                    "default": "Private Subnet for Virtual Desktops Instances in AZ 02"
                }
            }
        }
    },
    "Parameters": {
        "Parameter01aCreateRemoteDesktop": {
            "Type": "String",
            "Default": "YES",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Select YES to create a Remote Desktop Server to be the bastion host to the VPC."
        },
        "Parameter01cCreateCA": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Select YES to create a Certificate Authority infrastructure with Standalone Root CA and Enterprise Subordinate CA."
        },
        "Parameter01dCreateADFS": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Select YES to create an ADFS Server. IMPORTANT: ADFS REQUIRES CERTIFICATE AUTHORITY."
        },
        "Parameter01eCreateAppStream": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Select YES to create AppStream infrastructure. IMPORTANT: APPSTREAM REQUIRES ADFS."
        },
        "Parameter01gCreateWorkspaces": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Select YES to enable the Workspaces service and create a workspace for the domain administrator."
        },
        "Parameter01fCreateFSx": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Select YES to create an FSx file system for Windows."
        },
        "Parameter01gCreateLinux": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Select YES to create a Domain-Joined Linux."
        },
        "Parameter01hInstallCWAgent": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "NO",
                "Event Viewer and Advanced Metrics",
                "Event Viewer and Basic Metrics",
                "Only Event Viewer",
                "Only Basic Metrics"
            ],
            "Description": "Select the option to install CloudWatch agent on EC2 instances."
        },
        "Parameter02aAvailabilityZone01": {
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "Description": "Select the Availability Zone 01."
        },
        "Parameter02bAvailabilityZone02": {
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "Description": "Select the Availability Zone 02."
        },
        "Parameter03aKeyPair": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Select an available Key Pair in the region to create the EC2 instances."
        },
        "Parameter04aInstanceAMI": {
            "Type": "String",
            "AllowedPattern": "^ami-.*",
            "Description": "Enter the AMI ID of a \"Windows_Server-20xx-English-Full-Base\" in the region where the resources will be created."
        },
        "Parameter04bInstanceType": {
            "Type": "String",
            "Default": "t2.medium",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "t3.small",
                "t3.medium",
                "t3.large",
                "t3.xlarge",
                "t3.2xlarge",
                "m4.large",
                "m5.large",
                "m4.xlarge",
                "m5.xlarge",
                "m4.2xlarge",
                "m5.2xlarge",
                "c4.large",
                "c5.large",
                "c4.xlarge",
                "c5.xlarge",
                "c4.2xlarge",
                "c5.2xlarge",
                "r4.large",
                "r5.large",
                "r4.xlarge",
                "r5.xlarge",
                "r4.2xlarge",
                "r5.2xlarge"
            ],
            "Description": "Select the instance type. Default: t2.medium"
        },
        "Parameter06aRDPName": {
            "Type": "String",
            "Default": "RDP01",
            "AllowedPattern": "^[a-zA-Z0-9]+$",
            "MinLength": "02",
            "MaxLength": "15",
            "Description": "Enter the name of Remote Desktop Server. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: RDP01"
        },
        "Parameter06bTrustedRDPSource": {
            "Type": "String",
            "Default": "127.0.0.1/32",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$",
            "Description": "Enter the PUBLIC IP ADDRESS authorized to access the Remote Desktop instance. Default: 127.0.0.1/32."
        },
        "Parameter07aAdministratorPassword": {
            "Type": "String",
            "NoEcho": "true",
            "MinLength": "8",
            "MaxLength": "64",
            "AllowedPattern": "(?=^.{8,64}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9\\s])(?=.*[a-z])|(?=.*[^A-Za-z0-9\\s])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\\s]))^.*",
            "Description": "Enter the Domain Administrator password. (Requirements: Passwords must be between 8 and 64 characters, not contain the word \"admin\", and include three of these four categories: lowercase, uppercase, numeric, and special characters.) The password will be stored in Secrets Manager."
        },
        "Parameter07bDirectoryServiceType": {
            "Type": "String",
            "AllowedValues": [
                "Simple AD,Small",
                "Simple AD,Large",
                "Microsoft AD,Standard",
                "Microsoft AD,Enterprise"
            ],
            "Description": "Enter the Directory Service type. Features available for Microsoft AD: Remote Desktop, Certificate Authority, ADFS, AppStream, Workspaces, Workmail, FSx, Linux Seamless Domain Join and AD Users Import. Features Available for Simple AD: Remote Desktop, Workmail and Workspaces."
        },
        "Parameter08aDNSDomainName": {
            "Type": "String",
            "AllowedPattern": "^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$",
            "Default": "corporate.ad.aws",
            "Description": "Enter the Active Directory DNS name. Default: corporate.ad.aws"
        },
        "Parameter08bNetBiosName": {
            "Type": "String",
            "AllowedPattern": "^[a-zA-Z0-9]+$",
            "MinLength": "02",
            "MaxLength": "15",
            "Default": "CORPORATE",
            "Description": "Enter the Active Directory NETBIOS name. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: CORPORATE"
        },
        "Parameter08cImportUsers": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Select YES to import users to Active Directory (Microsoft AD) from a CSV file located in an S3 bucket. The CSV file must have the following Active Directory fields: displayName,givenName,sn,sAMAccountName. Example: John Smith,John,Smith,jsmith"
        },
        "Parameter08dBucketName": {
            "Type": "String",
            "Description": "Enter the S3 bucket name where the CSV file is stored. (NOTE: The S3 bucket needs to be located in the same region where the stack will be created. Ensure that bucket policies don't prevent EC2 from downloading the CSV file.)"
        },
        "Parameter08eFilePath": {
            "Type": "String",
            "Description": "Enter the CSV file path inside the bucket. (Example: folder01/subfolder02/filename.csv)"
        },
        "Parameter09aRootCAName": {
            "Type": "String",
            "Default": "RootCA01",
            "AllowedPattern": "^[a-zA-Z0-9]+$",
            "MinLength": "02",
            "MaxLength": "15",
            "Description": "Enter the ROOT CA name. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: RootCA01"
        },
        "Parameter09cRootCAKeyLength": {
            "Type": "String",
            "Default": "4096",
            "AllowedValues": [
                "4096",
                "2048"
            ],
            "Description": "Select the ROOT CA key length. Default: 4096"
        },
        "Parameter09dRootCAHash": {
            "Type": "String",
            "Default": "SHA256",
            "AllowedValues": [
                "SHA256",
                "SHA384",
                "SHA512"
            ],
            "Description": "Select the ROOT CA hash algorithm. Default: SHA256"
        },
        "Parameter10aSubordinateCAName": {
            "Type": "String",
            "Default": "SubCA01",
            "AllowedPattern": "^[a-zA-Z0-9]+$",
            "MinLength": "02",
            "MaxLength": "15",
            "Description": "Enter the SUBORDINATE CA Name. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: SubCA01"
        },
        "Parameter10cSubordinateCAKeyLength": {
            "Type": "String",
            "Default": "2048",
            "AllowedValues": [
                "4096",
                "2048"
            ],
            "Description": "Select SUBORDINATE CA key length. Default: 2048"
        },
        "Parameter10dSubordinateCAHash": {
            "Type": "String",
            "Default": "SHA256",
            "AllowedValues": [
                "SHA256",
                "SHA384",
                "SHA512"
            ],
            "Description": "Select the SUBORDINATE CA hash algorithm. Default: SHA256"
        },
        "Parameter12aADFSName": {
            "Type": "String",
            "Default": "ADFS01",
            "AllowedPattern": "^[a-zA-Z0-9]+$",
            "MinLength": "02",
            "MaxLength": "15",
            "Description": "Enter the ADFS server name. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: ADFS01"
        },
        "Parameter12bFederationServiceName": {
            "Type": "String",
            "Default": "adfs",
            "AllowedPattern": "^[a-zA-Z0-9]+$",
            "MinLength": "02",
            "MaxLength": "63",
            "Description": "Enter the ADFS Federation Service Name. This string will be combined with the DNS domain specified in \"Active Directory Settings\\Active Directory DNS Name\". (Requirements: ALPHANUMERIC and between 2 and 63 characters.) Default: adfs"
        },
        "Parameter12dADFSServiceAccount": {
            "Type": "String",
            "Default": "FsSvcGmsa",
            "AllowedPattern": "^[a-zA-Z0-9]+$",
            "MinLength": "02",
            "MaxLength": "15",
            "Description": "Enter Managed Service Account (MSA) for ADFS. (Requirements: ALPHANUMERIC and between 2 and 15 characters.) Default: FsSvcGmsa"
        },
        "Parameter12dADFSType": {
            "Type": "String",
            "Default": "VPC",
            "AllowedValues": [
                "VPC",
                "INTERNET"
            ],
            "Description": "Select ADFS accessibility: VPC only or INTERNET. (NOTE: INTERNET requires ADFS with a public FQDN and the respective record in a public DNS.) Default: VPC "
        },
        "Parameter12eUpdateRoute53": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Select YES to create the DNS A record as specified in \"ADFS Settings\\ADFS Federation Name\" in the Route 53 DNS zone specified in \"Active Directory Settings\\Active Directory DNS Name\". (NOTE: Ensure the Route 53 zone is functional and that there is no other records that can conflict with the record that will be created.) Default: NO"
        },
        "Parameter12fHostZoneID": {
            "Type": "String",
            "MinLength": "1",
            "Default": "NOT_SPECIFIED",
            "AllowedPattern": "^[a-zA-Z0-9_]+$",
            "Description": "If you selected YES above, enter the Hosted Zone ID of the Route 53 zone to be updated. Default: NOT_SPECIFIED"
        },
        "Parameter13aAppStreamGroup": {
            "Type": "String",
            "Default": "AWS-AS2FleetMgmt01",
            "AllowedPattern": "^[a-zA-Z0-9-]+$",
            "MinLength": "02",
            "MaxLength": "20",
            "Description": "Enter the name of the Active Directory group to which permissions will be delegated to allow creation of computer accounts by AppStream. (Requirements: ALPHANUMERIC and between 2 and 20 characters.) Default: AWS-AS2FleetMgmt01"
        },
        "Parameter13bAppStreamSvcAccount": {
            "Type": "String",
            "Default": "AWS-AS2SvcUsr01",
            "AllowedPattern": "^[a-zA-Z0-9-]+$",
            "MinLength": "02",
            "MaxLength": "20",
            "Description": "Enter the name of the AppStream Service Account. (Requirements: ALPHANUMERIC and between 2 and 20 characters.) Default: AWS-AS2SvcUsr01"
        },
        "Parameter20aAppStreamImage": {
            "Type": "String",
            "MinLength": "1",
            "Description": "Enter the AppStream image name to create the fleet. You can find the names of images available in the AppStream Console or with command  \"aws appstream describe-images --query Images[*].[Name,State] --region REGION_NAME --output table\". (NOTE: Case you are not creating AppStream, insert at least one character to meet the field requirement.)"
        },
        "Parameter20bAppStreamInstanceType": {
            "Type": "String",
            "Default": "stream.standard.medium",
            "AllowedValues": [
                "stream.standard.small",
                "stream.standard.medium",
                "stream.standard.large",
                "stream.compute.large",
                "stream.compute.xlarge",
                "stream.compute.2xlarge",
                "stream.compute.4xlarge",
                "stream.compute.8xlarge",
                "stream.memory.large",
                "stream.memory.xlarge",
                "stream.memory.2xlarge",
                "stream.memory.4xlarge",
                "stream.memory.8xlarge",
                "stream.memory.z1d.large",
                "stream.memory.z1d.xlarge",
                "stream.memory.z1d.2xlarge",
                "stream.memory.z1d.3xlarge",
                "stream.memory.z1d.6xlarge",
                "stream.memory.z1d.12xlarge",
                "stream.graphics-design.large",
                "stream.graphics-design.xlarge",
                "stream.graphics-design.2xlarge",
                "stream.graphics-design.4xlarge",
                "stream.graphics-desktop.2xlarge",
                "stream.graphics.g4dn.xlarge",
                "stream.graphics.g4dn.2xlarge",
                "stream.graphics.g4dn.4xlarge",
                "stream.graphics.g4dn.8xlarge",
                "stream.graphics.g4dn.12xlarge",
                "stream.graphics.g4dn.16xlarge",
                "stream.graphics-pro.4xlarge",
                "stream.graphics-pro.8xlarge",
                "stream.graphics-pro.16xlarge"
            ],
            "Description": "Select the AppStream instance type. Default: stream.standard.medium"
        },
        "Parameter20cAppStreamFleetType": {
            "Type": "String",
            "Default": "ON_DEMAND",
            "AllowedValues": [
                "ON_DEMAND",
                "ALWAYS_ON"
            ],
            "Description": "Select the AppStream fleet type. Defaut: ON_DEMAND"
        },
        "Parameter20dFleetStreamView": {
            "Type": "String",
            "Default": "DESKTOP",
            "AllowedValues": [
                "APP",
                "DESKTOP"
            ],
            "Description": "Select the type of stream view for the AppStream fleet. (NOTE: APP requires an AppStream image configured with the desired applications.) Default: DESKTOP"
        },
        "Parameter20eAppSNetwork": {
            "Type": "String",
            "Default": "PRIVATE",
            "AllowedValues": [
                "PUBLIC",
                "PRIVATE"
            ],
            "Description": "Select if AppStream instances will be launched in PUBLIC or PRIVATE subnet. Default: PRIVATE"
        },
        "Parameter20fAppStreamCapacity": {
            "Type": "String",
            "Default": "2",
            "AllowedValues": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "10",
                "20"
            ],
            "Description": "Select the AppStream fleet \"Desired Capacity\". Default: 2"
        },
        "Parameter20gAppSFleetStart": {
            "Type": "String",
            "Default": "true",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "Select if the AppStream Fleet must be started once created. To start the fleet: \"true\". To keep the fleet stopped: \"false\". Default: true"
        },
        "Parameter20hStackPersistentSettings": {
            "Type": "String",
            "Default": "true",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "Select \"true\" to enable \"Application Settings Persistence\" in the AppStream stack. Default: true"
        },
        "Parameter21aDeployType": {
            "Type": "String",
            "Default": "SINGLE_AZ_2",
            "AllowedValues": [
                "SINGLE_AZ_1",
                "SINGLE_AZ_2",
                "MULTI_AZ_1"
            ],
            "Description": "Select the FSx deployment type. Default: SINGLE_AZ_2"
        },
        "Parameter21bStorageCapacity": {
            "Type": "String",
            "Default": "32",
            "AllowedPattern": "[+-]?(\\d+(\\.\\d+)?|\\.\\d+)([eE][+-]?\\d+)?",
            "Description": "Enter the FSx storage capacity in GiB. Minimum 32 ; Maximum 65536 "
        },
        "Parameter21cStorageType": {
            "Type": "String",
            "Default": "SSD",
            "AllowedValues": [
                "SSD",
                "HDD"
            ],
            "Description": "Select the FSx storage type. (NOTE: SINGLE_AZ_1 requires SSD.) Default: SSD"
        },
        "Parameter21dThroughput": {
            "Type": "String",
            "Default": "8",
            "AllowedValues": [
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "512",
                "1014",
                "2048"
            ],
            "Description": "Select the FSx throughput capacity in MB/s. Default: 8 MB/s"
        },
        "Parameter21eTagName": {
            "Type": "String",
            "Default": "FSx01",
            "AllowedPattern": "^[a-zA-Z0-9]+$",
            "MinLength": "02",
            "MaxLength": "32",
            "Description": "Enter a value for the tag Name. (Requirements: ALPHANUMERIC and between 2 and 32 characters.) Default: FSx01"
        },
        "Parameter24aBundleId": {
            "Type": "String",
            "MinLength": "1",
            "Description": "Enter the Workspaces Bundle ID. (IMPORTANT: Ensure that the Availability Zones selected support Workspaces) (NOTE: Case you are not creating Workspaces, insert at least one character to meet the field requirement.)"
        },
        "Parameter24bComputeType": {
            "Type": "String",
            "Default": "STANDARD",
            "AllowedValues": [
                "VALUE",
                "STANDARD",
                "POWERPRO",
                "POWER",
                "PERFORMANCE",
                "GRAPHICSPRO",
                "GRAPHICS"
            ],
            "Description": "Select the Workspaces compute type. (NOTE: Ensure the Bundle ID supports the compute type selected.)"
        },
        "Parameter24cRunMode": {
            "Type": "String",
            "Default": "AUTO_STOP",
            "AllowedValues": [
                "ALWAYS_ON",
                "AUTO_STOP"
            ],
            "Description": "Select the Workspaces running mode."
        },
        "Parameter24dEnableWorkdocs": {
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "Select true to enable Workdocs support."
        },
        "Parameter24eEnableSelfService": {
            "Type": "String",
            "Default": "true",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "Select true to enable Workspaces Self-Service."
        },
        "Parameter24gUsersWorkspaces": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Select YES to create workspaces for the users imported to Active Directory."
        },
        "Parameter24hWorkspacesNetwork": {
            "Type": "String",
            "Default": "PRIVATE",
            "AllowedValues": [
                "PRIVATE",
                "PUBLIC"
            ],
            "Description": "Select if Workspaces will be launched in PUBLIC or PRIVATE subnet. Default: PRIVATE"
        },
        "Parameter24iLocalAdmins": {
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "Select true to set users as Workspaces local administrators."
        },
        "Parameter01hCreateWorkmail": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Select YES to create a Workmail Organization. IMPORTANT: To create Workmail, this CloudFormation stack must be launched in a Workmail enabled region: US-EAST-1, US-WEST-2 or EU-WEST-1."
        },
        "Parameter26bDirectorAlias": {
            "Type": "String",
            "Description": "Enter a Directory Alias. This alias will be used to create a URL to access Workmail WebAccess: https://<alias>.awsapps.com/workmail. (NOTE: The alias must be unique amongst all aliases in AWS. After an alias has been created, it cannot be removed from the Directory Service or reused. To recreate or modify the alias you need to recreate the Directory Service. This name may be used by other AWS services such as Amazon QuickSight, AWS SSO and Amazon Connect, therefore, select the alias name carefully.)"
        },
        "Parameter26cUpdateR53": {
            "Type": "String",
            "Default": "NO",
            "AllowedValues": [
                "YES",
                "NO"
            ],
            "Description": "Associate Workmail Organization with Route 53 Zone. (NOTE: The DNS records required by Workmail will be created in the Route 53 zone indicated below. If the DNS zone is registered in SES, you will need to create the DNS records manually.)"
        },
        "Parameter26dHostedZoneID": {
            "Type": "String",
            "Default": "NOT_SPECIFIED",
            "Description": "If you selected YES above, enter the Hosted Zone ID of the Route 53 zone to be associated with Workmail. Default: NOT_SPECIFIED"
        },
        "Parameter26eDNSDomainName": {
            "Type": "String",
            "Description": "Enter a PUBLIC DNS name for the Workmail Organization."
        },
        "Parameter30bLinuxInstanceType": {
            "Type": "String",
            "Default": "t2.medium",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "t3.small",
                "t3.medium",
                "t3.large",
                "t3.xlarge",
                "t3.2xlarge",
                "m4.large",
                "m5.large",
                "m4.xlarge",
                "m5.xlarge",
                "m4.2xlarge",
                "m5.2xlarge",
                "c4.large",
                "c5.large",
                "c4.xlarge",
                "c5.xlarge",
                "c4.2xlarge",
                "c5.2xlarge",
                "r4.large",
                "r5.large",
                "r4.xlarge",
                "r5.xlarge",
                "r4.2xlarge",
                "r5.2xlarge"
            ],
            "Description": "Select the instance type. Default: t2.medium"
        },
        "Parameter30cLinuxType": {
            "Type": "String",
            "Default": "PUBLIC",
            "AllowedValues": [
                "PUBLIC",
                "PRIVATE"
            ],
            "Description": "Select Linux accessibility via SSH: PUBLIC or PRIVATE. Default: PUBLIC"
        },
        "Parameter30bTrustedSSHSource": {
            "Type": "String",
            "Default": "127.0.0.1/32",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$",
            "Description": "Enter the PUBLIC IP ADDRESS authorized to access the instance via SSH. Default: 127.0.0.1/32."
        },
        "Parameter30dLinuxDomainJoinGroup": {
            "Type": "String",
            "Default": "AWS-LinuxDJGroup",
            "AllowedPattern": "^[a-zA-Z0-9-]+$",
            "MinLength": "02",
            "MaxLength": "20",
            "Description": "Enter the name of the Active Directory group to which permissions will be delegated to allow Seamless Domain Join. (Requirements: ALPHANUMERIC and between 2 and 20 characters.) Default: AWS-LinuxDJGroup"
        },
        "Parameter30eLinuxDomainJoinUSR": {
            "Type": "String",
            "Default": "AWS-LinuxDJSvcUsr",
            "AllowedPattern": "^[a-zA-Z0-9-]+$",
            "MinLength": "02",
            "MaxLength": "20",
            "Description": "Enter the name of the Seamless Domain Join Service Account. (Requirements: ALPHANUMERIC and between 2 and 20 characters.) Default: AWS-LinuxDJSvcUsr"
        },
        "Parameter99aVPCCidrBlock": {
            "Type": "String",
            "Default": "10.0.0.0/16",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$",
            "Description": "Enter the VPC CIDR. Default: 10.0.0.0/16"
        },
        "Parameter99bPublicSubnetServers01": {
            "Type": "String",
            "Default": "10.0.10.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$",
            "Description": "Enter the public subnet for EC2 instances in Availability Zone 01. Default: 10.0.10.0/24 (NOTE: ADFS and Remote Desktop are created in this subnet.)"
        },
        "Parameter99cPublicSubnetServers02": {
            "Type": "String",
            "Default": "10.0.20.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$",
            "Description": "Enter the public subnet for EC2 instances in Availability Zone 02. Default: 10.0.20.0/24"
        },
        "Parameter99dPrivateSubnetServers01": {
            "Type": "String",
            "Default": "10.0.30.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$",
            "Description": "Enter the private subnet for EC2 instances in Availability Zone 01. Default: 10.0.30.0/2 (NOTE: Domain Controller 01 and Certificate Authorities are created in this subnet.)"
        },
        "Parameter99ePrivateSubnetServers02": {
            "Type": "String",
            "Default": "10.0.40.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$",
            "Description": "Enter the private subnet for EC2 instances in Availability Zone 02. Default: 10.0.40.0/24 (NOTE: Domain Controller 02 is created in this subnet.)"
        },
        "Parameter99fPublicSubnetVDI01": {
            "Type": "String",
            "Default": "10.0.50.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$",
            "Description": "Enter the public subnet for virtual desktops in Availability Zone 01. Default: 10.0.50.0/24"
        },
        "Parameter99gPublicSubnetVDI02": {
            "Type": "String",
            "Default": "10.0.60.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$",
            "Description": "Enter the public subnet for virtual desktops in Availability Zone 02. Default: 10.0.60.0/24"
        },
        "Parameter99hPrivateSubnetVDI01": {
            "Type": "String",
            "Default": "10.0.70.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$",
            "Description": "Enter the private subnet for virtual desktops in Availability Zone 01. Default: 10.0.70.0/24"
        },
        "Parameter99iPrivateSubnetVDI02": {
            "Type": "String",
            "Default": "10.0.80.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$",
            "Description": "Enter the private subnet for virtual desktops in Availability Zone 02. Default: 10.0.80.0/24"
        }
    },
    "Mappings": {},
    "Conditions": {



        "CreateMicrosoftAD": {
            "Fn::Equals": [{
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::Split": [",", {
                                "Ref": "Parameter07bDirectoryServiceType"
                            }]
                        }
                    ]
                },
                "Microsoft AD"
            ]
        },
        "CreateSimpleAD": {
            "Fn::Equals": [{
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::Split": [",", {
                                "Ref": "Parameter07bDirectoryServiceType"
                            }]
                        }
                    ]
                },
                "Simple AD"
            ]
        },



        "CreateRemoteDesktop": {
            "Fn::Equals": [{
                    "Ref": "Parameter01aCreateRemoteDesktop"
                },
                "YES"
            ]
        },
        "CreateCA": {
            "Fn::Equals": [{
                    "Ref": "Parameter01cCreateCA"
                },
                "YES"
            ]
        },
        "CreateADFS": {
            "Fn::Equals": [{
                    "Ref": "Parameter01dCreateADFS"
                },
                "YES"
            ]
        },
        "ADFSTypePublic": {
            "Fn::Equals": [{
                    "Ref": "Parameter12dADFSType"
                },
                "INTERNET"
            ]
        },
        "UpdateR53": {
            "Fn::Equals": [{
                    "Ref": "Parameter12eUpdateRoute53"
                },
                "YES"
            ]
        },
        "CreateAppStream": {
            "Fn::Equals": [{
                    "Ref": "Parameter01eCreateAppStream"
                },
                "YES"
            ]
        },
        "AppStreamNetwork": {
            "Fn::Equals": [{
                    "Ref": "Parameter20eAppSNetwork"
                },
                "PRIVATE"
            ]
        },
        "CreateFSx": {
            "Fn::Equals": [{
                    "Ref": "Parameter01fCreateFSx"
                },
                "YES"
            ]
        },
        "FSxMultiAZ": {
            "Fn::Equals": [{
                    "Ref": "Parameter21aDeployType"
                },
                "MULTI_AZ_1"
            ]
        },
        "CreateWorkspace": {
            "Fn::Equals": [{
                    "Ref": "Parameter01gCreateWorkspaces"
                },
                "YES"
            ]
        },
        "WorkspacesPrivateNetwork": {
            "Fn::Equals": [{
                    "Ref": "Parameter24hWorkspacesNetwork"
                },
                "PRIVATE"
            ]
        },
        "CreateLinux": {
            "Fn::Equals": [{
                    "Ref": "Parameter01gCreateLinux"
                },
                "YES"
            ]
        },
        "LinuxTypePublic": {
            "Fn::Equals": [{
                    "Ref": "Parameter30cLinuxType"
                },
                "PUBLIC"
            ]
        },
        "CreateWorkmail": {
            "Fn::Equals": [{
                    "Ref": "Parameter01hCreateWorkmail"
                },
                "YES"
            ]
        }
    },
    "Resources": {
        "Resource01VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "Parameter99aVPCCidrBlock"
                },
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "InstanceTenancy": "default",
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".VPC"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource02PublicSubnet01": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "CidrBlock": {
                    "Ref": "Parameter99bPublicSubnetServers01"
                },
                "AvailabilityZone": {
                    "Ref": "Parameter02aAvailabilityZone01"
                },
                "MapPublicIpOnLaunch": "true",
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".Servers.PublicSubnet01"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource03PublicSubnet02": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "CidrBlock": {
                    "Ref": "Parameter99cPublicSubnetServers02"
                },
                "AvailabilityZone": {
                    "Ref": "Parameter02bAvailabilityZone02"
                },
                "MapPublicIpOnLaunch": "true",
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".Servers.PublicSubnet02"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource04PrivateSubnet01": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "CidrBlock": {
                    "Ref": "Parameter99dPrivateSubnetServers01"
                },
                "AvailabilityZone": {
                    "Ref": "Parameter02aAvailabilityZone01"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".Servers.PrivateSubnet01"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource05PrivateSubnet02": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "CidrBlock": {
                    "Ref": "Parameter99ePrivateSubnetServers02"
                },
                "AvailabilityZone": {
                    "Ref": "Parameter02bAvailabilityZone02"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".Servers.PrivateSubnet02"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource07aVDISubnet01": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "CidrBlock": {
                    "Ref": "Parameter99hPrivateSubnetVDI01"
                },
                "AvailabilityZone": {
                    "Ref": "Parameter02aAvailabilityZone01"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".VirtualDesktops.PrivateSubnet01"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource07bVDISubnet02": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "CidrBlock": {
                    "Ref": "Parameter99iPrivateSubnetVDI02"
                },
                "AvailabilityZone": {
                    "Ref": "Parameter02bAvailabilityZone02"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".VirtualDesktops.PrivateSubnet02"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource07cVDISubnet03": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "CidrBlock": {
                    "Ref": "Parameter99fPublicSubnetVDI01"
                },
                "AvailabilityZone": {
                    "Ref": "Parameter02aAvailabilityZone01"
                },
                "MapPublicIpOnLaunch": "true",
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".VirtualDesktops.PublicSubnet01"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource07dVDISubnet04": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "CidrBlock": {
                    "Ref": "Parameter99gPublicSubnetVDI02"
                },
                "AvailabilityZone": {
                    "Ref": "Parameter02bAvailabilityZone02"
                },
                "MapPublicIpOnLaunch": "true",
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".VirtualDesktops.PublicSubnet02"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource08IGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".IGW"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource09IGWAttach": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "Resource08IGW"
                },
                "VpcId": {
                    "Ref": "Resource01VPC"
                }
            }
        },
        "Resource10NATGW01": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "SubnetId": {
                    "Ref": "Resource02PublicSubnet01"
                },
                "AllocationId": {
                    "Fn::GetAtt": [
                        "Resource11aEIPNATGW01",
                        "AllocationId"
                    ]
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".NATGW01"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource11aEIPNATGW01": {
            "DependsOn": "Resource09IGWAttach",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".EIP.NATGW01"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource10NATGW02": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "SubnetId": {
                    "Ref": "Resource03PublicSubnet02"
                },
                "AllocationId": {
                    "Fn::GetAtt": [
                        "Resource11bEIPNATGW02",
                        "AllocationId"
                    ]
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".NATGW02"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource11bEIPNATGW02": {
            "DependsOn": "Resource09IGWAttach",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".EIP.NATGW02"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource11cEIPADFS": {
            "DependsOn": "Resource09IGWAttach",
            "Condition": "ADFSTypePublic",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".EIP.ADFS"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource11cEIPAssoc": {
            "Type": "AWS::EC2::EIPAssociation",
            "Condition": "ADFSTypePublic",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "Resource11cEIPADFS",
                        "AllocationId"
                    ]
                },
                "InstanceId": {
                    "Ref": "Resource32ADFS"
                }
            }
        },
        "Resource12RouteTableIGW": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".RoutingTableIGW"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource13RouteIGW": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "Resource08IGW",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Resource12RouteTableIGW"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "Resource08IGW"
                }
            }
        },
        "Resource14RouteTableNAT01": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".RoutingTableNAT01"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource14RouteTableNAT02": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".RoutingTableNAT02"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource15RouteNAT01": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "Resource10NATGW01",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Resource14RouteTableNAT01"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "Resource10NATGW01"
                }
            }
        },
        "Resource15RouteNAT02": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "Resource10NATGW02",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Resource14RouteTableNAT02"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "Resource10NATGW02"
                }
            }
        },
        "Resource16RouteTableAssociationIGW": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Resource12RouteTableIGW"
                },
                "SubnetId": {
                    "Ref": "Resource02PublicSubnet01"
                }
            }
        },
        "Resource17RouteTableAssociationIGW": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Resource12RouteTableIGW"
                },
                "SubnetId": {
                    "Ref": "Resource03PublicSubnet02"
                }
            }
        },
        "Resource18RouteTableAssociationNAT": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Resource14RouteTableNAT01"
                },
                "SubnetId": {
                    "Ref": "Resource04PrivateSubnet01"
                }
            }
        },
        "Resource19RouteTableAssociationNAT": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Resource14RouteTableNAT02"
                },
                "SubnetId": {
                    "Ref": "Resource05PrivateSubnet02"
                }
            }
        },
        "Resource20aRouteTableAssociationNAT": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Resource14RouteTableNAT01"
                },
                "SubnetId": {
                    "Ref": "Resource07aVDISubnet01"
                }
            }
        },
        "Resource20bRouteTableAssociationNAT": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Resource14RouteTableNAT02"
                },
                "SubnetId": {
                    "Ref": "Resource07bVDISubnet02"
                }
            }
        },
        "Resource20cRouteTableAssociationIGW": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Resource12RouteTableIGW"
                },
                "SubnetId": {
                    "Ref": "Resource07cVDISubnet03"
                }
            }
        },
        "Resource20dRouteTableAssociationIGW": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Resource12RouteTableIGW"
                },
                "SubnetId": {
                    "Ref": "Resource07dVDISubnet04"
                }
            }
        },
        "Resource23aSecurityGroupTrustedRDP": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".TrustedRDPSources"
                            ]
                        ]
                    }
                }],
                "GroupName": {
                    "Fn::Join": [
                        "",
                        [{
                                "Ref": "AWS::StackName"
                            },
                            ".TrustedRDPSources"
                        ]
                    ]
                },
                "GroupDescription": "Allow RDP From Trusted Sources",
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": 3389,
                    "ToPort": 3389,
                    "CidrIp": {
                        "Ref": "Parameter06bTrustedRDPSource"
                    }
                }]
            }
        },
        "Resource23bSecurityGroupPrivateNetwork": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".InternalVPC"
                            ]
                        ]
                    }
                }],
                "GroupName": {
                    "Fn::Join": [
                        "",
                        [{
                                "Ref": "AWS::StackName"
                            },
                            ".InternalVPC"
                        ]
                    ]
                },
                "GroupDescription": "Allow All Acccess From Sources in the VPC",
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": -1,
                    "CidrIp": {
                        "Ref": "Parameter99aVPCCidrBlock"
                    }
                }]
            }
        },
        "Resource23cSecurityInboundHTTP": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".InboundHTTP-S"
                            ]
                        ]
                    }
                }],
                "GroupName": {
                    "Fn::Join": [
                        "",
                        [{
                                "Ref": "AWS::StackName"
                            },
                            ".InboundHTTP-S"
                        ]
                    ]
                },
                "GroupDescription": "Allow HTTP and HTTPS from the Internet",
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "SecurityGroupIngress": [{
                        "IpProtocol": "tcp",
                        "FromPort": 443,
                        "ToPort": 443,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "Resource23dSecurityGroupAppStream": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".AppStream"
                            ]
                        ]
                    }
                }],
                "GroupName": {
                    "Fn::Join": [
                        "",
                        [{
                                "Ref": "AWS::StackName"
                            },
                            ".AppStream"
                        ]
                    ]
                },
                "GroupDescription": "Allow AppStream outbound traffic",
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "SecurityGroupEgress": [{
                    "IpProtocol": -1,
                    "CidrIp": "0.0.0.0/0"
                }]
            }
        },
        "Resource23eSecuritySSH": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".SSH"
                            ]
                        ]
                    }
                }],
                "GroupName": {
                    "Fn::Join": [
                        "",
                        [{
                                "Ref": "AWS::StackName"
                            },
                            ".SSH"
                        ]
                    ]
                },
                "GroupDescription": "Allow SSH from Trusted Sources",
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": 22,
                    "ToPort": 22,
                    "CidrIp": {
                        "Ref": "Parameter30bTrustedSSHSource"
                    }
                }]
            }
        },
        "Resource24ManagedAD": {
            "Type": "AWS::DirectoryService::MicrosoftAD",
            "Condition": "CreateMicrosoftAD",
            "Properties": {
                "Edition": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::Split": [",", {
                                "Ref": "Parameter07bDirectoryServiceType"
                            }]
                        }
                    ]
                },
                "Name": {
                    "Ref": "Parameter08aDNSDomainName"
                },
                "Password": {
                    "Ref": "Parameter07aAdministratorPassword"
                },
                "ShortName": {
                    "Ref": "Parameter08bNetBiosName"
                },
                "VpcSettings": {
                    "VpcId": {
                        "Ref": "Resource01VPC"
                    },
                    "SubnetIds": [{
                            "Ref": "Resource04PrivateSubnet01"
                        },
                        {
                            "Ref": "Resource05PrivateSubnet02"
                        }
                    ]
                }
            }
        },
        "Resource24SimpleAD": {
            "Type": "AWS::DirectoryService::SimpleAD",
            "Condition": "CreateSimpleAD",
            "Properties": {
                "Size": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::Split": [",", {
                                "Ref": "Parameter07bDirectoryServiceType"
                            }]
                        }
                    ]
                },
                "Name": {
                    "Ref": "Parameter08aDNSDomainName"
                },
                "Password": {
                    "Ref": "Parameter07aAdministratorPassword"
                },
                "ShortName": {
                    "Ref": "Parameter08bNetBiosName"
                },
                "VpcSettings": {
                    "VpcId": {
                        "Ref": "Resource01VPC"
                    },
                    "SubnetIds": [{
                            "Ref": "Resource04PrivateSubnet01"
                        },
                        {
                            "Ref": "Resource05PrivateSubnet02"
                        }
                    ]
                }
            }
        },
        "SSMDocDomainJoin": {
            "Type": "AWS::SSM::Document",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "awsconfig_Domain_",
                            {
                                "Fn::If": [
                                    "CreateMicrosoftAD",
                                    {
                                        "Ref": "Resource24ManagedAD"
                                    },
                                    {
                                        "Ref": "Resource24SimpleAD"
                                    }
                                ]
                            },
                            "_",
                            {
                                "Ref": "Parameter08aDNSDomainName"
                            }
                        ]
                    ]
                },
                "Content": {
                    "schemaVersion": "1.0",
                    "description": "Automatic Domain Join Configuration created by EC2 Console.",
                    "runtimeConfig": {
                        "aws:domainJoin": {
                            "properties": {
                                "directoryId": {
                                    "Fn::If": [
                                        "CreateMicrosoftAD",
                                        {
                                            "Ref": "Resource24ManagedAD"
                                        },
                                        {
                                            "Ref": "Resource24SimpleAD"
                                        }
                                    ]
                                },
                                "directoryName": {
                                    "Ref": "Parameter08aDNSDomainName"
                                },
                                "dnsIpAddresses": {
                                    "Fn::If": [
                                        "CreateMicrosoftAD",
                                        {
                                            "Fn::GetAtt": [
                                                "Resource24ManagedAD",
                                                "DnsIpAddresses"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "Resource24SimpleAD",
                                                "DnsIpAddresses"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "Resource25DHCPOptionForVPC": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": {
                    "Ref": "Parameter08aDNSDomainName"
                },
                "DomainNameServers": {
                    "Fn::If": [
                        "CreateMicrosoftAD",
                        {
                            "Fn::GetAtt": [
                                "Resource24ManagedAD",
                                "DnsIpAddresses"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "Resource24SimpleAD",
                                "DnsIpAddresses"
                            ]
                        }
                    ]
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".DHCPOptions"
                            ]
                        ]
                    }
                }]
            }
        },
        "Resource26DHCPAssociationForVPC": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": {
                    "Ref": "Resource01VPC"
                },
                "DhcpOptionsId": {
                    "Ref": "Resource25DHCPOptionForVPC"
                }
            }
        },
        "Resource27MemberServer01": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "Resource26DHCPAssociationForVPC",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT60M",
                    "Count": "1"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.Resource27MemberServer01.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r Resource27MemberServer01",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\RunCommand.bat": {
                                "content": "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
                            },
                            "c:\\cfn\\99-Signaling.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$CFNRegion = \"",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\"",
                                            "\n",
                                            "$CFNEndpoint = \"cloudformation.\" + $CFNRegion + \".amazonaws.com\"",
                                            "\n",
                                            "$CFNStack =  \"",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\"",
                                            "\n",
                                            "$CFNResource =  \"Resource27MemberServer01\"",
                                            "\n",
                                            "$CFNConnectionStatus = \"False\"",
                                            "\n",
                                            "$RemoteDesktop = \"",
                                            {
                                                "Ref": "Parameter01aCreateRemoteDesktop"
                                            },
                                            "\"",
                                            "\n",
                                            "$ServiceFailures = (Get-Item -Path C:\\cfn\\Failures.log | Get-Content)",
                                            "\n",
                                            "\n",
                                            "Write-Output \"SEND SIGNALING\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded",
                                            "\n",
                                            "If ( $CFNConnectionStatus -Match \"True\" ){",
                                            "\n",
                                            "If ( $ServiceFailures -eq 0){",
                                            "\n",
                                            "$CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)",
                                            "\n",
                                            "Write-Output \"Success signaling sent to stack $CFNStack\"",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Else {",
                                            "\n",
                                            "$CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)",
                                            "\n",
                                            "Write-Output \"Failure signaling sent to stack $CFNStack\"",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Write-Output \"Trying to connect to CloudFormation Endpoint.\"",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "If  ( $LoopCounterA -eq 20 ){",
                                            "\n",
                                            "Write-Output \"Unable to connect to CloudFormation Endpoint.\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n",
                                            "\n",
                                            "Start-Sleep 60",
                                            "\n",
                                            "If ($RemoteDesktop -Match \"NO\"){",
                                            "\n",
                                            "Stop-Computer -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Else {",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n",
                                            "}",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\01-PrepareInstance01.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$InstallCWAgent = \"",
                                            {
                                                "Ref": "Parameter01hInstallCWAgent"
                                            },
                                            "\"",
                                            "\n",
                                            "If ($InstallCWAgent -ne \"NO\") {",
                                            "\n",
                                            "\n",
                                            "Write-Output \"INSTALL CW CLIENT\"",
                                            "\n",
                                            "\n",
                                            "$cwuri = \"https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi\"",
                                            "\n",
                                            "$cwfile = \"C:\\cfn\\amazon-cloudwatch-agent.msi\"",
                                            "\n",
                                            "$arguments = \"/i $cwfile /qn /L*V C:\\cfn\\amazon-cloudwatch-agent.log\"",
                                            "\n",
                                            "Invoke-WebRequest -Uri $cwuri -OutFile $cwfile -DisableKeepAlive -UseBasicparsing",
                                            "\n",
                                            "Start-Process msiexec.exe -ArgumentList $arguments -Wait",
                                            "\n",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Event Viewer and Advanced Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentAdvanced"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Event Viewer and Basic Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentBasic"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Only Event Viewer\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentOnlyEvents"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Only Basic Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentOnlyMetrics"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            ".\"C:\\Program Files\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1\" -a fetch-config -m ec2 -c file:C:\\cfn\\CloudWatchConfig.json -s",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Write-Output \"INSTALL WINDOWS FEATURE\"",
                                            "\n",
                                            "Install-WindowsFeature RSAT-Role-Tools,GPMC,RSAT-DNS-Server",
                                            "\n",
                                            "\n",
                                            "Write-Output \"SET GLOBAL SUFFIX\"",
                                            "\n",
                                            "Set-DnsClientGlobalSetting -SuffixSearchList \"",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"RENAME COMPUTER\"",
                                            "\n",
                                            "$RemoteDesktop = \"",
                                            {
                                                "Ref": "Parameter01aCreateRemoteDesktop"
                                            },
                                            "\"",
                                            "\n",
                                            "If ($RemoteDesktop -Match \"NO\"){",
                                            "\n",
                                            "$newname = \"HELPER\" + (Get-Random -Maximum 999)",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Else {",
                                            "\n",
                                            "$newname = \"",
                                            {
                                                "Ref": "Parameter06aRDPName"
                                            },
                                            "\".ToLower()",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Rename-Computer -NewName $newname -PassThru",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\02-AddToDomain.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses",
                                            "\n",
                                            "$domainNetBiosName = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\"",
                                            "\n",
                                            "$directoryServiceType = \"",
                                            {
                                                "Fn::Select": [
                                                    "0",
                                                    {
                                                        "Fn::Split": [",", {
                                                            "Ref": "Parameter07bDirectoryServiceType"
                                                        }]
                                                    }
                                                ]
                                            },
                                            "\"",
                                            "\n",
                                            "If ($directoryServiceType -EQ \"Microsoft AD\") {",
                                            "\n",
                                            "$AdministratorAccount = \"Admin\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Else{",
                                            "\n",
                                            "$AdministratorAccount = \"Administrator\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "$DCConnection = \"False\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "\n",
                                            "$DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded",
                                            "\n",
                                            "If ($DCConnection -Match \"True\"){",
                                            "\n",
                                            "Write-Output \"ADD TO DOMAIN\"",
                                            "\n",
                                            "$username = $domainNetBiosName  + \"\\\" + $AdministratorAccount",
                                            "\n",
                                            "$administratorPWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordDomainAdministrator"
                                            },
                                            "\").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force",
                                            "\n",
                                            "$credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)",
                                            "\n",
                                            "$domainname = \"",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "Add-Computer -DomainName $domainname -Restart -Credential $credential",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "If  ( $LoopCounterA -eq 20 ){",
                                            "\n",
                                            "Write-Output \"Unable to connect to Domain Controller DNS Service.\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\03a-CreateTask01.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "Start-Transcript -Path C:\\cfn\\03a-CreateTask01.Transcript.log -Append",
                                            "\n",
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses",
                                            "\n",
                                            "$DCConnection = \"False\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "\n",
                                            "$DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded",
                                            "\n",
                                            "If ($DCConnection -Match \"True\"){",
                                            "\n",
                                            "Write-Output \"TASK 01 CUSTOMIZE AD\"",
                                            "\n",
                                            "$taskSchedulerPWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordDomainAdministrator"
                                            },
                                            "\").SecretString | ConvertFrom-Json).Password",
                                            "\n",
                                            "$taskSchedulerUSR = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\",
                                            {
                                                "Fn::If": [
                                                    "CreateMicrosoftAD",
                                                    "Admin",
                                                    "Administrator"
                                                ]
                                            },
                                            "\"",
                                            "\n",
                                            "$taskname = \"CustomizeAD01\"",
                                            "\n",
                                            "$taskaction = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-NoProfile -WindowStyle Hidden -command \"& {C:\\cfn\\03b-CustomizeAD01.ps1}\"'",
                                            "\n",
                                            "$tasktrigger =  New-ScheduledTaskTrigger -AtStartup",
                                            "\n",
                                            "$taskcondition = New-ScheduledTaskSettingsSet -RunOnlyIfNetworkAvailable",
                                            "\n",
                                            "Register-ScheduledTask -Action $taskaction -Trigger $tasktrigger -TaskName $taskName -Settings $taskcondition -User $taskSchedulerUSR -Password $taskSchedulerPWD -RunLevel Highest",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\03b-CustomizeAD01.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "Start-Transcript -Path C:\\cfn\\03b-CustomizeAD01.Transcript.log -Append",
                                            "\n",
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$ServiceFailures = 0",
                                            "\n",
                                            "$AWSRegion = \"",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\"",
                                            "\n",
                                            "$DCConnection = \"False\"",
                                            "\n",
                                            "$DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses",
                                            "\n",
                                            "$DomainNetBIOS = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\"",
                                            "\n",
                                            "$domainname = \"",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "$directoryServiceType = \"",
                                            {
                                                "Fn::Select": [
                                                    "0",
                                                    {
                                                        "Fn::Split": [",", {
                                                            "Ref": "Parameter07bDirectoryServiceType"
                                                        }]
                                                    }
                                                ]
                                            },
                                            "\"",
                                            "\n",
                                            "$directoryID = \"",
                                            {
                                                "Fn::If": [
                                                    "CreateMicrosoftAD",
                                                    {
                                                        "Ref": "Resource24ManagedAD"
                                                    },
                                                    {
                                                        "Ref": "Resource24SimpleAD"
                                                    }
                                                ]
                                            },
                                            "\"",
                                            "\n",
                                            "$ImportUsers = \"",
                                            {
                                                "Ref": "Parameter08cImportUsers"
                                            },
                                            "\"",
                                            "\n",
                                            "$bucketName = \"",
                                            {
                                                "Ref": "Parameter08dBucketName"
                                            },
                                            "\"",
                                            "\n",
                                            "$filePath = \"",
                                            {
                                                "Ref": "Parameter08eFilePath"
                                            },
                                            "\"",
                                            "\n",
                                            "\n",
                                            "$EnableWorkspacesDirectory = \"",
                                            {
                                                "Ref": "Parameter01gCreateWorkspaces"
                                            },
                                            "\"",
                                            "\n",
                                            "$CreateUsersWorkspaces = \"",
                                            {
                                                "Ref": "Parameter24gUsersWorkspaces"
                                            },
                                            "\"",
                                            "\n",
                                            "$bundleID = \"",
                                            {
                                                "Ref": "Parameter24aBundleId"
                                            },
                                            "\"",
                                            "\n",
                                            "$computeTypeName = \"",
                                            {
                                                "Ref": "Parameter24bComputeType"
                                            },
                                            "\"",
                                            "\n",
                                            "$runningMode = \"",
                                            {
                                                "Ref": "Parameter24cRunMode"
                                            },
                                            "\"",
                                            "\n",
                                            "$WKSPrivateNetwork = \"",
                                            {
                                                "Ref": "Resource07aVDISubnet01"
                                            },
                                            "\",\"",
                                            {
                                                "Ref": "Resource07bVDISubnet02"
                                            },
                                            "\"",
                                            "\n",
                                            "$WKSPublicNetwork = \"",
                                            {
                                                "Ref": "Resource07cVDISubnet03"
                                            },
                                            "\",\"",
                                            {
                                                "Ref": "Resource07dVDISubnet04"
                                            },
                                            "\"",
                                            "\n",
                                            "\n",
                                            "$CreateWorkmailOrg = \"",
                                            {
                                                "Ref": "Parameter01hCreateWorkmail"
                                            },
                                            "\"",
                                            "\n",
                                            "$WorkmailAlias = \"",
                                            {
                                                "Ref": "Parameter26bDirectorAlias"
                                            },
                                            "\"",
                                            "\n",
                                            "$WorkmailURL = \"https://$WorkmailAlias.awsapps.com/mail\"",
                                            "\n",
                                            "$WorkmailUpdateRoute53 = \"",
                                            {
                                                "Ref": "Parameter26cUpdateR53"
                                            },
                                            "\"",
                                            "\n",
                                            "$WorkmailR53HostedZoneID = \"",
                                            {
                                                "Ref": "Parameter26dHostedZoneID"
                                            },
                                            "\"",
                                            "\n",
                                            "$WorkmailDomainName = \"",
                                            {
                                                "Ref": "Parameter26eDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "$emailDomain = $domainname",
                                            "\n",
                                            "If ( $CreateWorkmailOrg -eq \"YES\"){$emailDomain = $WorkmailDomainName}",
                                            "\n",
                                            "\n",
                                            "If ($directoryServiceType -Match \"Microsoft AD\"){",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded",
                                            "\n",
                                            "If ($DCConnection -Match \"True\"){",
                                            "\n",
                                            "Write-Output \"QUERY DISTINGUISHED NAME\"",
                                            "\n",
                                            "$DN = (Get-ADDomain).DistinguishedName",
                                            "\n",
                                            "Write-Output \"UPDATE DN PARAMETER IN SSM\"",
                                            "\n",
                                            "Write-SSMParameter -Name ",
                                            {
                                                "Ref": "Resource39DirectoryDN"
                                            },
                                            " -Type \"String\" -Value \"$DN\" -Overwrite $true",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CREATE and CUSTOMIZE AD OBJECTS\"",
                                            "\n",
                                            "set-aduser -Identity Admin -EmailAddress admin@$emailDomain -GivenName \"Admin\" -Surname \"Domain\" -DisplayName \"Admin Domain\"",
                                            "\n",
                                            "Write-Output \"CREATE ORGANIZATIONAL UNITS\"",
                                            "\n",
                                            "New-ADOrganizationalUnit -Name \"AWS-AppStream\" -Path \"OU=$DomainNetBIOS,$DN\"",
                                            "\n",
                                            "New-ADOrganizationalUnit -Name \"AWS-Workspaces\" -Path \"OU=$DomainNetBIOS,$DN\"",
                                            "\n",
                                            "New-ADOrganizationalUnit -Name \"Groups\" -Path \"OU=$DomainNetBIOS,$DN\"",
                                            "\n",
                                            "New-ADOrganizationalUnit -Name \"Services\" -Path \"OU=$DomainNetBIOS,$DN\"",
                                            "\n",
                                            "New-ADOrganizationalUnit -Name \"Servers\" -Path \"OU=$DomainNetBIOS,$DN\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"APPSTREAM - CREATE  SERVICE ACCOUNT\"",
                                            "\n",
                                            "$AppStreamServiceUSR = \"",
                                            {
                                                "Ref": "Parameter13bAppStreamSvcAccount"
                                            },
                                            "\"",
                                            "\n",
                                            "$AppStreamServicePWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordAppStream"
                                            },
                                            "\").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force",
                                            "\n",
                                            "New-ADUser -Name $AppStreamServiceUSR -Enabled $True -AccountPassword $AppStreamServicePWD -PasswordNeverExpires $True -CannotChangePassword $True -Path \"OU=Services,OU=$DomainNetBIOS,$DN\" -Description \"Allow AppStream to create computer accounts in OU AWS-AppStream\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"APPSTREAM - CREATE GROUP AND DELEGATE PERMISSIONS\"",
                                            "\n",
                                            "$AppStreamOU = \"OU=AWS-AppStream,OU=$DomainNetBIOS,$DN\"",
                                            "\n",
                                            "$ADAppStreamGroup = \"",
                                            {
                                                "Ref": "Parameter13aAppStreamGroup"
                                            },
                                            "\"",
                                            "\n",
                                            "New-ADGroup -Name $ADAppStreamGroup -SamAccountName $ADAppStreamGroup -GroupCategory Security -GroupScope Global -Path \"OU=Groups,OU=$DomainNetBIOS,$DN\" -Description \"Allow AppStream to create computer accounts in OU AWS-AppStream\"",
                                            "\n",
                                            "Add-ADGroupMember -Identity $ADAppStreamGroup -Members $AppStreamServiceUSR",
                                            "\n",
                                            "\n",
                                            "dsacls $AppStreamOU /I:T /G \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "Parameter13aAppStreamGroup"
                                            },
                                            ":CC;Computer\"",
                                            "\n",
                                            "dsacls $AppStreamOU /I:S /G \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "Parameter13aAppStreamGroup"
                                            },
                                            ":RPWPLC;;Computer\"",
                                            "\n",
                                            "dsacls $AppStreamOU /I:S /G \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "Parameter13aAppStreamGroup"
                                            },
                                            ":CA;Reset Password;Computer\"",
                                            "\n",
                                            "dsacls $AppStreamOU /I:S /G \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "Parameter13aAppStreamGroup"
                                            },
                                            ":CA;Change Password;Computer\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"LINUX - CREATE SEAMLESS DOMAIN JOIN ACCOUNT and DELEGATE PERMISSIONS\"",
                                            "\n",
                                            "$LinuxJoinServiceGRP = \"",
                                            {
                                                "Ref": "Parameter30dLinuxDomainJoinGroup"
                                            },
                                            "\"",
                                            "\n",
                                            "$LinuxJoinServiceUSR = \"",
                                            {
                                                "Ref": "Parameter30eLinuxDomainJoinUSR"
                                            },
                                            "\"",
                                            "\n",
                                            "$LinuxJoinServicePWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordLinuxDomainJoin"
                                            },
                                            "\").SecretString | ConvertFrom-Json).awsSeamlessDomainPassword  | ConvertTo-SecureString -asPlainText -Force",
                                            "\n",
                                            "New-ADUser -Name $LinuxJoinServiceUSR -Enabled $True -AccountPassword $LinuxJoinServicePWD -PasswordNeverExpires $True -CannotChangePassword $True -Path \"OU=Services,OU=$DomainNetBIOS,$DN\" -Description \"Allow Linux Seamless Domain Join\"",
                                            "\n",
                                            "New-ADGroup -Name $LinuxJoinServiceGRP -SamAccountName $LinuxJoinServiceGRP -GroupCategory Security -GroupScope Global -Path \"OU=Groups,OU=$DomainNetBIOS,$DN\" -Description \"Allow Linux Seamless Domain Join\"",
                                            "\n",
                                            "Add-ADGroupMember -Identity $LinuxJoinServiceGRP -Members $LinuxJoinServiceUSR",
                                            "\n",
                                            "$OULinuxDomainJoin = (Get-ADDomain).ComputersContainer",
                                            "\n",
                                            "dsacls $OULinuxDomainJoin /I:T /G \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "Parameter30dLinuxDomainJoinGroup"
                                            },
                                            ":CC;Computer\"",
                                            "\n",
                                            "\n",
                                            "If ( $EnableWorkspacesDirectory -eq \"YES\"){",
                                            "\n",
                                            "Write-Output \"REGISTER WORKSPACE DIRECTORY\"",
                                            "\n",
                                            "$RegisterWorkspaceDir = @{",
                                            "\n",
                                            "DirectoryId = $directoryID",
                                            "\n",
                                            "EnableSelfService = $",
                                            {
                                                "Ref": "Parameter24eEnableSelfService"
                                            },
                                            "\n",
                                            "EnableWorkDoc = $",
                                            {
                                                "Ref": "Parameter24dEnableWorkdocs"
                                            },
                                            "\n",
                                            "SubnetId = ",
                                            {
                                                "Fn::If": [
                                                    "WorkspacesPrivateNetwork",
                                                    "$WKSPrivateNetwork",
                                                    "$WKSPublicNetwork"
                                                ]
                                            },
                                            "\n",
                                            "Tenancy = \"SHARED\"",
                                            "\n",
                                            "Select = '*'",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Register-WKSWorkspaceDirectory @RegisterWorkspaceDir -Force",
                                            "\n",
                                            "If ($? -Match \"False\" ){$ServiceFailures++;Break}",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "\n",
                                            "$WKSCreationProperty = @{",
                                            "\n",
                                            "ResourceId = $directoryID",
                                            "\n",
                                            "WorkspaceCreationProperties_DefaultOu = \"OU=AWS-Workspaces,OU=$DomainNetBIOS,\" + ((Get-AdDomain).distinguishedName)",
                                            "\n",
                                            "WorkspaceCreationProperties_EnableInternetAccess = $",
                                            {
                                                "Fn::If": [
                                                    "WorkspacesPrivateNetwork",
                                                    "false",
                                                    "true"
                                                ]
                                            },
                                            "\n",
                                            "WorkspaceCreationProperties_UserEnabledAsLocalAdministrator = $",
                                            {
                                                "Ref": "Parameter24iLocalAdmins"
                                            },
                                            "\n",
                                            "}",
                                            "\n",
                                            "Edit-WKSWorkspaceCreationProperty @WKSCreationProperty",
                                            "\n",
                                            "If ($? -Match \"False\" ){$ServiceFailures++;Break}",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "Write-Output \"WRITE WORKSPACES REGISTRATION CODE\"",
                                            "\n",
                                            "$WorkspacesRegCode = (Get-WKsWorkspaceDirectory -Directoryid $directoryID -Region $AWSRegion).RegistrationCode",
                                            "\n",
                                            "Write-SSMParameter -Name ",
                                            {
                                                "Ref": "Resource39WorkspacesRegistrationCode"
                                            },
                                            " -Type \"String\" -Value \"$WorkspacesRegCode\" -Overwrite $true",
                                            "\n",
                                            "}",
                                            "\n",
                                            "\n",
                                            "If ($CreateWorkmailOrg -eq \"YES\"){",
                                            "\n",
                                            "\t",
                                            "Write-Output \"CREATE WORKMAIL ORGANIZATION\"",
                                            "\n",
                                            "\t",
                                            "$LoopCounterB = 1",
                                            "\n",
                                            "\t",
                                            "Do {",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "$ADConnectorSTATE = (Get-Dsdirectory $directoryID).Stage.Value",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "If  ( $ADConnectorSTATE -Match \"Active\" ){",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "If  ($WorkmailUpdateRoute53 -eq \"YES\" ){",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "$WorkmailOrgID = (New-WMOrganization -Alias $WorkmailAlias -DirectoryId $directoryID -Domain @{\"DomainName\" = $WorkmailDomainName; \"HostedZoneId\" = $WorkmailR53HostedZoneID} -Select \"*\" -Force -region $AWSRegion).OrganizationId",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "If ($? -Match \"False\" ){$ServiceFailures++;Break}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "Else{",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "$WorkmailOrgID = (New-WMOrganization -Alias $WorkmailAlias -DirectoryId $directoryID -Select \"*\" -Force -region $AWSRegion).OrganizationId",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "If ($? -Match \"False\" ){$ServiceFailures++;Break}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "If ($? -eq \"True\" ){",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Write-Output \"WRITE WORKMAIL ORG ID\"",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Write-SSMParameter -Name ",
                                            {
                                                "Ref": "Resource39WorkmailOrgID"
                                            },
                                            " -Type \"String\" -Value \"$WorkmailOrgID\" -Overwrite $true",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Write-Output \"WRITE WORKMAIL URL\"",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Write-SSMParameter -Name ",
                                            {
                                                "Ref": "Resource39WorkmailURL"
                                            },
                                            " -Type \"String\" -Value \"$WorkmailURL\" -Overwrite $true",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Break",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "}",
                                            "\t",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Start-Sleep 30",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "$LoopCounterB++",
                                            "\n",
                                            "\t",
                                            "} While ($LoopCounterB -le 10)",
                                            "\n",
                                            "}",
                                            "\n",
                                            "\n",
                                            "If ( $ServiceFailures -eq 0){",
                                            "\n",
                                            "If ( $ImportUsers -eq \"YES\"){",
                                            "\n",
                                            "Write-Output \"IMPORT AD USERS\"",
                                            "\n",
                                            "read-s3Object -BucketName $bucketName -Key $filePath -File C:\\cfn\\Import_UsersToCreate.csv",
                                            "\n",
                                            "foreach($InputString in Get-Content C:\\cfn\\Import_UsersToCreate.csv) {",
                                            "\n",
                                            "\t",
                                            "$ADProperties = $InputString.Split(\",\")",
                                            "\n",
                                            "\t",
                                            "$DisplayName = $ADProperties[0]",
                                            "\n",
                                            "\t",
                                            "$GivenName = $ADProperties[1]",
                                            "\n",
                                            "\t",
                                            "$Surname = $ADProperties[2]",
                                            "\n",
                                            "\t",
                                            "$SamAccountName = $ADProperties[3]",
                                            "\n",
                                            "\t",
                                            "$Password =  (\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#%^&*!#%^&*!#%^&*\".tochararray() | sort {Get-Random})[0..16] -join ''",
                                            "\n",
                                            "\t",
                                            "\n",
                                            "\t",
                                            "New-ADUser -Name $DisplayName -DisplayName $DisplayName -GivenName $GivenName -Surname $Surname -SamAccountName $SamAccountName -UserPrincipalName $SamAccountName@$domainname -EmailAddress $SamAccountName@$emailDomain -Enabled $true -AccountPassword ($Password | ConvertTo-SecureString -AsPlainText -Force)",
                                            "\n",
                                            "\t",
                                            "Add-Content C:\\cfn\\Import_UsersCreated.csv \"$DisplayName,$SamAccountName,$Password\"",
                                            "\n",
                                            "\t",
                                            "}",
                                            "\n",
                                            "}",
                                            "\n",
                                            "}",
                                            "\n",
                                            "\n",
                                            "If ( $ServiceFailures -eq 0){",
                                            "\n",
                                            "If ( $CreateUsersWorkspaces -eq \"YES\"){",
                                            "\n",
                                            "Write-Output \"CREATE USERS WORKSPACES\"",
                                            "\n",
                                            "foreach($InputString in Get-Content C:\\cfn\\Import_UsersCreated.csv) {",
                                            "\n",
                                            "\n",
                                            "$ADProperties = $InputString.Split(\",\")",
                                            "\n",
                                            "\t",
                                            "$SamAccountName = $ADProperties[1]",
                                            "\n",
                                            "\t",
                                            "$LoopCounterB = 1",
                                            "\n",
                                            "\t",
                                            "Do {",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Start-Sleep 1",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "$WorkspacesRequest = (New-WKSWorkspace -Workspace @{ \"BundleID\" = $bundleID; \"DirectoryId\" = $directoryID; \"UserName\" = $SamAccountName; WorkspaceProperties = @{ \"ComputeTypeName\" = $computeTypeName; \"RunningMode\" = $runningMode } }).FailedRequests.Count",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "$LogTime = (Get-Date -Format yyyy-MM-dd_hh:mm:ss_UTC_K)",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "If ($WorkspacesRequest -eq 1){",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "Write-Output \"Failed Request. Waiting 30 seconds before retry ($LoopCounterB of 10): $samAccountName,$directoryID,$bundleID,$computeTypeName,$runningMode,$LogTime\"",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "Start-Sleep 30",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "$LoopCounterB++",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "Else {",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "Write-Output \"Successful Request: $samAccountName,$directoryID,$bundleID,$computeTypeName,$runningMode,$LogTime\"",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "Break",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "}",
                                            "\n",
                                            "\t",
                                            "} While ($LoopCounterB -le 10)",
                                            "\n",
                                            "}",
                                            "\n",
                                            "}",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n",
                                            "}",
                                            "\n",
                                            "\n",
                                            "If ($directoryServiceType -Match \"Simple AD\"){",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded",
                                            "\n",
                                            "If ($DCConnection -Match \"True\"){",
                                            "\n",
                                            "If ( $EnableWorkspacesDirectory -eq \"YES\"){",
                                            "\n",
                                            "Write-Output \"REGISTER WORKSPACE DIRECTORY\"",
                                            "\n",
                                            "$RegisterWorkspaceDir = @{",
                                            "\n",
                                            "DirectoryId = $directoryID",
                                            "\n",
                                            "EnableSelfService = $",
                                            {
                                                "Ref": "Parameter24eEnableSelfService"
                                            },
                                            "\n",
                                            "EnableWorkDoc = $",
                                            {
                                                "Ref": "Parameter24dEnableWorkdocs"
                                            },
                                            "\n",
                                            "SubnetId = ",
                                            {
                                                "Fn::If": [
                                                    "WorkspacesPrivateNetwork",
                                                    "$WKSPrivateNetwork",
                                                    "$WKSPublicNetwork"
                                                ]
                                            },
                                            "\n",
                                            "Tenancy = \"SHARED\"",
                                            "\n",
                                            "Select = '*'",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Register-WKSWorkspaceDirectory @RegisterWorkspaceDir -Force",
                                            "\n",
                                            "If ($? -Match \"False\" ){$ServiceFailures++;Break}",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "\n",
                                            "$WKSCreationProperty = @{",
                                            "\n",
                                            "ResourceId = $directoryID",
                                            "\n",
                                            "WorkspaceCreationProperties_EnableInternetAccess = $",
                                            {
                                                "Fn::If": [
                                                    "WorkspacesPrivateNetwork",
                                                    "false",
                                                    "true"
                                                ]
                                            },
                                            "\n",
                                            "WorkspaceCreationProperties_UserEnabledAsLocalAdministrator = $",
                                            {
                                                "Ref": "Parameter24iLocalAdmins"
                                            },
                                            "\n",
                                            "}",
                                            "\n",
                                            "Edit-WKSWorkspaceCreationProperty @WKSCreationProperty",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "Write-Output \"WRITE WORKSPACES REGISTRATION CODE\"",
                                            "\n",
                                            "$WorkspacesRegCode = (Get-WKsWorkspaceDirectory -Directoryid $directoryID -Region $AWSRegion).RegistrationCode",
                                            "\n",
                                            "Write-SSMParameter -Name ",
                                            {
                                                "Ref": "Resource39WorkspacesRegistrationCode"
                                            },
                                            " -Type \"String\" -Value \"$WorkspacesRegCode\" -Overwrite $true",
                                            "\n",
                                            "}",
                                            "\n",
                                            "\n",
                                            "If ($CreateWorkmailOrg -eq \"YES\"){",
                                            "\n",
                                            "Write-Output \"CREATE WORKMAIL ORGANIZATION\"",
                                            "\n",
                                            "\t",
                                            "$LoopCounterB = 1",
                                            "\n",
                                            "\t",
                                            "Do {",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "$ADConnectorSTATE = (Get-Dsdirectory $directoryID).Stage.Value",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "If  ( $ADConnectorSTATE -Match \"Active\" ){",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "If  ($WorkmailUpdateRoute53 -eq \"YES\" ){",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "$WorkmailOrgID = (New-WMOrganization -Alias $WorkmailAlias -DirectoryId $directoryID -Domain @{\"DomainName\" = $WorkmailDomainName; \"HostedZoneId\" = $WorkmailR53HostedZoneID} -Select \"*\" -Force -region $AWSRegion).OrganizationId",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "If ($? -Match \"False\" ){$ServiceFailures++;Break}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "Else{",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "$WorkmailOrgID = (New-WMOrganization -Alias $WorkmailAlias -DirectoryId $directoryID -Select \"*\" -Force -region $AWSRegion).OrganizationId",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "If ($? -Match \"False\" ){$ServiceFailures++;Break}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "\t",
                                            "}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "If ($? -eq \"True\" ){",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Write-Output \"WRITE WORKMAIL ORG ID\"",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Write-SSMParameter -Name ",
                                            {
                                                "Ref": "Resource39WorkmailOrgID"
                                            },
                                            " -Type \"String\" -Value \"$WorkmailOrgID\" -Overwrite $true",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Write-Output \"WRITE WORKMAIL URL\"",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Write-SSMParameter -Name ",
                                            {
                                                "Ref": "Resource39WorkmailURL"
                                            },
                                            " -Type \"String\" -Value \"$WorkmailURL\" -Overwrite $true",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Break",
                                            "}",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "Start-Sleep 30",
                                            "\n",
                                            "\t",
                                            "\t",
                                            "$LoopCounterB++",
                                            "\n",
                                            "\t",
                                            "} While ($LoopCounterB -le 10)",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Write-Output \"LOG FAILURES\"",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"Failures.log\" -ItemType \"File\" -Value $ServiceFailures -Force",
                                            "\n",
                                            "Write-Output \"CREATE LOG 03b-CustomizeAD01.log\"",
                                            "\n",
                                            "New-Item -Path 'C:\\cfn\\03b-CustomizeAD01.log' -ItemType File",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\03c-CheckTaskLog01.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$CheckTaskLog = \"False\"",
                                            "\n",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$CheckTaskLog = (Test-Path \"C:\\cfn\\03b-CustomizeAD01.log\")",
                                            "\n",
                                            "If ( $CheckTaskLog -eq \"True\"){",
                                            "\n",
                                            "Unregister-ScheduledTask -TaskName \"CustomizeAD01\" -Confirm:$False",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "If ($LoopCounterA -eq 100 ) {",
                                            "\n",
                                            "Write-Output \"Waiting for 03b-CustomizeAD01.log\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "} While ($LoopCounterA -lt 100)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\04-EnableWorkmailUserMailbox.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "<#",
                                            "\n",
                                            "Run this script manually after the Workmail Organization Domain is with status \"Verified\".",
                                            "\n",
                                            "The script will enable Workmail mailboxes for all users in the Import_Users.csv file.",
                                            "\n",
                                            "#>",
                                            "\n",
                                            "\n",
                                            "$WorkmailOrgID = ((Get-SSMParameter ",
                                            {
                                                "Ref": "Resource39WorkmailOrgID"
                                            },
                                            ").value)",
                                            "\n",
                                            "$EmailDomain = \"",
                                            {
                                                "Ref": "Parameter26eDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "foreach($InputString in Get-Content C:\\cfn\\Import_UsersCreated.csv) {",
                                            "\n",
                                            "\n",
                                            "$ADProperties = $InputString.Split(\",\")",
                                            "\n",
                                            "$SamAccountName = $ADProperties[1]",
                                            "\n",
                                            "$ADUserSID = ((Get-AdUser -Identity $SamAccountName).SID.Value)",
                                            "\n",
                                            "$ADUserSamAccountName = ((Get-AdUser -Identity $SamAccountName).SamAccountName)",
                                            "\n",
                                            "\n",
                                            "Register-WMToWorkmail -EntityId $ADUserSID -Email $ADUserSamAccountName@$EmailDomain -OrganizationId $WorkmailOrgID -Force",
                                            "\n",
                                            "}",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "01-PrepareInstance01": {
                                "command": "Powershell.exe -Command C:\\cfn\\01-PrepareInstance01.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "02-AddToDomain": {
                                "command": "Powershell.exe -Command C:\\cfn\\02-AddToDomain.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "03a-CreateTask01": {
                                "command": "Powershell.exe -Command C:\\cfn\\03a-CreateTask01.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "03c-CheckTaskLog01": {
                                "command": "Powershell.exe -Command C:\\cfn\\03c-CheckTaskLog01.ps1"
                            },
                            "99-Signaling": {
                                "command": "Powershell.exe -Command c:\\cfn\\99-Signaling.ps1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Ref": "Parameter04aInstanceAMI"
                },
                "SubnetId": {
                    "Ref": "Resource02PublicSubnet01"
                },
                "IamInstanceProfile": {
                    "Ref": "InstanceProfileForMemberServers"
                },
                "KeyName": {
                    "Ref": "Parameter03aKeyPair"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                {
                                    "Fn::If": [
                                        "CreateRemoteDesktop",
                                        ".RemoteDesktop",
                                        ".Helper"
                                    ]
                                }
                            ]
                        ]
                    }
                }],
                "SecurityGroupIds": [{
                    "Ref": "Resource23aSecurityGroupTrustedRDP"
                }],
                "InstanceType": {
                    "Ref": "Parameter04bInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r Resource27MemberServer01 ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                }
            }
        },
        "Resource30RootCA": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateCA",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M",
                    "Count": "1"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.Resource30RootCA.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r Resource30RootCA",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\RunCommand.bat": {
                                "content": "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
                            },
                            "c:\\cfn\\99-Signaling.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$CFNRegion = \"",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\"",
                                            "\n",
                                            "$CFNEndpoint = \"cloudformation.\" + $CFNRegion + \".amazonaws.com\"",
                                            "\n",
                                            "$CFNStack =  \"",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\"",
                                            "\n",
                                            "$CFNResource =  \"Resource30RootCA\"",
                                            "\n",
                                            "$CFNConnectionStatus = \"False\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"SEND SIGNALING\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded",
                                            "\n",
                                            "If  ( $CFNConnectionStatus -Match \"True\" ){",
                                            "\n",
                                            "Write-Output \"CHECKING INSTANCE HEALTH\"",
                                            "\n",
                                            "$Failures = 0",
                                            "\n",
                                            "$CAStatus = (Get-Service | Where Name -EQ \"CertSvc\").Status",
                                            "\n",
                                            "If  ( $CAStatus -NotMatch \"Running\" ){",
                                            "\n",
                                            "$Failures++",
                                            "\n",
                                            "}",
                                            "\n",
                                            "\n",
                                            "If ($Failures -eq 0) {",
                                            "\n",
                                            "$CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)",
                                            "\n",
                                            "Write-Output \"Success signaling sent to stack $CFNStack\"",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Else {",
                                            "\n",
                                            "$CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)",
                                            "\n",
                                            "Write-Output \"Failure signaling sent to stack $CFNStack\"",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Write-Output \"Trying to connect to CloudFormation Endpoint.\"",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "If  ( $LoopCounterA -eq 20 ){",
                                            "\n",
                                            "Write-Output \"Unable to connect to CloudFormation Endpoint.\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\Windows\\CAPolicy.inf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[Version]",
                                            "\n",
                                            "Signature=\"$Windows NT$\"",
                                            "\n",
                                            "\n",
                                            "[Certsrv_Server]",
                                            "\n",
                                            "RenewalKeyLength=4096",
                                            "\n",
                                            "RenewalValidityPeriod=Years",
                                            "\n",
                                            "RenewalValidityPeriodUnits=10",
                                            "\n",
                                            "CRLPeriod=Years",
                                            "\n",
                                            "CRLPeriodUnits=10",
                                            "\n",
                                            "AlternateSignatureAlgorithm=0",
                                            "\n",
                                            "\n",
                                            "[BasicConstraintsExtension]",
                                            "\n",
                                            "PathLength=1",
                                            "\n",
                                            "Critical=Yes",
                                            "\n",
                                            "\n",
                                            "[AuthorityInformationAccess]",
                                            "\n",
                                            "Empty = true",
                                            "\n",
                                            "\n",
                                            "[CRLDistributionPoint]",
                                            "\n",
                                            "Empty = true",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\01-PrepareRootCA.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$InstallCWAgent = \"",
                                            {
                                                "Ref": "Parameter01hInstallCWAgent"
                                            },
                                            "\"",
                                            "\n",
                                            "If ($InstallCWAgent -ne \"NO\") {",
                                            "\n",
                                            "\n",
                                            "Write-Output \"INSTALL CW CLIENT\"",
                                            "\n",
                                            "\n",
                                            "$cwuri = \"https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi\"",
                                            "\n",
                                            "$cwfile = \"C:\\cfn\\amazon-cloudwatch-agent.msi\"",
                                            "\n",
                                            "$arguments = \"/i $cwfile /qn /L*V C:\\cfn\\amazon-cloudwatch-agent.log\"",
                                            "\n",
                                            "Invoke-WebRequest -Uri $cwuri -OutFile $cwfile -DisableKeepAlive -UseBasicparsing",
                                            "\n",
                                            "Start-Process msiexec.exe -ArgumentList $arguments -Wait",
                                            "\n",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Event Viewer and Advanced Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentAdvanced"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Event Viewer and Basic Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentBasic"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Only Event Viewer\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentOnlyEvents"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Only Basic Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentOnlyMetrics"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            ".\"C:\\Program Files\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1\" -a fetch-config -m ec2 -c file:C:\\cfn\\CloudWatchConfig.json -s",
                                            "\n",
                                            "}",
                                            "\n",
                                            "\n",
                                            "Write-Output \"ENABLE PSREMOTING\"",
                                            "\n",
                                            "Enable-PSRemoting -SkipNetworkProfileCheck -Force",
                                            "\n",
                                            "Set-NetFirewallRule -Name \"WINRM-HTTP-In-TCP-PUBLIC\" -RemoteAddress Any",
                                            "\n",
                                            "\n",
                                            "Write-Output \"SET LOCAL PASSWORD AND RENAME INSTANCE. ROOT CA IS NOT MEMBER OF THE DOMAIN.\"",
                                            "\n",
                                            "$administratorPWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordDomainAdministrator"
                                            },
                                            "\").SecretString | ConvertFrom-Json).Password",
                                            "\n",
                                            "Net User Administrator $administratorPWD",
                                            "\n",
                                            "$newname = \"",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            "\".ToLower()",
                                            "\n",
                                            "Rename-Computer -NewName $newname -PassThru",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\02-InstallCAFeature.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$domainname = \"",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "$RootCADistinguishedName = \"DC=\" + $domainname -Replace \"\\.\", \",DC=\"",
                                            "\n",
                                            "$RootCAType = \"StandaloneRootCA\"",
                                            "\n",
                                            "$RootCACommonName = \"",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            "\"",
                                            "\n",
                                            "$RootCAKeyLength = \"",
                                            {
                                                "Ref": "Parameter09cRootCAKeyLength"
                                            },
                                            "\"",
                                            "\n",
                                            "$RootCAValidityPeriod = \"Years\"",
                                            "\n",
                                            "$RootCAValidityPeriodUnits = \"10\"",
                                            "\n",
                                            "$RootCAHashAlgorithm = \"",
                                            {
                                                "Ref": "Parameter09dRootCAHash"
                                            },
                                            "\"",
                                            "\n",
                                            "$RootCACryptoProvider = \"RSA#Microsoft Software Key Storage Provider\"",
                                            "\n",
                                            "$ValidityCertificatesIssuedbyRootCA = \"6\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"INSTALL ROOT CA\"",
                                            "\n",
                                            "Install-WindowsFeature ADCS-Cert-Authority",
                                            "\n",
                                            "Install-WindowsFeature RSAT-ADCS-Mgmt",
                                            "\n",
                                            "Install-AdcsCertificationAuthority -CAType $RootCAType -CACommonName $RootCACommonName -CADistinguishedNameSuffix $RootCADistinguishedName -CryptoProviderName $RootCACryptoProvider -HashAlgorithmName $RootCAHashAlgorithm -KeyLength $RootCAKeyLength -ValidityPeriod $RootCAValidityPeriod -ValidityPeriodUnits $RootCAValidityPeriodUnits -Force",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CONFIGURE ROOT CA REGISTRY KEYS\"",
                                            "\n",
                                            "Set-ItemProperty 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Services\\CertSvc\\Configuration\\",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            "\\PolicyModules\\CertificateAuthority_MicrosoftDefault.Policy' -Name 'RequestDisposition' -Value 1",
                                            "\n",
                                            "Set-ItemProperty 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Services\\CertSvc\\Configuration\\",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            "\\' -Name 'ValidityPeriodUnits' -Value $ValidityCertificatesIssuedbyRootCA",
                                            "\n",
                                            "Write-Output \"CONFIGURE CDP AND AIA\"",
                                            "\n",
                                            "Add-CACRLDistributionPoint -Uri \"http://",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "/<CAName><DeltaCRLAllowed>.crl\"  -AddToCertificateCdp -AddToFreshestCrl -Force",
                                            "\n",
                                            "Remove-CAAuthorityInformationAccess -uri \"http://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt\" -Force",
                                            "\n",
                                            "Remove-CAAuthorityInformationAccess -uri \"ldap:///CN=<CATruncatedName>,CN=AIA,CN=Public Key Services,CN=Services,<ConfigurationContainer><CAObjectClass>\" -Force",
                                            "\n",
                                            "Remove-CAAuthorityInformationAccess -uri \"file://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt\" -Force",
                                            "\n",
                                            "Add-CAAuthorityInformationAccess -AddToCertificateAia -uri \"http://",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "/<ServerDNSName>_<CAName>.crt\" -Force",
                                            "\n",
                                            "Remove-CACrlDistributionPoint -Uri \"ldap:///CN=<CATruncatedName><CRLNameSuffix>,CN=<ServerShortName>,CN=CDP,CN=Public Key Services,CN=Services,<ConfigurationContainer><CDPObjectClass>\" -Force",
                                            "\n",
                                            "Remove-CACrlDistributionPoint -Uri \"file://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl\" -Force",
                                            "\n",
                                            "Remove-CACrlDistributionPoint -Uri \"http://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl\" -Force",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "01-PrepareRootCA": {
                                "command": "Powershell.exe -Command C:\\cfn\\01-PrepareRootCA.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "02-InstallCAFeature": {
                                "command": "Powershell.exe -Command C:\\cfn\\02-InstallCAFeature.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "99-Signaling": {
                                "command": "Powershell.exe -Command c:\\cfn\\99-Signaling.ps1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Ref": "Parameter04aInstanceAMI"
                },
                "InstanceType": {
                    "Ref": "Parameter04bInstanceType"
                },
                "IamInstanceProfile": {
                    "Ref": "InstanceProfileForMemberServers"
                },
                "SubnetId": {
                    "Ref": "Resource04PrivateSubnet01"
                },
                "SecurityGroupIds": [{
                    "Ref": "Resource23bSecurityGroupPrivateNetwork"
                }],
                "KeyName": {
                    "Ref": "Parameter03aKeyPair"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".",
                                {
                                    "Ref": "Parameter09aRootCAName"
                                }
                            ]
                        ]
                    }
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r Resource30RootCA ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                }
            }
        },
        "Resource31SubCA": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "Resource26DHCPAssociationForVPC",
            "Condition": "CreateCA",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M",
                    "Count": "1"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.Resource31SubCA.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r Resource31SubCA",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\RunCommand.bat": {
                                "content": "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
                            },
                            "c:\\cfn\\99-Signaling.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$CFNRegion = \"",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\"",
                                            "\n",
                                            "$CFNEndpoint = \"cloudformation.\" + $CFNRegion + \".amazonaws.com\"",
                                            "\n",
                                            "$CFNStack =  \"",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\"",
                                            "\n",
                                            "$CFNResource =  \"Resource31SubCA\"",
                                            "\n",
                                            "$CFNConnectionStatus = \"False\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"SEND SIGNALING\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded",
                                            "\n",
                                            "If  ( $CFNConnectionStatus -Match \"True\" ){",
                                            "\n",
                                            "Write-Output \"CHECKING INSTANCE HEALTH\"",
                                            "\n",
                                            "$Failures = 0",
                                            "\n",
                                            "$SubCAStatus = (Get-Service | Where Name -EQ \"CertSvc\").Status",
                                            "\n",
                                            "If  ( $SubCAStatus -NotMatch \"Running\" ){",
                                            "\n",
                                            "$Failures++",
                                            "\n",
                                            "}",
                                            "\n",
                                            "$IISStatus = (Get-Service | Where Name -EQ \"W3SVC\").Status",
                                            "\n",
                                            "If  ( $IISStatus -NotMatch \"Running\" ){",
                                            "\n",
                                            "$Failures++",
                                            "\n",
                                            "}",
                                            "\n",
                                            "\n",
                                            "If ($Failures -eq 0) {",
                                            "\n",
                                            "$CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)",
                                            "\n",
                                            "Write-Output \"Success signaling sent to stack $CFNStack\"",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Else {",
                                            "\n",
                                            "$CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)",
                                            "\n",
                                            "Write-Output \"Failure signaling sent to stack $CFNStack\"",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Write-Output \"Trying to connect to CloudFormation Endpoint.\"",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "If  ( $LoopCounterA -eq 20 ){",
                                            "\n",
                                            "Write-Output \"Unable to connect to CloudFormation Endpoint.\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\Windows\\CAPolicy.inf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[Version]",
                                            "\n",
                                            "Signature=\"$Windows NT$\"",
                                            "\n",
                                            "\n",
                                            "[Certsrv_Server]",
                                            "\n",
                                            "RenewalKeyLength=2048",
                                            "\n",
                                            "CRLPeriod=Months",
                                            "\n",
                                            "CRLPeriodUnits=01",
                                            "\n",
                                            "CRLDeltaPeriod=Weeks",
                                            "\n",
                                            "CRLDeltaPeriodUnits=1",
                                            "\n",
                                            "LoadDefaultTemplates=True",
                                            "\n",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\web.config": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                                            "\n",
                                            "\t<configuration>",
                                            "\n",
                                            "\t\t<system.webServer>",
                                            "\n",
                                            "\t\t\t<directoryBrowse enabled=\"true\" />",
                                            "\n",
                                            "\t\t\t<security>",
                                            "\n",
                                            "\t\t\t\t<requestFiltering allowDoubleEscaping=\"true\" />",
                                            "\n",
                                            "\t\t\t</security>",
                                            "\n",
                                            "\t\t</system.webServer>",
                                            "\n",
                                            "\t</configuration>",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\01-PrepareSubordinateCA.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$InstallCWAgent = \"",
                                            {
                                                "Ref": "Parameter01hInstallCWAgent"
                                            },
                                            "\"",
                                            "\n",
                                            "If ($InstallCWAgent -ne \"NO\") {",
                                            "\n",
                                            "\n",
                                            "Write-Output \"INSTALL CW CLIENT\"",
                                            "\n",
                                            "\n",
                                            "$cwuri = \"https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi\"",
                                            "\n",
                                            "$cwfile = \"C:\\cfn\\amazon-cloudwatch-agent.msi\"",
                                            "\n",
                                            "$arguments = \"/i $cwfile /qn /L*V C:\\cfn\\amazon-cloudwatch-agent.log\"",
                                            "\n",
                                            "Invoke-WebRequest -Uri $cwuri -OutFile $cwfile -DisableKeepAlive -UseBasicparsing",
                                            "\n",
                                            "Start-Process msiexec.exe -ArgumentList $arguments -Wait",
                                            "\n",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Event Viewer and Advanced Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentAdvanced"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Event Viewer and Basic Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentBasic"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Only Event Viewer\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentOnlyEvents"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Only Basic Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentOnlyMetrics"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            ".\"C:\\Program Files\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1\" -a fetch-config -m ec2 -c file:C:\\cfn\\CloudWatchConfig.json -s",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Write-Output \"INSTALL WINDOWS FEATURES\"",
                                            "\n",
                                            "Install-WindowsFeature -Name Web-Server -IncludeManagementTools",
                                            "\n",
                                            "Install-WindowsFeature ADCS-Cert-Authority",
                                            "\n",
                                            "Install-Windowsfeature RSAT-AD-PowerShell",
                                            "\n",
                                            "Install-WindowsFeature RSAT-ADCS-Mgmt",
                                            "\n",
                                            "Install-WindowsFeature RSAT-ADDS-Tools",
                                            "\n",
                                            "\n",
                                            "Write-Output \"SET GLOBAL SUFFIX\"",
                                            "\n",
                                            "Set-DnsClientGlobalSetting -SuffixSearchList \"",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"RENAME COMPUTER\"",
                                            "\n",
                                            "$newname = \"",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            "\".ToLower()",
                                            "\n",
                                            "Rename-Computer -NewName $newname -PassThru",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\02-AddToDomain.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses",
                                            "\n",
                                            "$DCConnection = \"False\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "\n",
                                            "$DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded",
                                            "\n",
                                            "If ($DCConnection -Match \"True\"){",
                                            "\n",
                                            "Write-Output \"ADD TO DOMAIN\"",
                                            "\n",
                                            "$username = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\Admin\"",
                                            "\n",
                                            "$administratorPWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordDomainAdministrator"
                                            },
                                            "\").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force",
                                            "\n",
                                            "$credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)",
                                            "\n",
                                            "$domainname = \"",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "Add-Computer -DomainName $domainname -Restart -Credential $credential",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\03-InstallSubordinateCA.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "Write-Output \"AUTHENTICATE\"",
                                            "\n",
                                            "$username = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\Admin\"",
                                            "\n",
                                            "$administratorPWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordDomainAdministrator"
                                            },
                                            "\").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force",
                                            "\n",
                                            "$credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)",
                                            "\n",
                                            "\n",
                                            "Write-Output \"INSTALL SUBORDINATE CA\"",
                                            "\n",
                                            "$domainname = \"",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "$SubCADistinguishedName = \"DC=\" + $domainname -Replace \"\\.\", \",DC=\"",
                                            "\n",
                                            "$SubCAType = \"EnterpriseSubordinateCA\"",
                                            "\n",
                                            "$SubCACommonName = \"",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            "\"",
                                            "\n",
                                            "$SubCAKeyLength = \"",
                                            {
                                                "Ref": "Parameter10cSubordinateCAKeyLength"
                                            },
                                            "\"",
                                            "\n",
                                            "$SubCAHashAlgorithm = \"",
                                            {
                                                "Ref": "Parameter10dSubordinateCAHash"
                                            },
                                            "\"",
                                            "\n",
                                            "$SubCACryptoProvider = \"RSA#Microsoft Software Key Storage Provider\"",
                                            "\n",
                                            "\n",
                                            "Install-AdcsCertificationAuthority -CAType $SubCAType -CACommonName $SubCACommonName -CADistinguishedNameSuffix $SubCADistinguishedName -CryptoProviderName $SubCACryptoProvider -HashAlgorithmName $SubCAHashAlgorithm -KeyLength $SubCAKeyLength -Credential $credential -Force",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CREATE CDP AND AIA ENDPOINT BASED ON IIS\"",
                                            "\n",
                                            "Copy-Item C:\\cfn\\web.config C:\\Windows\\System32\\CertSrv\\CertEnroll\\web.config",
                                            "\n",
                                            "New-WebSite -Name SubordinateCA -Port 80 -HostHeader \"",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\" -PhysicalPath C:\\Windows\\System32\\CertSrv\\CertEnroll",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\04-ConfigSubCAPhase1.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "Write-Output \"AUTHENTICATE\"",
                                            "\n",
                                            "$username = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\Admin\"",
                                            "\n",
                                            "$administratorPWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordDomainAdministrator"
                                            },
                                            "\").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force",
                                            "\n",
                                            "$credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)",
                                            "\n",
                                            "$userRootCA = \"Administrator\"",
                                            "\n",
                                            "$credentialRootCA = New-Object System.Management.Automation.PSCredential($userRootCA,$administratorPWD)",
                                            "\n",
                                            "$RootCA = \"",
                                            {
                                                "Fn::GetAtt": [
                                                    "Resource30RootCA",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"ENABLE THE SUBORDINATE CA TO INVOKE COMMAND IN THE ROOT CA\"",
                                            "\n",
                                            "Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value \"*\" -Force",
                                            "\n",
                                            "\n",
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$RootCAStatus = \"False\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$RootCAStatus = (Invoke-Command -ComputerName $RootCA { (Get-Service | Where Name -EQ \"CertSvc\").Status } -Credential $credentialRootCA).Value",
                                            "\n",
                                            "If  ( $RootCAStatus -Match \"Running\" ){",
                                            "\n",
                                            "\n",
                                            "Write-Output \"MAP NETWORK DRIVE TO ROOT CA\"",
                                            "\n",
                                            "New-PSDrive -Name \"Y\" -PSProvider FileSystem -Root \"\\\\$RootCA\\c$\" -Credential $credentialRootCA",
                                            "\n",
                                            "\n",
                                            "Write-Output \"IMPORT THE ROOT CA CERTIFICATE AND REVOCATION LIST\"",
                                            "\n",
                                            "Copy-Item \"Y:\\Windows\\System32\\CertSrv\\CertEnroll\\*\" \"C:\\Windows\\System32\\CertSrv\\CertEnroll\\\"",
                                            "\n",
                                            "certutil -addstore -f root c:\\Windows\\System32\\CertSrv\\CertEnroll\\",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            "_",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            ".crt",
                                            "\n",
                                            "certutil -addstore -f root c:\\Windows\\System32\\CertSrv\\CertEnroll\\",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            ".crl",
                                            "\n",
                                            "\n",
                                            "Write-Output \"COPY THE CERTIFICATE REQUEST FROM SUBORDINATE CA TO THE ROOT CA\"",
                                            "\n",
                                            "Copy-Item C:\\",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "_",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            ".req Y:\\cfn",
                                            "\n",
                                            "\n",
                                            "Write-Output \"SUBMIT CERTIFICATE REQUEST TO THE ROOT CA\"",
                                            "\n",
                                            "Invoke-Command -Computername $RootCA -ScriptBlock {certreq -config ",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            " -submit C:\\cfn\\",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "_",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            ".req",
                                            " C:\\cfn\\SubordinateCertificateIssued.cer} -Credential $credentialRootCA",
                                            "\n",
                                            "Copy-Item Y:\\cfn\\SubordinateCertificateIssued.cer C:\\cfn\\SubordinateCertificateIssued.cer",
                                            "\n",
                                            "\n",
                                            "Write-Output \"SET THE ROOT CA BACK TO MANUAL APPROVAL OF CERTIFICATE REQUESTS.\"",
                                            "\n",
                                            "Invoke-Command -Computername $RootCA -ScriptBlock {Set-ItemProperty 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Services\\CertSvc\\Configuration\\",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            "\\PolicyModules\\CertificateAuthority_MicrosoftDefault.Policy' -Name 'RequestDisposition' -Value 257; Restart-Service CertSvc} -Credential $credential",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CONFIGURE CDP AND AIA\"",
                                            "\n",
                                            "Add-CAAuthorityInformationAccess -AddToCertificateAia -uri \"http://<ServerDNSName>/<ServerDNSName>_<CAName>.crt\" -Force",
                                            "\n",
                                            "Remove-CAAuthorityInformationAccess -uri \"http://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt\" -Force",
                                            "\n",
                                            "Remove-CAAuthorityInformationAccess -uri \"ldap:///CN=<CATruncatedName>,CN=AIA,CN=Public Key Services,CN=Services,<ConfigurationContainer><CAObjectClass>\" -Force",
                                            "\n",
                                            "Remove-CAAuthorityInformationAccess -uri \"file://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt\" -Force",
                                            "\n",
                                            "\n",
                                            "Add-CACRLDistributionPoint -Uri \"http://<ServerDNSName>/<CAName><DeltaCRLAllowed>.crl\" -AddToCertificateCdp -AddToFreshestCrl -Force",
                                            "\n",
                                            "Remove-CACrlDistributionPoint -Uri \"ldap:///CN=<CATruncatedName><CRLNameSuffix>,CN=<ServerShortName>,CN=CDP,CN=Public Key Services,CN=Services,<ConfigurationContainer><CDPObjectClass>\" -Force",
                                            "\n",
                                            "Remove-CACrlDistributionPoint -Uri \"file://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl\" -Force",
                                            "\n",
                                            "Remove-CACrlDistributionPoint -Uri \"http://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl\" -Force",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CREATE SCHEDULED TASK ConfigSubCAPhase2\"",
                                            "\n",
                                            "$taskSchedulerPWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordDomainAdministrator"
                                            },
                                            "\").SecretString | ConvertFrom-Json).Password",
                                            "\n",
                                            "$taskSchedulerUSR = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\Admin\"",
                                            "\n",
                                            "$taskname = \"ConfigSubCAPhase2\"",
                                            "\n",
                                            "$taskaction = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-NoProfile -WindowStyle Hidden -command \"& {C:\\cfn\\04-ConfigSubCAPhase2.ps1}\"'",
                                            "\n",
                                            "$tasktrigger =  New-ScheduledTaskTrigger -AtStartup",
                                            "\n",
                                            "$taskcondition = New-ScheduledTaskSettingsSet -RunOnlyIfNetworkAvailable",
                                            "\n",
                                            "Register-ScheduledTask -Action $taskaction -Trigger $tasktrigger -TaskName $taskName -Settings $taskcondition -User $taskSchedulerUSR -Password $taskSchedulerPWD -RunLevel Highest",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Else {",
                                            "\n",
                                            "Write-Output \"Certificate Authority service is not running. Trying again in 30 seconds\"",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If  ( $LoopCounterA -eq 20 ){",
                                            "\n",
                                            "$CFNRegion = \"",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\"",
                                            "\n",
                                            "$CFNEndpoint = \"cloudformation.\" + $CFNRegion + \".amazonaws.com\"",
                                            "\n",
                                            "$CFNStack =  \"",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\"",
                                            "\n",
                                            "$CFNResource =  \"Resource24DomainController01\"",
                                            "\n",
                                            "$CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)",
                                            "\n",
                                            "Write-Output \"Failure signaling sent to stack $CFNStack - Unable to connect to Root CA\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\04-ConfigSubCAPhase2.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses",
                                            "\n",
                                            "$DCConnectionStatus = \"False\"",
                                            "\n",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$DCConnectionStatus = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded",
                                            "\n",
                                            "If ( $DCConnectionStatus -eq \"True\"){",
                                            "\n",
                                            "Write-Output \"CAPTURE DOMAIN DN\"",
                                            "\n",
                                            "$domainDN = (get-addomain).distinguishedname",
                                            "\n",
                                            "\n",
                                            "Write-Output \"PUBLISH THE ROOT CA CERTIFICATE IN THE DIRECTORY AND INSTALL THE SUBORDINATE CA CERTIFICATE. THIS WILL BE EXECUTED BY SCHEDULED TASK ONCE\"",
                                            "\n",
                                            "certutil -dspublish -f c:\\Windows\\System32\\CertSrv\\CertEnroll\\",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            "_",
                                            {
                                                "Ref": "Parameter09aRootCAName"
                                            },
                                            ".crt RootCA >> C:\\cfn\\CertUtil.txt",
                                            "\n",
                                            "certutil -installCert C:\\cfn\\SubordinateCertificateIssued.cer >> C:\\cfn\\CertUtil.txt",
                                            "\n",
                                            "\n",
                                            "Write-Output \"DUMP DEFAULT TEMPLATES\"",
                                            "\n",
                                            "ldifde -m -f C:\\cfn\\ExportComputerTemplate.ldf -d \"CN=Machine,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN\" -p subtree",
                                            "\n",
                                            "ldifde -m -f C:\\cfn\\ExportUserTemplate.ldf -d \"CN=User,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN\" -p subtree",
                                            "\n",
                                            "ldifde -m -f C:\\cfn\\ExportWebServerTemplate.ldf -d \"CN=WebServer,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN\" -p subtree",
                                            "\n",
                                            "$TrustedComputer = Get-Content C:\\cfn\\ExportComputerTemplate.ldf -Raw",
                                            "\n",
                                            "$TrustedComputer = $TrustedComputer -Replace \"Machine\",\"TrustedMachine\"",
                                            "\n",
                                            "$TrustedComputer = $TrustedComputer -Replace \"Computer\",\"TrustedComputer\"",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"ImportTrustedComputerTemplate.ldf\" -ItemType \"File\" -Value $TrustedComputer -Force",
                                            "\n",
                                            "ldifde -i -f C:\\cfn\\ImportTrustedComputerTemplate.ldf",
                                            "\n",
                                            "$TrustedUser = Get-Content C:\\cfn\\ExportUserTemplate.ldf -Raw",
                                            "\n",
                                            "$TrustedUser = $TrustedUser -Replace \"CN=User\",\"CN=TrustedUser\"",
                                            "\n",
                                            "$TrustedUser = $TrustedUser -Replace \": User\",\": TrustedUser\"",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"ImportTrustedUserTemplate.ldf\" -ItemType \"File\" -Value $TrustedUser -Force",
                                            "\n",
                                            "ldifde -i -f C:\\cfn\\ImportTrustedUserTemplate.ldf",
                                            "\n",
                                            "$TrustedWebServer = Get-Content C:\\cfn\\ExportWebServerTemplate.ldf -Raw",
                                            "\n",
                                            "$TrustedWebServer = $TrustedWebServer -Replace \"CN=WebServer\",\"CN=TrustedWebServer\"",
                                            "\n",
                                            "$TrustedWebServer = $TrustedWebServer -Replace \": WebServer\",\": TrustedWebServer\"",
                                            "\n",
                                            "$TrustedWebServer = $TrustedWebServer -Replace \": Web Server\",\": TrustedWebServer\"",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"ImportTrustedWebServerTemplate.ldf\" -ItemType \"File\" -Value $TrustedWebServer -Force",
                                            "\n",
                                            "ldifde -i -f C:\\cfn\\ImportTrustedWebServerTemplate.ldf",
                                            "\n",
                                            "Write-Output \"SET PERMISSIONS ON TEMPLATES FOR COMPUTERS USERS AND WEBSERVERS\"",
                                            "\n",
                                            "dsacls \"CN=TrustedMachine,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN\" /G \"NT AUTHORITY\\Authenticated Users:CA;Enroll\" >> C:\\cfn\\dcacls.log",
                                            "\n",
                                            "dsacls \"CN=TrustedUser,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN\" /G \"NT AUTHORITY\\Authenticated Users:CA;Enroll\" >> C:\\cfn\\dcacls.log",
                                            "\n",
                                            "dsacls \"CN=TrustedWebServer,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN\" /G \"NT AUTHORITY\\Authenticated Users:CA;Enroll\" >> C:\\cfn\\dcacls.log",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"04-ConfigSubCAPhase2.log\" -ItemType \"File\" -Value \"Script 04-ConfigSubCAPhase2.ps1 executed via Task Scheduler.\" -Force",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Clear-DNSClientCache",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "If  ( $LoopCounterA -eq 20 ){",
                                            "\n",
                                            "Write-Output \"Unable to connect to Domain Controller DNS Service.\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\05-CheckTaskSchedulerLog.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$CheckTaskLog = \"False\"",
                                            "\n",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$CheckTaskLog = (Test-Path \"C:\\cfn\\04-ConfigSubCAPhase2.log\")",
                                            "\n",
                                            "If ( $CheckTaskLog -eq \"True\"){",
                                            "\n",
                                            "Unregister-ScheduledTask -TaskName \"ConfigSubCAPhase2\" -Confirm:$False",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "If ($LoopCounterA -eq 20 ) {",
                                            "\n",
                                            "Write-Output \"Waiting for 04-ConfigSubCAPhase2.log\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\06-SendCommand.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$LoopCounterB = 0",
                                            "\n",
                                            "$SubCAStatus = \"Stopped\"",
                                            "\n",
                                            "$TrustedTemplates = 0",
                                            "\n",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$SubCAStatus = (Get-Service | Where Name -EQ \"CertSvc\").Status",
                                            "\n",
                                            "If ( $SubCAStatus -eq \"Running\"){",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$TrustedTemplates = (Get-CATemplate | Where Name -Match \"Trusted*\").Count",
                                            "\n",
                                            "If  ( $TrustedTemplates -lt 3 ){",
                                            "\n",
                                            "Write-Output \"SEND SSM COMMAND\"",
                                            "\n",
                                            "$InstanceID = (ConvertFrom-JSON (Invoke-WebRequest -Uri http://169.254.169.254/latest/dynamic/instance-identity/document -UseBasicparsing).Content).InstanceID",
                                            "\n",
                                            "$CommandString = 'Send-SSMCommand -DocumentName \"AWS-RunPowerShellScript\" -Parameter @{commands = \"C:\\\\cfn\\\\07-AddCATemplates.ps1\"} -Target @{Key=\"instanceids\";Values=@(\"X-XXXXXXXXXX\")}'",
                                            "\n",
                                            "$CommandString = $CommandString -replace \"X-XXXXXXXXXX\",$InstanceID",
                                            "\n",
                                            "Invoke-Expression $CommandString",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Else {",
                                            "\n",
                                            "$LoopCounterA = 20",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "$LoopCounterB++",
                                            "\n",
                                            "Start-Sleep 120",
                                            "\n",
                                            "} While ($LoopCounterB -lt 10)",
                                            "\n",
                                            "}",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "If ($LoopCounterB -eq 10){",
                                            "\n",
                                            "Write-Output \"Unable to add CA Templates\".",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($LoopCounterA -le 20 ) {",
                                            "\n",
                                            "Write-Output \"Certificate Authority Service not running\"",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($LoopCounterA -gt 20 ) {",
                                            "\n",
                                            "Write-Output \"Certificate Authority Templates added.\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\07-AddCATemplates.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "Add-CATemplate -Name \"TrustedMachine\" -Force >> C:\\cfn\\TrustedMachine.Template.log",
                                            "\n",
                                            "Add-CATemplate -Name \"TrustedUser\" -Force >> C:\\cfn\\TrustedUser.Template.log",
                                            "\n",
                                            "Add-CATemplate -Name \"TrustedWebServer\" -Force >> C:\\cfn\\TrustedWebServer.Template.log",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "01-PrepareSubordinateCA": {
                                "command": "Powershell.exe -Command C:\\cfn\\01-PrepareSubordinateCA.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "02-AddToDomain": {
                                "command": "Powershell.exe -Command C:\\cfn\\02-AddToDomain.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "03-InstallSubordinateCA": {
                                "command": "Powershell.exe -Command C:\\cfn\\03-InstallSubordinateCA.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "04-ConfigSubCAPhase1": {
                                "command": "Powershell.exe -Command C:\\cfn\\04-ConfigSubCAPhase1.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "05-CheckTaskSchedulerLog": {
                                "command": "Powershell.exe -Command C:\\cfn\\05-CheckTaskSchedulerLog.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "06-SendCommand": {
                                "command": "Powershell.exe -Command C:\\cfn\\06-SendCommand.ps1"
                            },
                            "99-Signaling": {
                                "command": "Powershell.exe -Command c:\\cfn\\99-Signaling.ps1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Ref": "Parameter04aInstanceAMI"
                },
                "InstanceType": {
                    "Ref": "Parameter04bInstanceType"
                },
                "IamInstanceProfile": {
                    "Ref": "InstanceProfileForMemberServers"
                },
                "SubnetId": {
                    "Ref": "Resource04PrivateSubnet01"
                },
                "SecurityGroupIds": [{
                    "Ref": "Resource23bSecurityGroupPrivateNetwork"
                }],
                "KeyName": {
                    "Ref": "Parameter03aKeyPair"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".",
                                {
                                    "Ref": "Parameter10aSubordinateCAName"
                                }
                            ]
                        ]
                    }
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r Resource31SubCA ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                }
            }
        },
        "Resource32ADFS": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "Resource31SubCA",
            "Condition": "CreateADFS",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M",
                    "Count": "1"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.Resource32ADFS.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r Resource32ADFS",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\RunCommand.bat": {
                                "content": "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
                            },
                            "c:\\cfn\\99-Signaling.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$CFNRegion = \"",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\"",
                                            "\n",
                                            "$CFNEndpoint = \"cloudformation.\" + $CFNRegion + \".amazonaws.com\"",
                                            "\n",
                                            "$CFNStack =  \"",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\"",
                                            "\n",
                                            "$CFNResource =  \"Resource32ADFS\"",
                                            "\n",
                                            "$CFNConnectionStatus = \"False\"",
                                            "\n",
                                            "$ADFSStackAccount = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "Parameter12dADFSServiceAccount"
                                            },
                                            "$\"",
                                            "\n",
                                            "$URL = \"",
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "https://",
                                                        {
                                                            "Ref": "Parameter12bFederationServiceName"
                                                        },
                                                        ".",
                                                        {
                                                            "Ref": "Parameter08aDNSDomainName"
                                                        },
                                                        "/adfs/ls/idpinitiatedsignon.aspx"
                                                    ]
                                                ]
                                            },
                                            "\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"SEND SIGNALING\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded",
                                            "\n",
                                            "If  ( $CFNConnectionStatus -Match \"True\" ){",
                                            "\n",
                                            "Write-Output \"CHECKING INSTANCE HEALTH\"",
                                            "\n",
                                            "$Failures = 0",
                                            "\n",
                                            "$ADFSSvcStatus = (Get-Service | Where Name -EQ \"adfssrv\").Status",
                                            "\n",
                                            "If  ( $ADFSSvcStatus -NotMatch \"Running\" ){",
                                            "\n",
                                            "$Failures++",
                                            "\n",
                                            "}",
                                            "\n",
                                            "$ADFSSvcAccount = (Get-WmiObject Win32_Service | Where-Object Name -EQ \"adfssrv\").StartName",
                                            "\n",
                                            "If  ( $ADFSSvcAccount -NE $ADFSStackAccount ){",
                                            "\n",
                                            "$Failures++",
                                            "\n",
                                            "}",
                                            "\n",
                                            "$ADFSConnectionStatus = (Invoke-WebRequest -URI $URL -UseBasicParsing).StatusCode",
                                            "\n",
                                            "If ($ADFSConnectionStatus -NE \"200\"){",
                                            "\n",
                                            "$Failures++",
                                            "\n",
                                            "}",
                                            "\n",
                                            "\n",
                                            "If ($Failures -eq 0) {",
                                            "\n",
                                            "$CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)",
                                            "\n",
                                            "Write-Output \"Success signaling sent to stack $CFNStack\"",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Else {",
                                            "\n",
                                            "$CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)",
                                            "\n",
                                            "Write-Output \"Failure signaling sent to stack $CFNStack\"",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Write-Output \"Trying to connect to CloudFormation Endpoint.\"",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "If  ( $LoopCounterA -eq 20 ){",
                                            "\n",
                                            "Write-Output \"Unable to connect to CloudFormation Endpoint.\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\01-PrepareADFS.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$InstallCWAgent = \"",
                                            {
                                                "Ref": "Parameter01hInstallCWAgent"
                                            },
                                            "\"",
                                            "\n",
                                            "If ($InstallCWAgent -ne \"NO\") {",
                                            "\n",
                                            "\n",
                                            "Write-Output \"INSTALL CW CLIENT\"",
                                            "\n",
                                            "\n",
                                            "$cwuri = \"https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi\"",
                                            "\n",
                                            "$cwfile = \"C:\\cfn\\amazon-cloudwatch-agent.msi\"",
                                            "\n",
                                            "$arguments = \"/i $cwfile /qn /L*V C:\\cfn\\amazon-cloudwatch-agent.log\"",
                                            "\n",
                                            "Invoke-WebRequest -Uri $cwuri -OutFile $cwfile -DisableKeepAlive -UseBasicparsing",
                                            "\n",
                                            "Start-Process msiexec.exe -ArgumentList $arguments -Wait",
                                            "\n",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Event Viewer and Advanced Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentAdvanced"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Event Viewer and Basic Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentBasic"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Only Event Viewer\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentOnlyEvents"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "If ($InstallCWAgent -eq \"Only Basic Metrics\") {",
                                            "\n",
                                            "$CWInstallParameters = (Get-SSMParameter -Name \"",
                                            {
                                                "Ref": "CWAgentOnlyMetrics"
                                            },
                                            "\").Value",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CloudWatchConfig.json\" -ItemType \"File\" -Value $CWInstallParameters -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            ".\"C:\\Program Files\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1\" -a fetch-config -m ec2 -c file:C:\\cfn\\CloudWatchConfig.json -s",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Write-Output \"INSTALL WINDOWS FEATURE\"",
                                            "\n",
                                            "Install-WindowsFeature adfs-federation -IncludeManagementTools",
                                            "\n",
                                            "Install-WindowsFeature RSAT-AD-PowerShell",
                                            "\n",
                                            "Install-WindowsFeature RSAT-DNS-Server",
                                            "\n",
                                            "Install-WindowsFeature RSAT-ADDS-Tools",
                                            "\n",
                                            "Write-Output \"SET WSMAN\"",
                                            "\n",
                                            "Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value \"*\" -Force",
                                            "\n",
                                            "\n",
                                            "Write-Output \"SET GLOBAL SUFFIX\"",
                                            "\n",
                                            "Set-DnsClientGlobalSetting -SuffixSearchList \"",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"RENAME COMPUTER\"",
                                            "\n",
                                            "$newname = \"",
                                            {
                                                "Ref": "Parameter12aADFSName"
                                            },
                                            "\".ToLower()",
                                            "\n",
                                            "Rename-Computer -NewName $newname -PassThru",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\02-AddToDomain.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses",
                                            "\n",
                                            "$DCConnection = \"False\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "\n",
                                            "$DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded",
                                            "\n",
                                            "If ($DCConnection -Match \"True\"){",
                                            "\n",
                                            "Write-Output \"ADD TO DOMAIN\"",
                                            "\n",
                                            "$username = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\Admin\"",
                                            "\n",
                                            "$administratorPWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordDomainAdministrator"
                                            },
                                            "\").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force",
                                            "\n",
                                            "$credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)",
                                            "\n",
                                            "$domainname = \"",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "Add-Computer -DomainName $domainname -Restart -Credential $credential",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\03a-CreateTask02.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "Start-Transcript -Path C:\\cfn\\03a-CreateTask02.Transcript.log -Append",
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses",
                                            "\n",
                                            "$DCConnection = \"False\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "\n",
                                            "$DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded",
                                            "\n",
                                            "If ($DCConnection -Match \"True\"){",
                                            "\n",
                                            "Write-Output \"CREDENTIALS\"",
                                            "\n",
                                            "$taskSchedulerPWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordDomainAdministrator"
                                            },
                                            "\").SecretString | ConvertFrom-Json).Password",
                                            "\n",
                                            "$taskSchedulerUSR = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\Admin\"",
                                            "\n",
                                            "Write-Output \"TASK 02 CUSTOMIZE AD\"",
                                            "\n",
                                            "$taskname = \"03b-CustomizeAD02\"",
                                            "\n",
                                            "$taskaction = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-NoProfile -WindowStyle Hidden -command \"& {C:\\cfn\\03b-CustomizeAD02.ps1}\"'",
                                            "\n",
                                            "$tasktrigger =  New-ScheduledTaskTrigger -AtStartup",
                                            "\n",
                                            "$taskcondition = New-ScheduledTaskSettingsSet -RunOnlyIfNetworkAvailable",
                                            "\n",
                                            "Register-ScheduledTask -Action $taskaction -Trigger $tasktrigger -TaskName $taskName -Settings $taskcondition -User $taskSchedulerUSR -Password $taskSchedulerPWD -RunLevel Highest",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\03b-CustomizeAD02.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "Start-Transcript -Path C:\\cfn\\03b-CustomizeAD02.Transcript.log -Append",
                                            "\n",
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses",
                                            "\n",
                                            "$DCConnection = \"False\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "\n",
                                            "$DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded",
                                            "\n",
                                            "If ($DCConnection -Match \"True\"){",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CREATE ADFS DNS RECORD\"",
                                            "\n",
                                            "$DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses",
                                            "\n",
                                            "$ADFSName = \"",
                                            {
                                                "Ref": "Parameter12bFederationServiceName"
                                            },
                                            "\".ToLower()",
                                            "\n",
                                            "$ADFSAddr = (Get-NetAdapter | Get-NetIPAddress -AddressFamily IPV4).IpAddress",
                                            "\n",
                                            "$ADFSZoneName = \"",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "Add-DnsServerResourceRecordA -ComputerName $DomainControllers[0] -Name $ADFSName -ZoneName $ADFSZoneName -AllowUpdateAny -IPv4Address $ADFSAddr -TimeToLive 01:00:00  -ErrorAction:Ignore",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CREATE ADFS MANAGED SERVICE ACCOUNT\"",
                                            "\n",
                                            "$ADFSName = \"",
                                            {
                                                "Ref": "Parameter12bFederationServiceName"
                                            },
                                            "\".ToLower()",
                                            "\n",
                                            "$MsaAccount = \"",
                                            {
                                                "Ref": "Parameter12dADFSServiceAccount"
                                            },
                                            "\"",
                                            "\n",
                                            "$MsaDNS = \"",
                                            {
                                                "Ref": "Parameter12dADFSServiceAccount"
                                            },
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "$MsaPrincipalName = \"http/",
                                            {
                                                "Ref": "Parameter12dADFSServiceAccount"
                                            },
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "$MsaSPNHost = \"host/\" + ",
                                            "$ADFSName",
                                            " + \".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "$MsaSPNUsr = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "Parameter12dADFSServiceAccount"
                                            },
                                            "$\"",
                                            "\n",
                                            "New-ADServiceAccount $MsaAccount -DNSHostName $MsaDNS -ServicePrincipalNames $MsaPrincipalName",
                                            "\n",
                                            "Setspn -s $MsaSPNHost $MsaSPNUsr",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CREATE ADFS CONTAINER\"",
                                            "\n",
                                            "$DN = (Get-ADDomain).DistinguishedName",
                                            "\n",
                                            "$ADFSGuid = ([guid]::NewGuid()).Guid",
                                            "\n",
                                            "$DomainNetBIOS = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\"",
                                            "\n",
                                            "New-ADObject -Name \"ADFS\" -Type Container -Path \"OU=$DomainNetBIOS,$DN\"",
                                            "\n",
                                            "New-ADObject -Name \"$ADFSGuid\" -Type Container -Path \"CN=ADFS,OU=$DomainNetBIOS,$DN\"",
                                            "\n",
                                            "Write-Output \"CREATE adminConfig LOG\"",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"adminConfig.log\" -ItemType \"File\" -Value $ADFSGuid -Force",
                                            "\n",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\03c-CheckTaskLog02.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$CheckTaskLog = \"False\"",
                                            "\n",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$CheckTaskLog = (Test-Path \"C:\\cfn\\adminConfig.log\")",
                                            "\n",
                                            "If ( $CheckTaskLog -eq \"True\"){",
                                            "\n",
                                            "Unregister-ScheduledTask -TaskName \"03b-CustomizeAD02\" -Confirm:$False",
                                            "\n",
                                            "Restart-Computer -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "If ($LoopCounterA -eq 20 ) {",
                                            "\n",
                                            "Write-Output \"Waiting for adminConfig.log\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\cfn\\04-InstallADFS.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$LoopCounterA = 0",
                                            "\n",
                                            "$DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses",
                                            "\n",
                                            "$DCConnection = \"False\"",
                                            "\n",
                                            "$ADFSName = \"",
                                            {
                                                "Ref": "Parameter12bFederationServiceName"
                                            },
                                            "\".ToLower()",
                                            "\n",
                                            "$ADFSServiceName = $ADFSName + \".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "$ADFSSigning = $ADFSName + \"-Signing\"",
                                            "\n",
                                            "$ADFSDecrypting = $ADFSName + \"-Decrypting\"",
                                            "\n",
                                            "$ADFSComputerName = $env:computername.ToLower()",
                                            "\n",
                                            "$URL = \"https://\" + ",
                                            "$ADFSName",
                                            " + \".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "/federationmetadata/2007-06/federationmetadata.xml\"",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CREATE CERTIFICATE REQUEST - ADFS SERVICE\"",
                                            "\n",
                                            "$CertificateRequest = @\"",
                                            "\n",
                                            "[Version]",
                                            "\n",
                                            "Signature=\"`$Windows NT$\"",
                                            "\n",
                                            "\n",
                                            "[Newrequest]",
                                            "\n",
                                            "Subject = CN=$ADFSName",
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\n",
                                            "Exportable = true",
                                            "\n",
                                            "MachineKeySet = true",
                                            "\n",
                                            "\n",
                                            "[Extensions]",
                                            "\n",
                                            "2.5.29.17 = \"{text}\"",
                                            "\n",
                                            "_continue_ = \"dns=$ADFSComputerName",
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "&\"",
                                            "\n",
                                            "_continue_ = \"dns=enterpriseregistration.",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "&\"",
                                            "\n",
                                            "_continue_ = \"dns=certauth.$ADFSName",
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "&\"",
                                            "\n",
                                            "_continue_ = \"dns=$ADFSName",
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "&\"",
                                            "\n",
                                            "\n",
                                            "[RequestAttributes]",
                                            "\n",
                                            "CertificateTemplate = TrustedWebServer",
                                            "\n",
                                            "\"@",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CertificateRequestTemplate.inf\" -ItemType \"File\" -Value $CertificateRequest -Force",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CREATE CERTIFICATE REQUEST - ADFS SIGNING\"",
                                            "\n",
                                            "$CertificateRequestSigning = @\"",
                                            "\n",
                                            "[Version]",
                                            "\n",
                                            "Signature=\"`$Windows NT$\"",
                                            "\n",
                                            "\n",
                                            "[Newrequest]",
                                            "\n",
                                            "Subject = CN=$ADFSSigning",
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\n",
                                            "Exportable = true",
                                            "\n",
                                            "MachineKeySet = true",
                                            "\n",
                                            "\n",
                                            "[Extensions]",
                                            "\n",
                                            "2.5.29.17 = \"{text}\"",
                                            "\n",
                                            "_continue_ = \"dns=CN=$ADFSSigning",
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "&\"",
                                            "\n",
                                            "\n",
                                            "[RequestAttributes]",
                                            "\n",
                                            "CertificateTemplate = TrustedWebServer",
                                            "\n",
                                            "\"@",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CertificateRequestTemplateSigning.inf\" -ItemType \"File\" -Value $CertificateRequestSigning -Force",
                                            "\n",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CREATE CERTIFICATE REQUEST - ADFS ENCRYPTION\"",
                                            "\n",
                                            "$CertificateRequestDecrypting = @\"",
                                            "\n",
                                            "[Version]",
                                            "\n",
                                            "Signature=\"`$Windows NT$\"",
                                            "\n",
                                            "\n",
                                            "[Newrequest]",
                                            "\n",
                                            "Subject = CN=$ADFSDecrypting",
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\n",
                                            "Exportable = true",
                                            "\n",
                                            "MachineKeySet = true",
                                            "\n",
                                            "\n",
                                            "[Extensions]",
                                            "\n",
                                            "2.5.29.17 = \"{text}\"",
                                            "\n",
                                            "_continue_ = \"dns=CN=$ADFSDecrypting",
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "&\"",
                                            "\n",
                                            "\n",
                                            "[RequestAttributes]",
                                            "\n",
                                            "CertificateTemplate = TrustedWebServer",
                                            "\n",
                                            "\"@",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"CertificateRequestTemplateDecrypting.inf\" -ItemType \"File\" -Value $CertificateRequestDecrypting -Force",
                                            "\n",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "\n",
                                            "$DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded",
                                            "\n",
                                            "If ($DCConnection -Match \"True\"){",
                                            "\n",
                                            "Write-Output \"AUTHENTICATE\"",
                                            "\n",
                                            "$username = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\Admin\"",
                                            "\n",
                                            "$administratorPWD = ((Get-SECSecretValue -SecretId \"",
                                            {
                                                "Ref": "PasswordDomainAdministrator"
                                            },
                                            "\").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force",
                                            "\n",
                                            "$credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)",
                                            "\n",
                                            "$os = (Get-CimInstance Win32_OperatingSystem).Caption",
                                            "\n",
                                            "\n",
                                            "Write-Output \"INSTALL ADFS CERTIFICATES\"",
                                            "\n",
                                            "$SubordinateCA = \"",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            "\"",
                                            "\n",
                                            "$SubCADNS = \"",
                                            {
                                                "Ref": "Parameter10aSubordinateCAName"
                                            },
                                            ".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "$LoopCounterD = 0",
                                            "\n",
                                            "$CAConnection = \"False\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$CAConnection = (Test-NetConnection -ComputerName $SubCADNS -Port 135).TcpTestSucceeded",
                                            "\n",
                                            "If ($CAConnection -Match \"True\"){",
                                            "\n",
                                            "gpupdate /force",
                                            "\n",
                                            "\n",
                                            "certreq -new C:\\cfn\\CertificateRequestTemplate.inf C:\\cfn\\CertificateRequest.req",
                                            "\n",
                                            "$CertificateSubmit = (certreq -config $SubordinateCA -submit C:\\cfn\\CertificateRequest.req C:\\cfn\\CertificateIssued.cer)",
                                            "\n",
                                            "certreq -accept C:\\cfn\\CertificateIssued.cer >> C:\\cfn\\CertificateInstalled.log",
                                            "\n",
                                            "\n",
                                            "certreq -new C:\\cfn\\CertificateRequestTemplateSigning.inf C:\\cfn\\CertificateRequestSigning.req",
                                            "\n",
                                            "$CertificateSubmit = (certreq -config $SubordinateCA -submit C:\\cfn\\CertificateRequestSigning.req C:\\cfn\\CertificateIssuedSigning.cer)",
                                            "\n",
                                            "certreq -accept C:\\cfn\\CertificateIssuedSigning.cer >> C:\\cfn\\CertificateInstalledSigning.log",
                                            "\n",
                                            "\n",
                                            "certreq -new C:\\cfn\\CertificateRequestTemplateDecrypting.inf C:\\cfn\\CertificateRequestDecrypting.req",
                                            "\n",
                                            "$CertificateSubmit = (certreq -config $SubordinateCA -submit C:\\cfn\\CertificateRequestDecrypting.req C:\\cfn\\CertificateIssuedDecrypting.cer)",
                                            "\n",
                                            "certreq -accept C:\\cfn\\CertificateIssuedDecrypting.cer >> C:\\cfn\\CertificateInstalledDecrypting.log",
                                            "\n",
                                            "\n",
                                            "$ADFSServiceCert = (Get-ChildItem -path cert:\\LocalMachine\\My | Where-Object Subject -Match $ADFSServiceName).Thumbprint",
                                            "\n",
                                            "$ADFSDecryptingCert = (Get-ChildItem -path cert:\\LocalMachine\\My | Where-Object Subject -Match \"-Decrypting\").Thumbprint",
                                            "\n",
                                            "$ADFSSigningCert = (Get-ChildItem -path cert:\\LocalMachine\\My | Where-Object Subject -Match \"-Signing\").Thumbprint",
                                            "\n",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "Resolve-DNSName -Name $SubCADNS",
                                            "\n",
                                            "$LoopCounterD++",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "} While ($LoopCounterD -lt 20)",
                                            "\n",
                                            "\n",
                                            "Write-Output \"INSTALL ADFS\"",
                                            "\n",
                                            "$LoopCounterC = 0",
                                            "\n",
                                            "$ADFSAccountStatus = \"False\"",
                                            "\n",
                                            "$MsaAccount = \"",
                                            {
                                                "Ref": "Parameter12dADFSServiceAccount"
                                            },
                                            "\"",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "$ADFSAccountStatus = (Get-ADServiceAccount -Identity $MsaAccount -Credential $credential).Enabled",
                                            "\n",
                                            "If ($ADFSAccountStatus -Match \"True\"){",
                                            "\n",
                                            "$ADFSThumbprint = (Get-ChildItem -Path Cert:\\LocalMachine\\My).Thumbprint",
                                            "\n",
                                            "$ADFSServiceName = ",
                                            "$ADFSName",
                                            " + \".",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "$ADFSDisplayName = (\"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            " ADFS\").ToUpper()",
                                            "\n",
                                            "$ADFSServiceAccount = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "Parameter12dADFSServiceAccount"
                                            },
                                            "$\"",
                                            "\n",
                                            "$DN = (Get-ADDomain).DistinguishedName",
                                            "\n",
                                            "$DomainNetBIOS = \"",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\"",
                                            "\n",
                                            "$ADFSGuid = Get-Content C:\\cfn\\adminConfig.log",
                                            "\n",
                                            "$adminConfig = @{\"DKMContainerDn\"=\"CN=$ADFSGuid,CN=ADFS,OU=$DomainNETBIOS,$DN\"}",
                                            "\n",
                                            "Install-ADFSFarm -CertificateThumbprint $ADFSServiceCert -FederationServiceName $ADFSServiceName -GroupServiceAccountIdentifier $ADFSServiceAccount -FederationServiceDisplayName $ADFSDisplayName -Credential $credential -OverwriteConfiguration -AdminConfiguration $AdminConfig -SigningCertificateThumbprint $ADFSSigningCert -DecryptionCertificateThumbprint $ADFSDecryptingCert",
                                            "\n",
                                            "Write-Output \"INITIATE SIGNON PAGE AND ENABLE RELAY STATE\"",
                                            "\n",
                                            "If ($os -NotMatch \"Microsoft Windows Server 2012\"){",
                                            "\n",
                                            "Set-AdfsProperties -EnableIdPInitiatedSignonPage $true",
                                            "\n",
                                            "Set-AdfsProperties -EnableRelayStateForIdpInitiatedSignOn $true",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Else {",
                                            "\n",
                                            "$ADFSConfigFile = \"C:\\Windows\\ADFS\\Microsoft.IdentityServer.Servicehost.exe.config\"",
                                            "\n",
                                            "$RelayStateString = @\"",
                                            "\n",
                                            "<microsoft.identityServer.web>`r",
                                            "\n",
                                            "    <useRelayStateForIdpInitiatedSignOn enabled=\"true\" />",
                                            "\n",
                                            "\"@",
                                            "\n",
                                            "$ADFSConfigFileContent = (Get-Item -Path $ADFSConfigFile | Get-Content -Raw)",
                                            "\n",
                                            "$ADFSNEWConfigFileContent = $ADFSConfigFileContent -Replace \"<microsoft.identityServer.web>\",$RelayStateString",
                                            "\n",
                                            "Rename-Item -Path $ADFSConfigFile -NewName \"Microsoft.IdentityServer.Servicehost.exe.config.BKP.CFN\"",
                                            "\n",
                                            "New-Item -ItemType \"File\" -Path $ADFSConfigFile -Value $ADFSNEWConfigFileContent -Force",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Restart-Service adfssrv",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "$LoopCounterC++",
                                            "\n",
                                            "} While ($LoopCounterC -lt 20)",
                                            "\n",
                                            "\n",
                                            "$LoopCounterB = 0",
                                            "\n",
                                            "Do {",
                                            "\n",
                                            "Clear-DnsClientCache",
                                            "\n",
                                            "Resolve-DNSName -Name \"$ADFSName.",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            "\"",
                                            "\n",
                                            "$ADFSStatus = (Invoke-WebRequest -URI $URL -UseBasicParsing -Credential $credential).StatusCode",
                                            "\n",
                                            "If ($ADFSStatus -Match \"200\"){",
                                            "\n",
                                            "Write-Output \"CREATE RELYING PART TRUST\"",
                                            "\n",
                                            "$RelyingPartyTrust = \"Amazon Web Services\"",
                                            "\n",
                                            "Add-ADFSRelyingPartyTrust -Name $RelyingPartyTrust -MetadataURL \"https://signin.aws.amazon.com/static/saml-metadata.xml\" -MonitoringEnabled:$true -AutoUpdateEnabled:$true",
                                            "\n",
                                            "if ($os -NotMatch \"Microsoft Windows Server 2012\") {Set-AdfsRelyingPartyTrust -TargetName $RelyingPartyTrust -AccessControlPolicyName \"Permit Everyone\"}",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CREATE IAM IDP PROVIDER\"",
                                            "\n",
                                            "$SAMLProviderName = \"",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "-ADFS-",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\"",
                                            "\n",
                                            "$SAMLMetaDataDoc = (Invoke-WebRequest -URI $URL -UseBasicParsing -Credential $credential).Content",
                                            "\n",
                                            "New-Item -Path \"C:\\cfn\" -Name \"federationmetadata.xml.log\" -ItemType \"File\" -Value $SAMLMetaDataDoc -Force",
                                            "\n",
                                            "$IDPArn = (New-IAMSAMLProvider -Name $SAMLProviderName -SAMLMetadataDocument $SAMLMetaDataDoc -Select *).SAMLProviderArn",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CONFIGURE TRUSTED POLICY FOR ADMINISTRATIVE ACCESS ROLE VIA ADFS\"",
                                            "\n",
                                            "$TrustPolicyTemplate = @\"",
                                            "\n",
                                            "{",
                                            "\n",
                                            "\"Version\": \"2012-10-17\",",
                                            "\n",
                                            "\"Statement\": [",
                                            "\n",
                                            "{",
                                            "\n",
                                            "\"Effect\": \"Allow\",",
                                            "\n",
                                            "\"Principal\": {",
                                            "\n",
                                            "\"Federated\": \"REPLACE-IDP-ARN\"",
                                            "\n",
                                            "},",
                                            "\n",
                                            "\"Action\": \"sts:AssumeRoleWithSAML\",",
                                            "\n",
                                            "\"Condition\": {",
                                            "\n",
                                            "\"StringEquals\": {",
                                            "\n",
                                            "\"SAML:aud\": \"https://signin.aws.amazon.com/saml\"",
                                            "\n",
                                            "}",
                                            "\n",
                                            "}",
                                            "\n",
                                            "}",
                                            "\n",
                                            "]",
                                            "\n",
                                            "}",
                                            "\n",
                                            "\"@",
                                            "\n",
                                            "\n",
                                            "$TrustPolicy = $TrustPolicyTemplate -replace \"REPLACE-IDP-ARN\",$IDPArn",
                                            "\n",
                                            "Update-IAMAssumeRolePolicy -RoleName ",
                                            {
                                                "Ref": "RoleADFSAdminAccess"
                                            },
                                            " -PolicyDocument $TrustPolicy",
                                            "\n",
                                            "Update-IAMAssumeRolePolicy -RoleName ",
                                            {
                                                "Ref": "RoleADFSAppStream"
                                            },
                                            " -PolicyDocument $TrustPolicy",
                                            "\n",
                                            "\n",
                                            "Write-Output \"CREATE ADFS RULES\"",
                                            "\n",
                                            "$IDPArnForRules = $IDPArn -replace '",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "','$1'",
                                            "\n",
                                            "$TemporaryRules = @'",
                                            "\n",
                                            "@RuleTemplate = \"MapClaims\"",
                                            "\n",
                                            "@RuleName = \"Name ID\"",
                                            "\n",
                                            "c:[Type == \"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\"] => issue(Type = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\", Issuer = c.Issuer, OriginalIssuer = c.OriginalIssuer, Value = c.Value, ValueType = c.ValueType, Properties[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/format\"] = \"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\");",
                                            "\n",
                                            "\n",
                                            "@RuleTemplate = \"LdapClaims\"",
                                            "\n",
                                            "@RuleName = \"Session Name\"",
                                            "\n",
                                            "c:[Type == \"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\", Issuer == \"AD AUTHORITY\"] => issue(store = \"Active Directory\", types = (\"https://aws.amazon.com/SAML/Attributes/RoleSessionName\"), query = \";userPrincipalName;{0}\", param = c.Value);",
                                            "\n",
                                            "\n",
                                            "@RuleName = \"Get AD Groups\"",
                                            "\n",
                                            "c:[Type == \"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\", Issuer == \"AD AUTHORITY\"] => add(store = \"Active Directory\", types = (\"http://temp/variable\"), query = \";tokenGroups;{0}\", param = c.Value);",
                                            "\n",
                                            "\n",
                                            "@RuleName = \"Roles\"",
                                            "\n",
                                            "c:[Type == \"http://temp/variable\", Value =~ \"(?i)^AWS-([^d]{12})\"] => issue(Type = \"https://aws.amazon.com/SAML/Attributes/Role\", Value = RegExReplace(c.Value, \"AWS-([^d]{12})-\", \"REPLACE-IDP-ARN-FOR-RULES,arn:aws:iam::$1:role/\"));",
                                            "\n",
                                            "'@",
                                            "\n",
                                            "\n",
                                            "$Rules = $TemporaryRules -replace \"REPLACE-IDP-ARN-FOR-RULES\",$IDPArnForRules",
                                            "\n",
                                            "Set-ADFSRelyingPartyTrust -TargetName $RelyingPartyTrust -IssuanceTransformRules $Rules",
                                            "\n",
                                            "if ($os -Match \"Microsoft Windows Server 2012\") {",
                                            "\n",
                                            "$AuthotizationRulesW12 = @'",
                                            "\n",
                                            "@RuleName = \"Permit Access to All Users\"",
                                            "\n",
                                            "=> issue(Type = \"http://schemas.microsoft.com/authorization/claims/permit\", Value = \"true\");",
                                            "\n",
                                            "'@",
                                            "\n",
                                            "Set-AdfsRelyingPartyTrust -TargetName $RelyingPartyTrust -IssuanceAuthorizationRules $AuthotizationRulesW12",
                                            "\n",
                                            "}",
                                            "\n",
                                            "Write-Output \"ADD ADMINISTRATOR TO AD GROUP MAPPING TO THE IAM ROLE VIA FEDERATION\"",
                                            "\n",
                                            "$ResourcesOU = \"OU=",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            ",\" + $DN",
                                            "\n",
                                            "$GroupsOU = \"OU=Groups,\" + $ResourcesOU",
                                            "\n",
                                            "$ADgroupName = \"AWS-",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "-",
                                            {
                                                "Ref": "RoleADFSAdminAccess"
                                            },
                                            "\"",
                                            "\n",
                                            "Set-ADUser -Identity Admin -UserPrincipalName admin@",
                                            {
                                                "Ref": "Parameter08aDNSDomainName"
                                            },
                                            " -Credential $credential",
                                            "\n",
                                            "New-ADGroup -Name $ADgroupName -SamAccountName $ADgroupName -GroupCategory Security -GroupScope Global -Path $GroupsOU -Description \"Allow Administrative access to AWS via ADFS\" -Credential $credential",
                                            "\n",
                                            "Add-ADGroupMember -Identity $ADGroupName -Members Admin -Credential $credential",
                                            "\n",
                                            "$ADgroupName = \"AWS-",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "-",
                                            {
                                                "Ref": "RoleADFSAppStream"
                                            },
                                            "\"",
                                            "\n",
                                            "New-ADGroup -Name $ADgroupName -SamAccountName $ADgroupName -GroupCategory Security -GroupScope Global -Path $GroupsOU -Description \"Allow users to connnect to AppStream instances via ADFS\" -Credential $credential",
                                            "\n",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "$LoopCounterB++",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "} While ($LoopCounterB -lt 20)",
                                            "\n",
                                            "Break",
                                            "\n",
                                            "}",
                                            "\n",
                                            "$LoopCounterA++",
                                            "\n",
                                            "Start-Sleep 30",
                                            "\n",
                                            "} While ($LoopCounterA -lt 20)",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "01-PrepareADFS": {
                                "command": "Powershell.exe -Command C:\\cfn\\01-PrepareADFS.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "02-AddToDomain": {
                                "command": "Powershell.exe -Command C:\\cfn\\02-AddToDomain.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "03a-CreateTask02": {
                                "command": "Powershell.exe -Command C:\\cfn\\03a-CreateTask02.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "03c-CheckTaskLog02": {
                                "command": "Powershell.exe -Command C:\\cfn\\03c-CheckTaskLog02.ps1",
                                "waitAfterCompletion": "forever"
                            },
                            "04-InstallADFS": {
                                "command": "Powershell.exe -Command C:\\cfn\\04-InstallADFS.ps1"
                            },
                            "99-Signaling": {
                                "command": "Powershell.exe -Command c:\\cfn\\99-Signaling.ps1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Ref": "Parameter04aInstanceAMI"
                },
                "IamInstanceProfile": {
                    "Ref": "InstanceProfileForMemberServers"
                },
                "KeyName": {
                    "Ref": "Parameter03aKeyPair"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".",
                                {
                                    "Ref": "Parameter12aADFSName"
                                }
                            ]
                        ]
                    }
                }],
                "InstanceType": {
                    "Ref": "Parameter04bInstanceType"
                },
                "NetworkInterfaces": [{
                    "AssociatePublicIpAddress": {
                        "Fn::If": [
                            "ADFSTypePublic",
                            "true",
                            "false"
                        ]
                    },
                    "DeviceIndex": "0",
                    "GroupSet": {
                        "Fn::If": [
                            "ADFSTypePublic",
                            [{
                                    "Ref": "Resource23bSecurityGroupPrivateNetwork"
                                },
                                {
                                    "Ref": "Resource23cSecurityInboundHTTP"
                                }
                            ],
                            [{
                                "Ref": "Resource23bSecurityGroupPrivateNetwork"
                            }]
                        ]
                    },
                    "SubnetId": {
                        "Fn::If": [
                            "ADFSTypePublic",
                            {
                                "Ref": "Resource02PublicSubnet01"
                            },
                            {
                                "Ref": "Resource04PrivateSubnet01"
                            }
                        ]
                    }
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r Resource32ADFS ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                }
            }
        },
        "Resource43Linux": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "Resource27MemberServer01",
            "Condition": "CreateLinux",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M",
                    "Count": "1"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "01-AddUserFromDomainToSudoers": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo '",
                                            {
                                                "Ref": "Parameter08bNetBiosName"
                                            },
                                            "\\\\admin ALL=(ALL:ALL) ALL' | sudo EDITOR='tee -a' visudo"
                                        ]
                                    ]
                                }
                            },
                            "99-Signaling": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "/opt/aws/bin/cfn-signal -e 0 ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource Resource43Linux ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}",
                "IamInstanceProfile": {
                    "Ref": "InstanceProfileForLinuxServers"
                },
                "KeyName": {
                    "Ref": "Parameter03aKeyPair"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".Linux"
                            ]
                        ]
                    }
                }],
                "InstanceType": {
                    "Ref": "Parameter30bLinuxInstanceType"
                },
                "NetworkInterfaces": [{
                    "AssociatePublicIpAddress": {
                        "Fn::If": [
                            "LinuxTypePublic",
                            "true",
                            "false"
                        ]
                    },
                    "DeviceIndex": "0",
                    "GroupSet": {
                        "Fn::If": [
                            "LinuxTypePublic",
                            [{
                                    "Ref": "Resource23bSecurityGroupPrivateNetwork"
                                },
                                {
                                    "Ref": "Resource23eSecuritySSH"
                                }
                            ],
                            [{
                                "Ref": "Resource23bSecurityGroupPrivateNetwork"
                            }]
                        ]
                    },
                    "SubnetId": {
                        "Fn::If": [
                            "LinuxTypePublic",
                            {
                                "Ref": "Resource02PublicSubnet01"
                            },
                            {
                                "Ref": "Resource04PrivateSubnet01"
                            }
                        ]
                    }
                }],
                "SsmAssociations": [{
                    "DocumentName": "AWS-JoinDirectoryServiceDomain",
                    "AssociationParameters": [{
                            "Key": "directoryId",
                            "Value": [{
                                "Ref": "Resource24ManagedAD"
                            }]
                        },
                        {
                            "Key": "directoryName",
                            "Value": [{
                                "Ref": "Parameter08aDNSDomainName"
                            }]
                        }
                    ]
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -x\n",
                                "\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource Resource43Linux ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "Resource36bADFSRecord": {
            "DependsOn": "Resource11cEIPAssoc",
            "Condition": "UpdateR53",
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "Parameter12fHostZoneID"
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [{
                                "Ref": "Parameter12bFederationServiceName"
                            },
                            ".",
                            {
                                "Ref": "Parameter08aDNSDomainName"
                            }
                        ]
                    ]
                },
                "ResourceRecords": [{
                    "Fn::GetAtt": [
                        "Resource32ADFS",
                        "PublicIp"
                    ]
                }],
                "TTL": "300",
                "Type": "A"
            }
        },
        "Resource34AppSDirectoryConfig": {
            "Type": "AWS::AppStream::DirectoryConfig",
            "DependsOn": "Resource27MemberServer01",
            "Condition": "CreateAppStream",
            "Properties": {
                "DirectoryName": {
                    "Ref": "Parameter08aDNSDomainName"
                },
                "OrganizationalUnitDistinguishedNames": [{
                    "Fn::Join": [
                        "",
                        [
                            "OU=AWS-AppStream,OU=",
                            {
                                "Ref": "Parameter08bNetBiosName"
                            },
                            ",",
                            {
                                "Fn::GetAtt": [
                                    "Resource39DirectoryDN",
                                    "Value"
                                ]
                            }
                        ]
                    ]
                }],
                "ServiceAccountCredentials": {
                    "AccountName": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "Parameter08bNetBiosName"
                                },
                                "\\",
                                {
                                    "Ref": "Parameter13bAppStreamSvcAccount"
                                }
                            ]
                        ]
                    },
                    "AccountPassword": {
                        "Fn::Join": [
                            "",
                            [
                                "{{resolve:secretsmanager:",
                                {
                                    "Ref": "PasswordAppStream"
                                },
                                ":SecretString:password}}"
                            ]
                        ]
                    }
                }
            }
        },
        "Resource35AppSStack01": {
            "DependsOn": "Resource34AppSDirectoryConfig",
            "Condition": "CreateAppStream",
            "Type": "AWS::AppStream::Stack",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [{
                                "Ref": "AWS::StackName"
                            },
                            ".AppStreamStack"
                        ]
                    ]
                },
                "ApplicationSettings": {
                    "Enabled": {
                        "Ref": "Parameter20hStackPersistentSettings"
                    },
                    "SettingsGroup": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".SettingsGroup"
                            ]
                        ]
                    }
                },
                "StorageConnectors": [{
                    "ConnectorType": "HOMEFOLDERS"
                }],
                "UserSettings": [{
                        "Action": "CLIPBOARD_COPY_FROM_LOCAL_DEVICE",
                        "Permission": "ENABLED"
                    },
                    {
                        "Action": "CLIPBOARD_COPY_TO_LOCAL_DEVICE",
                        "Permission": "ENABLED"
                    },
                    {
                        "Action": "FILE_DOWNLOAD",
                        "Permission": "ENABLED"
                    },
                    {
                        "Action": "FILE_UPLOAD",
                        "Permission": "ENABLED"
                    },
                    {
                        "Action": "PRINTING_TO_LOCAL_DEVICE",
                        "Permission": "ENABLED"
                    }
                ]
            }
        },
        "Resource36AppSFleet01": {
            "DependsOn": "Resource35AppSStack01",
            "Condition": "CreateAppStream",
            "Type": "AWS::AppStream::Fleet",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [{
                                "Ref": "AWS::StackName"
                            },
                            ".AppStreamFleet"
                        ]
                    ]
                },
                "DisplayName": {
                    "Fn::Join": [
                        "",
                        [{
                                "Ref": "AWS::StackName"
                            },
                            ".AppStreamFleet"
                        ]
                    ]
                },
                "DomainJoinInfo": {
                    "DirectoryName": {
                        "Ref": "Parameter08aDNSDomainName"
                    },
                    "OrganizationalUnitDistinguishedName": {
                        "Fn::Join": [
                            "",
                            [
                                "OU=AWS-AppStream,OU=",
                                {
                                    "Ref": "Parameter08bNetBiosName"
                                },
                                ",",
                                {
                                    "Fn::GetAtt": [
                                        "Resource39DirectoryDN",
                                        "Value"
                                    ]
                                }
                            ]
                        ]
                    }
                },
                "ImageName": {
                    "Ref": "Parameter20aAppStreamImage"
                },
                "InstanceType": {
                    "Ref": "Parameter20bAppStreamInstanceType"
                },
                "FleetType": {
                    "Ref": "Parameter20cAppStreamFleetType"
                },
                "ComputeCapacity": {
                    "DesiredInstances": {
                        "Ref": "Parameter20fAppStreamCapacity"
                    }
                },
                "VpcConfig": {
                    "SubnetIds": {
                        "Fn::If": [
                            "AppStreamNetwork",
                            [{
                                    "Ref": "Resource07aVDISubnet01"
                                },
                                {
                                    "Ref": "Resource07bVDISubnet02"
                                }
                            ],
                            [{
                                    "Ref": "Resource07cVDISubnet03"
                                },
                                {
                                    "Ref": "Resource07dVDISubnet04"
                                }
                            ]
                        ]
                    },
                    "SecurityGroupIds": [{
                        "Ref": "Resource23dSecurityGroupAppStream"
                    }]
                },
                "StreamView": {
                    "Ref": "Parameter20dFleetStreamView"
                },
                "MaxUserDurationInSeconds": "57600",
                "DisconnectTimeoutInSeconds": "900",
                "IdleDisconnectTimeoutInSeconds": "900",
                "EnableDefaultInternetAccess": {
                    "Fn::If": [
                        "AppStreamNetwork",
                        false,
                        true
                    ]
                }
            },
            "CreationPolicy": {
                "StartFleet": {
                    "Ref": "Parameter20gAppSFleetStart"
                }
            }
        },
        "Resource37StackFleetAssociation": {
            "Condition": "CreateAppStream",
            "Type": "AWS::AppStream::StackFleetAssociation",
            "Properties": {
                "FleetName": {
                    "Ref": "Resource36AppSFleet01"
                },
                "StackName": {
                    "Ref": "Resource35AppSStack01"
                }
            },
            "DependsOn": [
                "Resource36AppSFleet01",
                "Resource35AppSStack01"
            ]
        },
        "Resource39DirectoryDN": {
            "Type": "AWS::SSM::Parameter",
            "Description": "Directory Distinguished Name",
            "Properties": {
                "Type": "String",
                "Value": "NO_VALUE"
            }
        },
        "Resource39WorkspacesRegistrationCode": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Type": "String",
                "Value": "NO_VALUE"
            }
        },
        "Resource39WorkmailOrgID": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Type": "String",
                "Value": "NO_VALUE"
            }
        },
        "Resource39WorkmailURL": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Type": "String",
                "Value": "NO_VALUE"
            }
        },
        "Resource40FSx01": {
            "Type": "AWS::FSx::FileSystem",
            "DependsOn": "Resource24ManagedAD",
            "Condition": "CreateFSx",
            "Properties": {
                "FileSystemType": "WINDOWS",
                "StorageCapacity": {
                    "Ref": "Parameter21bStorageCapacity"
                },
                "StorageType": {
                    "Ref": "Parameter21cStorageType"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".",
                                {
                                    "Ref": "Parameter21eTagName"
                                }
                            ]
                        ]
                    }
                }],
                "SubnetIds": {
                    "Fn::If": [
                        "FSxMultiAZ",
                        [{
                                "Ref": "Resource04PrivateSubnet01"
                            },
                            {
                                "Ref": "Resource05PrivateSubnet02"
                            }
                        ],
                        [{
                            "Ref": "Resource04PrivateSubnet01"
                        }]
                    ]
                },
                "SecurityGroupIds": [{
                    "Ref": "Resource23bSecurityGroupPrivateNetwork"
                }],
                "WindowsConfiguration": {
                    "ThroughputCapacity": {
                        "Ref": "Parameter21dThroughput"
                    },
                    "DeploymentType": {
                        "Ref": "Parameter21aDeployType"
                    },
                    "PreferredSubnetId": {
                        "Fn::If": [
                            "FSxMultiAZ",
                            {
                                "Ref": "Resource04PrivateSubnet01"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "ActiveDirectoryId": {
                        "Ref": "Resource24ManagedAD"
                    }
                }
            }
        },
        "Resource41Workspace": {
            "Type": "AWS::WorkSpaces::Workspace",
            "DependsOn": "Resource27MemberServer01",
            "Condition": "CreateWorkspace",
            "Properties": {
                "BundleId": {
                    "Ref": "Parameter24aBundleId"
                },
                "DirectoryId": {
                    "Fn::If": [
                        "CreateMicrosoftAD",
                        {
                            "Ref": "Resource24ManagedAD"
                        },
                        {
                            "Ref": "Resource24SimpleAD"
                        }
                    ]
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".Workspace"
                            ]
                        ]
                    }
                }],
                "UserName": {
                    "Fn::If": [
                        "CreateMicrosoftAD",
                        "Admin",
                        "Administrator"
                    ]
                },
                "WorkspaceProperties": {
                    "ComputeTypeName": {
                        "Ref": "Parameter24bComputeType"
                    },
                    "RunningMode": {
                        "Ref": "Parameter24cRunMode"
                    }
                }
            }
        },
        "ManagedPolicyDeploymentPermissions": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "Policy with required permissions for CFN Stack deployment. This policy can be detached from the IAM role after deployment",
                "Path": "/",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "secretsmanager:GetSecretValue"
                            ],
                            "Resource": "*",
                            "Condition": {
                                "StringEquals": {
                                    "secretsmanager:ResourceTag/aws:cloudformation:stack-name": {
                                        "Ref": "AWS::StackName"
                                    }
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ssm:GetParameter",
                                "ssm:PutParameter"
                            ],
                            "Resource": [{
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter/",
                                            {
                                                "Ref": "CWAgentAdvanced"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter/",
                                            {
                                                "Ref": "CWAgentBasic"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter/",
                                            {
                                                "Ref": "CWAgentOnlyEvents"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter/",
                                            {
                                                "Ref": "CWAgentOnlyMetrics"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter/",
                                            {
                                                "Ref": "Resource39DirectoryDN"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter/",
                                            {
                                                "Ref": "Resource39WorkmailOrgID"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter/",
                                            {
                                                "Ref": "Resource39WorkmailURL"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter/",
                                            {
                                                "Ref": "Resource39WorkspacesRegistrationCode"
                                            }
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ssm:SendCommand"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "iam:CreateSAMLProvider",
                                "iam:Get-SAMLProvider",
                                "iam:ListSAMLProviders",
                                "iam:UpdateSAMLProvider"
                            ],
                            "Resource": [{
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:iam::",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":saml-provider/",
                                        {
                                            "Ref": "AWS::StackName"
                                        },
                                        "-ADFS-*"
                                    ]
                                ]
                            }]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "iam:UpdateAssumeRolePolicy"
                            ],
                            "Resource": [{
                                    "Fn::GetAtt": [
                                        "RoleADFSAdminAccess",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "RoleADFSAppStream",
                                        "Arn"
                                    ]
                                }
                            ]
                        },
                        {
                            "Action": [
                                "s3:List*"
                            ],
                            "Resource": [{
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "Parameter08dBucketName"
                                        }
                                    ]
                                ]
                            }],
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "s3:Get*"
                            ],
                            "Resource": [{
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "Parameter08dBucketName"
                                        },
                                        "/",
                                        {
                                            "Ref": "Parameter08eFilePath"
                                        }
                                    ]
                                ]
                            }],
                            "Effect": "Allow"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "workspaces:*",
                                "ds:*",
                                "iam:PassRole",
                                "iam:GetRole",
                                "iam:CreateRole",
                                "iam:PutRolePolicy",
                                "kms:ListAliases",
                                "kms:ListKeys",
                                "ec2:CreateNetworkInterface",
                                "ec2:CreateTags",
                                "ec2:CreateSecurityGroup",
                                "ec2:DescribeInternetGateways",
                                "ec2:DescribeSecurityGroups",
                                "ec2:DescribeRouteTables",
                                "ec2:DescribeVpcs",
                                "ec2:DescribeSubnets",
                                "ec2:DescribeNetworkInterfaces",
                                "ec2:DescribeAvailabilityZones",
                                "ec2:AuthorizeSecurityGroupEgress",
                                "ec2:AuthorizeSecurityGroupIngress",
                                "workdocs:RegisterDirectory",
                                "workdocs:AddUserToGroup"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "workmail:CreateOrganization",
                                "workmail:DescribeOrganization",
                                "workmail:RegisterToWorkMail",
                                "ses:DescribeActiveReceiptRuleSet",
                                "ses:VerifyDomainIdentity",
                                "ses:SetIdentityEmailNotificationEnabled",
                                "ses:VerifyDomainDkim",
                                "ses:GetIdentityDkimAttributes",
                                "ses:PutIdentityPolicy",
                                "ses:CreateReceiptRuleSet",
                                "ses:CreateReceiptRule",
                                "ses:SetActiveReceiptRuleSet",
                                "ses:UpdateReceiptRule",
                                "ses:GetIdentityVerificationAttributes",
                                "kms:DescribeKey",
                                "kms:CreateGrant",
                                "kms:Decrypt",
                                "ds:CreateAlias",
                                "ds:DescribeDirectories",
                                "route53:GetHostedZone"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [{
                    "Ref": "RoleMemberServers"
                }]
            }
        },
        "ManagedPolicySSMSessionManager": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "Policy to enable Session Manager connection and store Session Manager logs in S3",
                "Path": "/",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ssm:UpdateInstanceInformation",
                                "ssmmessages:CreateControlChannel",
                                "ssmmessages:CreateDataChannel",
                                "ssmmessages:OpenControlChannel",
                                "ssmmessages:OpenDataChannel"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetEncryptionConfiguration"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:Decrypt"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Resource": [
                                "arn:aws:s3:::REPLACE-WITH-BUCKET-NAME"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:PutObject",
                                "s3:GetObject"
                            ],
                            "Resource": [
                                "arn:aws:s3:::REPLACE-WITH-BUCKET-NAME/*"
                            ]
                        }
                    ]
                },
                "Roles": [{
                    "Ref": "RoleMemberServers"
                }]
            }
        },
        "ManagedPolicyEnableDomainJoin": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "Policy to enable domain join during EC2 launch",
                "Path": "/",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "ds:CreateComputer",
                            "ds:DescribeDirectories"
                        ],
                        "Resource": "*"
                    }]
                },
                "Roles": [{
                    "Ref": "RoleMemberServers"
                }]
            }
        },
        "ManagedPolicyLinuxDomainJoin": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "Policy to enable Linux Seamless Domain Join",
                "Path": "/",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "secretsmanager:GetSecretValue",
                            "secretsmanager:DescribeSecret"
                        ],
                        "Resource": {
                            "Ref": "PasswordLinuxDomainJoin"
                        }
                    }]
                },
                "Roles": [{
                    "Ref": "RoleLinuxServers"
                }]
            }
        },
        "ManagedPolicyWatchAgentServerPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "Policy to enable instance to send logs and metrics to CloudWatch",
                "Path": "/",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "cloudwatch:PutMetricData",
                                "ec2:DescribeTags",
                                "logs:PutLogEvents",
                                "logs:DescribeLogStreams",
                                "logs:DescribeLogGroups",
                                "logs:CreateLogStream",
                                "logs:CreateLogGroup"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ssm:GetParameter"
                            ],
                            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
                        }
                    ]
                },
                "Roles": [{
                    "Ref": "RoleMemberServers"
                }]
            }
        },
        "ManagedPolicyAppStreamAccess": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "Policy to allow access to AppStream",
                "Path": "/",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": "appstream:Stream",
                        "Resource": {
                            "Fn::Join": [
                                "",
                                [
                                    "arn:aws:appstream:",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    ":",
                                    {
                                        "Ref": "AWS::AccountId"
                                    },
                                    ":stack/*"
                                ]
                            ]
                        },
                        "Condition": {
                            "StringEquals": {
                                "appstream:userId": "${saml:sub}",
                                "saml:sub_type": "persistent"
                            }
                        }
                    }]
                },
                "Roles": [{
                    "Ref": "RoleADFSAppStream"
                }]
            }
        },
        "RoleADFSAdminAccess": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "iam.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AdministratorAccess"
                ]
            }
        },
        "RoleADFSAppStream": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "iam.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                }
            }
        },
        "RoleMemberServers": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com",
                                "ssm.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                    "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation"

                ]
            }
        },
        "InstanceProfileForMemberServers": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "RoleMemberServers"
                }]
            }
        },
        "RoleLinuxServers": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com",
                                "ssm.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                    "arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess",
                    "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation"
                ]
            }
        },
        "InstanceProfileForLinuxServers": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "RoleLinuxServers"
                }]
            }
        },
        "PasswordLinuxDomainJoin": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "aws/directory-services/",
                            {
                                "Fn::If": [
                                    "CreateMicrosoftAD",
                                    {
                                        "Ref": "Resource24ManagedAD"
                                    },
                                    {
                                        "Ref": "Resource24SimpleAD"
                                    }
                                ]
                            },
                            "/seamless-domain-join"
                        ]
                    ]
                },
                "Description": "Password - Linux Seamless Domain Join Service Account",
                "GenerateSecretString": {
                    "SecretStringTemplate": {
                        "Fn::Join": [
                            "",
                            [
                                "{ \"awsSeamlessDomainUsername\": \"",
                                {
                                    "Ref": "Parameter30eLinuxDomainJoinUSR"
                                },
                                "\" }"
                            ]
                        ]
                    },
                    "GenerateStringKey": "awsSeamlessDomainPassword",
                    "PasswordLength": 18,
                    "ExcludeCharacters": "\"@/\\"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".LinuxSeamlessDomainJoin"
                            ]
                        ]
                    }
                }]
            }
        },
        "PasswordAppStream": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": "Password - AppStream Service Account",
                "GenerateSecretString": {
                    "SecretStringTemplate": {
                        "Fn::Join": [
                            "",
                            [
                                "{ \"domain\": \"",
                                {
                                    "Ref": "Parameter08bNetBiosName"
                                },
                                "\"",
                                " ,\"username\": \"",
                                {
                                    "Ref": "Parameter13bAppStreamSvcAccount"
                                },
                                "\" }"
                            ]
                        ]
                    },
                    "GenerateStringKey": "password",
                    "PasswordLength": 18,
                    "ExcludeCharacters": "\"@/\\"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".AppStreamServiceAccount"
                            ]
                        ]
                    }
                }]
            }
        },
        "PasswordDomainAdministrator": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": "Password - Domain Admin",
                "SecretString": {
                    "Fn::Join": [
                        "",
                        [
                            "{ \"domain\": \"",
                            {
                                "Ref": "Parameter08bNetBiosName"
                            },
                            "\"",
                            " ,\"username\": \"",
                            {
                                "Fn::If": [
                                    "CreateMicrosoftAD",
                                    "Admin",
                                    "Administrator"
                                ]
                            },
                            "\",",
                            "\"password\": \"",
                            {
                                "Ref": "Parameter07aAdministratorPassword"
                            },
                            "\" }"
                        ]
                    ]
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "AWS::StackName"
                                },
                                ".Administrator"
                            ]
                        ]
                    }
                }]
            }
        },
        "CWAgentAdvanced": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Tier": "Advanced",
                "Type": "String",
                "Description": "CloudWatch Client Installation - System and Application Logs and Advanced Performance Metrics",
                "Value": {
                    "Fn::Join": [
                        "",
                        [
                            "{",
                            "\n",
                            "\t\"logs\": {",
                            "\n",
                            "\t\t\"logs_collected\": {",
                            "\n",
                            "\t\t\t\"windows_events\": {",
                            "\n",
                            "\t\t\t\t\"collect_list\": [",
                            "\n",
                            "\t\t\t\t\t{",
                            "\n",
                            "\t\t\t\t\t\t\"event_format\": \"text\",",
                            "\n",
                            "\t\t\t\t\t\t\"event_levels\": [",
                            "\n",
                            "\t\t\t\t\t\t\t\"INFORMATION\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"WARNING\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"ERROR\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"CRITICAL\"",
                            "\n",
                            "\t\t\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\t\t\"event_name\": \"Application\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"log_group_name\": \"",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Servers-ApplicationEvents\"",
                            "\n",
                            "\t\t\t\t\t},",
                            "\n",
                            "\t\t\t\t\t{",
                            "\n",
                            "\t\t\t\t\t\t\"event_format\": \"text\",",
                            "\n",
                            "\t\t\t\t\t\t\"event_levels\": [",
                            "\n",
                            "\t\t\t\t\t\t\t\"INFORMATION\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"WARNING\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"ERROR\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"CRITICAL\"",
                            "\n",
                            "\t\t\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\t\t\"event_name\": \"System\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"log_group_name\": \"",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Servers-SystemEvents\"",
                            "\n",
                            "\t\t\t\t\t},",
                            "\n",
                            "\t\t\t\t\t{",
                            "\n",
                            "\t\t\t\t\t\t\"event_format\": \"text\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"event_levels\": [",
                            "\n",
                            "\t\t\t\t\t\t\t\"INFORMATION\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"WARNING\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"ERROR\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"CRITICAL\"",
                            "\n",
                            "\t\t\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\t\t\"event_name\": \"Security\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"log_group_name\": \"",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Servers-SecurityEvents\"",
                            "\n",
                            "\t\t\t\t\t}",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t}",
                            "\n",
                            "\t\t}",
                            "\n",
                            "\t},",
                            "\n",
                            "\t\"metrics\": {",
                            "\n",
                            "\t\t\"append_dimensions\": {",
                            "\n",
                            "\t\t\t\"AutoScalingGroupName\": \"${aws:AutoScalingGroupName}\",",
                            "\n",
                            "\t\t\t\"ImageId\": \"${aws:ImageId}\",",
                            "\n",
                            "\t\t\t\"InstanceId\": \"${aws:InstanceId}\",",
                            "\n",
                            "\t\t\t\"InstanceType\": \"${aws:InstanceType}\"",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\"metrics_collected\": {",
                            "\n",
                            "\t\t\t\"LogicalDisk\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"% Free Space\",",
                            "\n",
                            "\t\t\t\t\t\"Avg. Disk sec/Transfer\",",
                            "\n",
                            "\t\t\t\t\t\"Avg. Disk sec/Read\",",
                            "\n",
                            "\t\t\t\t\t\"Avg. Disk sec/Write\",",
                            "\n",
                            "\t\t\t\t\t\"Avg. Disk Queue Length\",",
                            "\n",
                            "\t\t\t\t\t\"Disk Transfers/sec\",",
                            "\n",
                            "\t\t\t\t\t\"Disk Reads/sec\",",
                            "\n",
                            "\t\t\t\t\t\"Disk Writes/sec\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"Memory\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"% Committed Bytes In Use\",",
                            "\n",
                            "\t\t\t\t\t\"Available Mbytes\",",
                            "\n",
                            "\t\t\t\t\t\"Free System Page Table Entries\",",
                            "\n",
                            "\t\t\t\t\t\"Pool Nonpaged Bytes\",",
                            "\n",
                            "\t\t\t\t\t\"Pool Paged Bytes\"",
                            "\n",
                            "\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"Paging File\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"% Usage\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"PhysicalDisk\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"% Disk Time\",",
                            "\n",
                            "\t\t\t\t\t\"Disk Write Bytes/sec\",",
                            "\n",
                            "\t\t\t\t\t\"Disk Read Bytes/sec\",",
                            "\n",
                            "\t\t\t\t\t\"Disk Writes/sec\",",
                            "\n",
                            "\t\t\t\t\t\"Disk Reads/sec\"",
                            "\n",
                            "\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"Processor\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"% User Time\",",
                            "\n",
                            "\t\t\t\t\t\"% Privileged Time\",",
                            "\n",
                            "\t\t\t\t\t\"% Idle Time\",",
                            "\n",
                            "\t\t\t\t\t\"% DPC Time\",",
                            "\n",
                            "\t\t\t\t\t\"% Processor Time\",",
                            "\n",
                            "\t\t\t\t\t\"% Interrupt Time\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"Network Interface\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"Output Queue Length\",",
                            "\n",
                            "\t\t\t\t\t\"Packets Outbound Discarded\",",
                            "\n",
                            "\t\t\t\t\t\"Packets Outbound Errors\",",
                            "\n",
                            "\t\t\t\t\t\"Packets Received Discarded\",",
                            "\n",
                            "\t\t\t\t\t\"Packets Received Errors\",",
                            "\n",
                            "\t\t\t\t\t\"Offloaded Connections\",",
                            "\n",
                            "\t\t\t\t\t\"Packets Received/sec\",",
                            "\n",
                            "\t\t\t\t\t\"Packets Sent/sec\",",
                            "\n",
                            "\t\t\t\t\t\"Bytes Total/sec\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"Process\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"Handle Count\",",
                            "\n",
                            "\t\t\t\t\t\"Thread Count\",",
                            "\n",
                            "\t\t\t\t\t\"Private Bytes\",",
                            "\n",
                            "\t\t\t\t\t\"Working Set\",",
                            "\n",
                            "\t\t\t\t\t\"IO Data Operations/Sec\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t\t]",
                            "\n",
                            "\t\t\t\t},",
                            "\n",
                            "\t\t\t\"System\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"Context Switches/sec\",",
                            "\n",
                            "\t\t\t\t\t\"Processor Queue Length\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"TCPv4\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"Connections Established\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60",
                            "\n",
                            "\t\t\t\t},",
                            "\n",
                            "\t\t\t\"TCPv6\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\"Connections Established\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"statsd\": {",
                            "\n",
                            "\t\t\t\t\"metrics_aggregation_interval\": 60,",
                            "\n",
                            "\t\t\t\t\"metrics_collection_interval\": 10,",
                            "\n",
                            "\t\t\t\t\"service_address\": \":8125\"",
                            "\n",
                            "\t\t\t}",
                            "\n",
                            "\t\t}",
                            "\n",
                            "\t}",
                            "\n",
                            "}",
                            "\n"
                        ]
                    ]
                }
            }
        },
        "CWAgentBasic": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Tier": "Advanced",
                "Type": "String",
                "Description": "CloudWatch Client Installation - System and Application Logs and Basic Performance Metrics",
                "Value": {
                    "Fn::Join": [
                        "",
                        [
                            "{",
                            "\n",
                            "\t\"logs\": {",
                            "\n",
                            "\t\t\"logs_collected\": {",
                            "\n",
                            "\t\t\t\"windows_events\": {",
                            "\n",
                            "\t\t\t\t\"collect_list\": [",
                            "\n",
                            "\t\t\t\t\t{",
                            "\n",
                            "\t\t\t\t\t\t\"event_format\": \"text\",",
                            "\n",
                            "\t\t\t\t\t\t\"event_levels\": [",
                            "\n",
                            "\t\t\t\t\t\t\t\"INFORMATION\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"WARNING\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"ERROR\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"CRITICAL\"",
                            "\n",
                            "\t\t\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\t\t\"event_name\": \"Application\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"log_group_name\": \"",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Servers-ApplicationEvents\"",
                            "\n",
                            "\t\t\t\t\t},",
                            "\n",
                            "\t\t\t\t\t{",
                            "\n",
                            "\t\t\t\t\t\t\"event_format\": \"text\",",
                            "\n",
                            "\t\t\t\t\t\t\"event_levels\": [",
                            "\n",
                            "\t\t\t\t\t\t\t\"INFORMATION\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"WARNING\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"ERROR\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"CRITICAL\"",
                            "\n",
                            "\t\t\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\t\t\"event_name\": \"System\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"log_group_name\": \"",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Servers-SystemEvents\"",
                            "\n",
                            "\t\t\t\t\t},",
                            "\n",
                            "\t\t\t\t\t{",
                            "\n",
                            "\t\t\t\t\t\t\"event_format\": \"text\",",
                            "\n",
                            "\t\t\t\t\t\t\"event_levels\": [",
                            "\n",
                            "\t\t\t\t\t\t\t\"INFORMATION\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"WARNING\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"ERROR\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"CRITICAL\"",
                            "\n",
                            "\t\t\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\t\t\"event_name\": \"Security\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"log_group_name\": \"",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Servers-SecurityEvents\"",
                            "\n",
                            "\t\t\t\t\t}",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t}",
                            "\n",
                            "\t\t}",
                            "\n",
                            "\t},",
                            "\n",
                            "\t\"metrics\": {",
                            "\n",
                            "\t\t\"append_dimensions\": {",
                            "\n",
                            "\t\t\t\"AutoScalingGroupName\": \"${aws:AutoScalingGroupName}\",",
                            "\n",
                            "\t\t\t\"ImageId\": \"${aws:ImageId}\",",
                            "\n",
                            "\t\t\t\"InstanceId\": \"${aws:InstanceId}\",",
                            "\n",
                            "\t\t\t\"InstanceType\": \"${aws:InstanceType}\"",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\"metrics_collected\": {",
                            "\n",
                            "\t\t\t\"LogicalDisk\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"% Free Space\"",
                            "\n",
                            "\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"Memory\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"Available Mbytes\"",
                            "\n",
                            "\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"Paging File\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"% Usage\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"Processor\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"% Processor Time\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"System\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"Processor Queue Length\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\"metrics_collection_interval\": 60",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"statsd\": {",
                            "\n",
                            "\t\t\t\t\"metrics_aggregation_interval\": 60,",
                            "\n",
                            "\t\t\t\t\"metrics_collection_interval\": 10,",
                            "\n",
                            "\t\t\t\t\"service_address\": \":8125\"",
                            "\n",
                            "\t\t\t}",
                            "\n",
                            "\t\t}",
                            "\n",
                            "\t}",
                            "\n",
                            "}",
                            "\n"
                        ]
                    ]
                }
            }
        },
        "CWAgentOnlyEvents": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Tier": "Advanced",
                "Type": "String",
                "Description": "CloudWatch Client Installation - Only Event Viewer Logs",
                "Value": {
                    "Fn::Join": [
                        "",
                        [
                            "{",
                            "\n",
                            "\t\"logs\": {",
                            "\n",
                            "\t\t\"logs_collected\": {",
                            "\n",
                            "\t\t\t\"windows_events\": {",
                            "\n",
                            "\t\t\t\t\"collect_list\": [",
                            "\n",
                            "\t\t\t\t\t{",
                            "\n",
                            "\t\t\t\t\t\t\"event_format\": \"text\",",
                            "\n",
                            "\t\t\t\t\t\t\"event_levels\": [",
                            "\n",
                            "\t\t\t\t\t\t\t\"INFORMATION\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"WARNING\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"ERROR\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"CRITICAL\"",
                            "\n",
                            "\t\t\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\t\t\"event_name\": \"Application\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"log_group_name\": \"",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Servers-ApplicationEvents\"",
                            "\n",
                            "\t\t\t\t\t},",
                            "\n",
                            "\t\t\t\t\t{",
                            "\n",
                            "\t\t\t\t\t\t\"event_format\": \"text\",",
                            "\n",
                            "\t\t\t\t\t\t\"event_levels\": [",
                            "\n",
                            "\t\t\t\t\t\t\t\"INFORMATION\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"WARNING\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"ERROR\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"CRITICAL\"",
                            "\n",
                            "\t\t\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\t\t\"event_name\": \"System\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"log_group_name\": \"",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Servers-SystemEvents\"",
                            "\n",
                            "\t\t\t\t\t},",
                            "\n",
                            "\t\t\t\t\t{",
                            "\n",
                            "\t\t\t\t\t\t\"event_format\": \"text\",",
                            "\n",
                            "\t\t\t\t\t\t\"event_levels\": [",
                            "\n",
                            "\t\t\t\t\t\t\t\"INFORMATION\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"WARNING\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"ERROR\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"CRITICAL\"",
                            "\n",
                            "\t\t\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\t\t\"event_name\": \"Security\",",
                            "\n",
                            "\t\t\t\t\t\t\t\"log_group_name\": \"",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Servers-SecurityEvents\"",
                            "\n",
                            "\t\t\t\t\t}",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t}",
                            "\n",
                            "\t\t}",
                            "\n",
                            "\t}",
                            "\n",
                            "}",
                            "\n"
                        ]
                    ]
                }
            }
        },
        "CWAgentOnlyMetrics": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Tier": "Advanced",
                "Type": "String",
                "Description": "CloudWatch Client Installation - Only Basic Metrics",
                "Value": {
                    "Fn::Join": [
                        "",
                        [
                            "{",
                            "\n",
                            "\t\"metrics\": {",
                            "\n",
                            "\t\t\"append_dimensions\": {",
                            "\n",
                            "\t\t\t\"AutoScalingGroupName\": \"${aws:AutoScalingGroupName}\",",
                            "\n",
                            "\t\t\t\"ImageId\": \"${aws:ImageId}\",",
                            "\n",
                            "\t\t\t\"InstanceId\": \"${aws:InstanceId}\",",
                            "\n",
                            "\t\t\t\"InstanceType\": \"${aws:InstanceType}\"",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\"metrics_collected\": {",
                            "\n",
                            "\t\t\t\"LogicalDisk\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"% Free Space\"",
                            "\n",
                            "\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"Memory\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"Available Mbytes\"",
                            "\n",
                            "\t\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"Paging File\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"% Usage\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"Processor\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"% Processor Time\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\"metrics_collection_interval\": 60,",
                            "\n",
                            "\t\t\t\t\"resources\": [",
                            "\n",
                            "\t\t\t\t\t\"*\"",
                            "\n",
                            "\t\t\t\t]",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"System\": {",
                            "\n",
                            "\t\t\t\t\"measurement\": [",
                            "\n",
                            "\t\t\t\t\t\"Processor Queue Length\"",
                            "\n",
                            "\t\t\t\t],",
                            "\n",
                            "\t\t\t\t\"metrics_collection_interval\": 60",
                            "\n",
                            "\t\t\t},",
                            "\n",
                            "\t\t\t\"statsd\": {",
                            "\n",
                            "\t\t\t\t\"metrics_aggregation_interval\": 60,",
                            "\n",
                            "\t\t\t\t\"metrics_collection_interval\": 10,",
                            "\n",
                            "\t\t\t\t\"service_address\": \":8125\"",
                            "\n",
                            "\t\t\t}",
                            "\n",
                            "\t\t}",
                            "\n",
                            "\t}",
                            "\n",
                            "}",
                            "\n"
                        ]
                    ]
                }
            }
        }
    },
    "Outputs": {
        "DomainAdministrator": {
            "Description": "Domain Administrator account.",
            "Value": {
                "Fn::Join": [
                    "",
                    [{
                            "Ref": "Parameter08bNetBiosName"
                        },
                        {
                            "Fn::If": [
                                "CreateMicrosoftAD",
                                "\\Admin",
                                "\\Administrator"
                            ]
                        }
                    ]
                ]
            }
        },
        "DirectoryID": {
            "Description": "Directory ID.",
            "Value": {
                "Fn::If": [
                    "CreateMicrosoftAD",
                    {
                        "Ref": "Resource24ManagedAD"
                    },
                    {
                        "Ref": "Resource24SimpleAD"
                    }
                ]
            }
        },
        "DomainAdminUPN": {
            "Condition": "CreateADFS",
            "Description": "Credentials to logon via ADFS.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "admin@",
                        {
                            "Ref": "Parameter08aDNSDomainName"
                        }
                    ]
                ]
            }
        },
        "ADFSLogonScreen": {
            "Condition": "CreateADFS",
            "Description": "ADFS logon screen.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Ref": "Parameter12bFederationServiceName"
                        },
                        ".",
                        {
                            "Ref": "Parameter08aDNSDomainName"
                        },
                        "/adfs/ls/idpinitiatedsignon.aspx"
                    ]
                ]
            }
        },
        "AdministrativeRole": {
            "Condition": "CreateADFS",
            "Description": "IAM Role for Administrative Access via ADFS.",
            "Value": {
                "Ref": "RoleADFSAdminAccess"
            }
        },
        "AdministrativeADGroup": {
            "Condition": "CreateADFS",
            "Description": "AD Group for Administrative Access via ADFS.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "AWS-",
                        {
                            "Ref": "AWS::AccountId"
                        },
                        "-",
                        {
                            "Ref": "RoleADFSAdminAccess"
                        }
                    ]
                ]
            }
        },
        "AppStreamRole": {
            "Condition": "CreateADFS",
            "Description": "IAM Role for AppStream Access via ADFS.",
            "Value": {
                "Ref": "RoleADFSAppStream"
            }
        },
        "AppStreamADGroup": {
            "Condition": "CreateADFS",
            "Description": "AD Group for AppStream Access via ADFS.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "AWS-",
                        {
                            "Ref": "AWS::AccountId"
                        },
                        "-",
                        {
                            "Ref": "RoleADFSAppStream"
                        }
                    ]
                ]
            }
        },
        "AppStreamRelayState": {
            "Condition": "CreateADFS",
            "Description": "AppStream Relay State URL.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Ref": "Parameter12bFederationServiceName"
                        },
                        ".",
                        {
                            "Ref": "Parameter08aDNSDomainName"
                        },
                        "/adfs/ls/idpinitiatedsignon.aspx?RelayState=RPID%3Durn%253Aamazon%253Awebservices%26RelayState%3Dhttps%253A%252F%252F",
                        "appstream2.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".aws.amazon.com%252Fsaml%253Fstack%253D",
                        {
                            "Ref": "AWS::StackName"
                        },
                        ".AppStreamStack",
                        "%2526accountId%253D",
                        {
                            "Ref": "AWS::AccountId"
                        }
                    ]
                ]
            }
        },
        "FSx": {
            "Condition": "CreateFSx",
            "Description": "FSx file system ID.",
            "Value": {
                "Ref": "Resource40FSx01"
            }
        },
        "Workspaces": {
            "Condition": "CreateWorkspace",
            "Description": "Domain Administrator - Workspace ID.",
            "Value": {
                "Ref": "Resource41Workspace"
            }
        },
        "WorkspacesRegistrationCode": {
            "Condition": "CreateWorkspace",
            "Description": "Workspaces Registration Code.",
            "Value": {
                "Fn::GetAtt": [
                    "Resource39WorkspacesRegistrationCode",
                    "Value"
                ]
            }
        },
        "RemoteDesktop": {
            "Condition": "CreateRemoteDesktop",
            "Description": "Remote Desktop Server - Instance ID.",
            "Value": {
                "Ref": "Resource27MemberServer01"
            }
        },
        "SecurityRecommentation": {
            "Description": "Security recommendation to comply with the \"Principle of Least Privilege\".",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "To improve the security of this deployment, it is recommended to detach the IAM Policy \"",
                        {
                            "Ref": "ManagedPolicyDeploymentPermissions"
                        },
                        "\" from the following role: \"",
                        {
                            "Ref": "RoleMemberServers"
                        },
                        "\". This IAM Policy is unnecessary for instances normal operation. The permissions in this policy are required only if you are deploying or updating the CloudFormation stack."
                    ]
                ]
            }
        },
        "LinuxDomainCredential": {
            "Condition": "CreateLinux",
            "Description": "Domain credentials to connect to the Linux instance.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "admin@",
                        {
                            "Ref": "Parameter08aDNSDomainName"
                        },
                        "@",
                        {
                            "Fn::If": [
                                "LinuxTypePublic",
                                {
                                    "Fn::GetAtt": [
                                        "Resource43Linux",
                                        "PublicIp"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "Resource43Linux",
                                        "PrivateIp"
                                    ]
                                }
                            ]
                        }
                    ]
                ]
            }
        },
        "LinuxInstanceRole": {
            "Condition": "CreateLinux",
            "Description": "Role to be attached to Linux instances during launch to allow Seamless Domain Join.",
            "Value": {
                "Ref": "InstanceProfileForLinuxServers"
            }
        },
        "WorkmailOrganization": {
            "Condition": "CreateWorkmail",
            "Description": "Workmail Organization ID.",
            "Value": {
                "Fn::GetAtt": [
                    "Resource39WorkmailOrgID",
                    "Value"
                ]
            }
        },
        "WorkmailURL": {
            "Condition": "CreateWorkmail",
            "Description": "Workmail WebAccess URL.",
            "Value": {
                "Fn::GetAtt": [
                    "Resource39WorkmailURL",
                    "Value"
                ]
            }
        }
    }
}